<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dronesec</title>
    <link>https://dronesec.net/</link>
    <description>Recent content on dronesec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Bryan Alexander</copyright>
    <lastBuildDate>Mon, 28 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://dronesec.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>leveraging Lua to sniff memcached proxies</title>
      <link>https://dronesec.net/blog/leveraging-lua-to-sniff-memcached-proxies/</link>
      <pubDate>Thu, 29 Aug 2024 22:54:02 -0700</pubDate>
      
      <guid>https://dronesec.net/blog/leveraging-lua-to-sniff-memcached-proxies/</guid>
      <description>In early January 2024 I gave a talk at SchmooCon on memcached and some bugs I discovered through fuzzing (slides here). Unfortunately, due to the 20 minute slot, I did not have an opportunity to discuss payloads and further post-exploitation activities available to attackers. This post sums up some of those capabilities and includes a few other nuggets for VR/red teaming memcached.
Mostly, this covers some of the tangential exploit development work I performed on memcached, as well as how we can sniff traffic flowing from the proxy to the data nodes.</description>
    </item>
    
    <item>
      <title>the fanciful allure and utility of syscalls</title>
      <link>https://dronesec.net/blog/the-fanciful-allure-and-utility-of-syscalls/</link>
      <pubDate>Wed, 12 May 2021 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/the-fanciful-allure-and-utility-of-syscalls/</guid>
      <description>So over the years I&amp;rsquo;ve had a number of conversations about the utility of using syscalls in shellcode, C2s, or loaders in offsec tooling and red team ops. For reasons likely related to the increasing maturity of EDRs and their totalitarian grip in enterprise environments, I&amp;rsquo;ve seen an uptick in projects and blogs championing &amp;ldquo;raw syscalls&amp;rdquo; as a technique for evading AV/SIEM technologies. This post is an attempt to describe why I think the technique&amp;rsquo;s efficacy has been overstated and its utility stretched thin.</description>
    </item>
    
    <item>
      <title>On Exploiting CVE-2021-1648 (splwow64 LPE)</title>
      <link>https://dronesec.net/blog/on-exploiting-cve-2021-1648-splwow64-lpe/</link>
      <pubDate>Wed, 10 Mar 2021 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/on-exploiting-cve-2021-1648-splwow64-lpe/</guid>
      <description>In this post we&amp;rsquo;ll examine the exploitability of CVE-2021-1648, a privilege escalation bug in splwow64. I actually started writing this post to organize my notes on the bug and subsystem, and was initially skeptical of its exploitability. I went back and forth on the notion, ultimately ditching the bug. Regardless, organizing notes and writing blogs can be a valuable exercise! The vector is useful, seems to have a lot of attack surface, and will likely crop up again unless Microsoft performs a serious exorcism on the entire spooler architecture.</description>
    </item>
    
    <item>
      <title>Digging the Adobe Sandbox - IPC Internals</title>
      <link>https://dronesec.net/blog/digging-the-adobe-sandbox-ipc-internals/</link>
      <pubDate>Sat, 08 Aug 2020 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/digging-the-adobe-sandbox-ipc-internals/</guid>
      <description>This post kicks off a short series into reversing the Adobe Reader sandbox. I initially started this research early last year and have been working on it off and on since. This series will document the Reader sandbox internals, present a few tools for reversing/interacting with it, and a description of the results of this research. There may be quite a bit of content here, but I&amp;rsquo;ll be doing a lot of braindumping.</description>
    </item>
    
    <item>
      <title>Adobe Reader Tag Table</title>
      <link>https://dronesec.net/other/adobe-reader-tags/</link>
      <pubDate>Fri, 07 Aug 2020 15:00:00 -0600</pubDate>
      
      <guid>https://dronesec.net/other/adobe-reader-tags/</guid>
      <description>Generated on 07/29/2020 22:58:31 for Adobe Reader 20.6.20034.39303 Tag Manager Argument Count Arguments3FilesystemDispatcher7wchar,ulong,ulong,ulong,ulong,ulong,ulong4FilesystemDispatcher5wchar,ulong,ulong,ulong,ulong5FilesystemDispatcher3wchar,ulong,inoutptr6FilesystemDispatcher3wchar,ulong,inoutptr7FilesystemDispatcher5void*,inoutptr,inoutptr,ulong,ulong8NamedPipeDispatcher7wchar,ulong,ulong,ulong,ulong,ulong,ulong9ProcessThreadDispatcher2ulong,ulong10ProcessThreadDispatcher2ulong,ulong11ProcessThreadDispatcher2void*,ulong12ProcessThreadDispatcher3void*,ulong,ulong13ProcessThreadDispatcher5wchar,wchar,wchar,ulong,inoutptr14SyncDispatcher3wchar,ulong,ulong15SyncDispatcher2wchar,ulong16RegistryDispatcher6wchar,ulong,void*,ulong,ulong,ulong17RegistryDispatcher4wchar,ulong,void*,ulong21MutantDispatcher4wchar,ulong,void*,ulong22MutantDispatcher5wchar,ulong,void*,ulong,ulong23SectionDispatcher10wchar,ulong,void*,ulong,ulong,ulong,ulong,ulong,ulong,void*24SectionDispatcher4wchar,ulong,void*,ulong25BrokerServerDispatcher1void*26BrokerServerDispatcher1void*27DDEDispatcher1void*28DDEDispatcher2wchar,ulong29PreviewDispatcher4void*,inptr,inptr,wchar30PreviewDispatcher2ulong,ulong31PreviewDispatcher2ulong,inptr32BrokerServerDispatcher9ulong,void*,inoutptr,inoutptr,ulong,wchar,wchar,wchar,wchar33BrokerServerDispatcher1inoutptr34BrokerServerDispatcher1wchar35BrokerServerDispatcher3void*,wchar,ulong36BrokerServerDispatcher1wchar37KerberosDispatcher2inoutptr,inoutptr38KerberosDispatcher1inptr39KerberosDispatcher8inptr,inptr,char,ulong,ulong,inptr,inoutptr,inoutptr40BrokerServerDispatcher1void*41CryptDispatcher5inptr,wchar,inptr,ulong,inoutptr42CryptDispatcher5inoutptr,char,char,ulong,ulong43CryptDispatcher5inoutptr,wchar,wchar,ulong,ulong44CryptDispatcher2ulong,ulong45CryptDispatcher5ulong,inoutptr,ulong,ulong,inoutptr46CryptDispatcher1ulong47CryptDispatcher4ulong,ulong,inoutptr,ulong48CryptDispatcher5ulong,ulong,ulong,char,ulong49CryptDispatcher2ulong,inoutptr50CryptDispatcher3ulong,ulong,inoutptr51BrokerServerDispatcher3wchar,wchar,ulong52BrokerServerDispatcher2void*,ulong53BrokerServerDispatcher1ulong54SelfhealDispatcher1ulong55SelfhealDispatcher1ulong56BrokerServerDispatcher1ulong57BrokerServerDispatcher1ulong58BrokerServerDispatcher5void*,ulong,inoutptr,ulong,wchar59BrokerServerDispatcher1ulong60BrokerServerDispatcher1ulong61BrokerServerDispatcher1ulong62BrokerServerDispatcher1wchar63BrokerServerDispatcher2wchar,ulong64BrokerServerDispatcher2void*,wchar65BrokerServerDispatcher2void*,wchar66BrokerServerDispatcher1wchar67WininetDispatcher1void*68WininetDispatcher8void*,char,ulong,char,char,ulong,ulong,ulong69WininetDispatcher8void*,wchar,ulong,wchar,wchar,ulong,ulong,ulong70WininetDispatcher5char,ulong,char,char,ulong71WininetDispatcher5wchar,ulong,wchar,wchar,ulong72WininetDispatcher3void*,ulong,ulong73WininetDispatcher3void*,Memory,Memory74WininetDispatcher3void*,Memory,Memory75WininetDispatcher3void*,ulong,inptr76WininetDispatcher3void*,ulong,inptr77WininetDispatcher2void*,void*78WininetDispatcher2void*,void*80WininetDispatcher3void*,inptr,ulong81WininetDispatcher3void*,inptr,ulong82WininetDispatcher8void*,char,char,char,char,inptr,ulong,ulong83WininetDispatcher8void*,wchar,wchar,wchar,wchar,inptr,ulong,ulong84WininetDispatcher5void*,ulong,inoutptr,ulong,ulong85WininetDispatcher5void*,ulong,inoutptr,ulong,ulong86WininetDispatcher3void*,inptr,Memory87WininetDispatcher3void*,inptr,Memory88WininetDispatcher3void*,ulong,ulong90WininetDispatcher2void*,ulong91WininetDispatcher2void*,ulong92WininetDispatcher1ulong93WininetDispatcher3void*,ulong,inoutptr94WininetDispatcher3void*,ulong,inoutptr95WininetDispatcher4void*,void*,ulong,ulong96WininetDispatcher1ulong97WininetDispatcher3char,char,inoutptr98WininetDispatcher3char,char,char99WininetDispatcher2void*,void*100WininetDispatcher4char,char,inoutptr,ulong101ClipboardDispatcher2Memory,ulong102ClipboardDispatcher1ulong103ClipboardDispatcher1ulong104ClipboardDispatcher1ulong105ClipboardDispatcher1ulong106ClipboardDispatcher1ulong107ClipboardDispatcher1ulong108ClipboardDispatcher1ulong109ClipboardDispatcher2Memory,ulong110ClipboardDispatcher2inoutptr,ulong111ClipboardDispatcher2inoutptr,ulong112ClipboardDispatcher1ulong113ClipboardDispatcher1ulong114ClipboardDispatcher1inoutptr115ClipboardDispatcher1ulong116ClipboardDispatcher1ulong117PrintDispatcher6ulong,ulong,wchar,wchar,wchar,ulong118PrintDispatcher4char,char,char,inptr119PrintDispatcher4wchar,wchar,wchar,inptr120PrintDispatcher3wchar,wchar,inptr121PrintDispatcher3wchar,wchar,inptr122PrintDispatcher1ulong123PrintDispatcher1ulong124PrintDispatcher1ulong125PrintDispatcher1ulong126PrintDispatcher2ulong,inptr127PrintDispatcher2ulong,ulong128PrintDispatcher1void*129PrintDispatcher3ulong,ulong,inptr130PrintDispatcher1inptr131PrintDispatcher4ulong,ulong,inptr,inoutptr132PrintDispatcher4wchar,wchar,wchar,inptr133PrintDispatcher3void*,ulong,inoutptr134PrintDispatcher4void*,ulong,inoutptr,ulong135PrintDispatcher3void*,ulong,inoutptr136PrintDispatcher3void*,ulong,inoutptr137PrintDispatcher1ulong138PrintDispatcher1void*139PrintDispatcher6void*,void*,wchar,inoutptr,inptr,ulong140PrintDispatcher3ulong,wchar,wchar141PrintDispatcher1wchar142PrintDispatcher1wchar143PrintDispatcher4ulong,ulong,ulong,Memory144PrintDispatcher2ulong,char145PrintDispatcher2ulong,wchar146PrintDispatcher4void*,ulong,wchar,wchar147PrintDispatcher1void*148PrintDispatcher1void*149PrintDispatcher1void*150PrintDispatcher2void*,inptr151PrintDispatcher2wchar,ulong152PrintDispatcher4void*,inptr,ulong,Memory153PrintDispatcher1void*154PrintDispatcher4wchar,inptr,ulong,ulong155PrintDispatcher5char,char,ulong,inoutptr,inptr156PrintDispatcher5wchar,wchar,ulong,inoutptr,inptr157PrintDispatcher2ulong,Memory158PrintDispatcher2ulong,inoutptr159PrintDispatcher3ulong,ulong,Memory160PrintDispatcher3void*,wchar,inoutptr161BrokerServerDispatcher3wchar,ulong,inoutptr162BrokerServerDispatcher9ulong,ulong,ulong,ulong,wchar,wchar,wchar,wchar,inoutptr163BrokerServerDispatcher3ulong,wchar,wchar164MAPIDispatcher1ulong165MAPIDispatcher7ulong,ulong,wchar,ulong,inoutptr,inoutptr,inoutptr166MAPIDispatcher10ulong,ulong,wchar,wchar,wchar,char,char,char,ulong,ulong167MAPIDispatcher9ulong,ulong,char,char,char,ulong,ulong,char,wchar168MAPIDispatcher1inoutptr169MAPIDispatcher1ulong170BrokerServerDispatcher1ulong171BrokerServerDispatcher4void*,ulong,ulong,Memory172BrokerServerDispatcher1ulong173BrokerServerDispatcher1ulong174BrokerServerDispatcher1ulong175BrokerServerDispatcher1ulong176BrokerServerDispatcher1ulong177ExecProcessDispatcher1ulong178ExecProcessDispatcher2wchar,ulong179ExecProcessDispatcher1ulong180ExecProcessDispatcher2ulong,ulong181ExecProcessDispatcher1ulong182ExecProcessDispatcher1ulong183ExecProcessDispatcher1wchar184ExecProcessDispatcher2wchar,inoutptr185ExecProcessDispatcher2inoutptr,inoutptr186ExecProcessDispatcher2inoutptr,inoutptr187ExecProcessDispatcher3ulong,ulong,wchar188BrokerServerDispatcher1void*189BrokerServerDispatcher1wchar190BrokerServerDispatcher2ulong,ulong191BrokerServerDispatcher2ulong,ulong192BrokerServerDispatcher1ulong193CryptDispatcher7ulong,ulong,ulong,ulong,ulong,ulong,inoutptr194CryptDispatcher1ulong195CryptDispatcher3ulong,ulong,inoutptr196CryptDispatcher4ulong,ulong,ulong,inoutptr197CryptDispatcher1ulong198CryptDispatcher4ulong,ulong,ulong,ulong199CryptDispatcher3ulong,inptr,ulong200CryptDispatcher2ulong,ulong201CryptDispatcher2ulong,inoutptr202CryptDispatcher2wchar,inoutptr203CryptDispatcher2ulong,inoutptr204CryptDispatcher2ulong,ulong205CryptDispatcher1ulong206CryptDispatcher1ulong207CryptDispatcher3ulong,ulong,inptr208CryptDispatcher1ulong209CryptDispatcher5ulong,ulong,ulong,ulong,inptr210CryptDispatcher4ulong,ulong,ulong,ulong211CryptDispatcher3ulong,ulong,inptr212CryptDispatcher2ulong,ulong213CryptDispatcher4ulong,ulong,ulong,inoutptr214CryptDispatcher4ulong,ulong,ulong,inoutptr215CryptDispatcher7ulong,ulong,ulong,char,ulong,ulong,ulong216CryptDispatcher3inptr,inptr,inoutptr217CryptDispatcher8ulong,ulong,ulong,wchar,wchar,ulong,ulong,ulong218CryptDispatcher6ulong,ulong,ulong,ulong,inptr,ulong219CryptDispatcher5ulong,ulong,ulong,ulong,inoutptr220CryptDispatcher3ulong,Memory,ulong221CryptDispatcher1ulong222CryptDispatcher5ulong,ulong,char,ulong,inoutptr223CryptDispatcher5ulong,ulong,wchar,ulong,inoutptr224CryptDispatcher4ulong,ulong,inoutptr,ulong225CryptDispatcher3ulong,ulong,inptr226CryptDispatcher4ulong,ulong,char,ulong227CryptDispatcher2wchar,ulong228CryptDispatcher4ulong,wchar,inoutptr,ulong229CryptDispatcher4ulong,wchar,inptr,ulong230CryptDispatcher4ulong,wchar,ulong,ulong231CryptDispatcher5ulong,wchar,inptr,inoutptr,ulong232CryptDispatcher5ulong,ulong,wchar,inptr,ulong233CryptDispatcher3ulong,ulong,ulong234CryptDispatcher4ulong,inptr,inoutptr,ulong235CryptDispatcher5ulong,wchar,inptr,inoutptr,ulong236CryptDispatcher1ulong237BrokerServerDispatcher1ulong238BrokerServerDispatcher1ulong239BrokerServerDispatcher6Memory,ulong,ulong,ulong,ulong,ulong240BrokerServerDispatcher2ulong,ulong241BrokerServerDispatcher4void*,wchar,wchar,inoutptr242BrokerServerDispatcher1wchar243BrokerServerDispatcher1ulong244BrokerServerDispatcher1ulong245RegistryDispatcher2void*,wchar246BrokerServerDispatcher5wchar,ulong,void*,ulong,ulong247BrokerServerDispatcher2wchar,ulong248BrokerServerDispatcher1wchar249BrokerServerDispatcher2void*,ulong250BrokerServerDispatcher1ulong251BrokerServerDispatcher12ulong,wchar,inptr,wchar,wchar,wchar,inptr,inptr,ulong,ulong,ulong,ulong252BrokerServerDispatcher6ulong,inptr,inptr,wchar,inptr,ulong253BrokerServerDispatcher2ulong,wchar254BrokerServerDispatcher2ulong,ulong255BrokerServerDispatcher2ulong,ulong256BrokerServerDispatcher3void*,wchar,inoutptr257BrokerServerDispatcher2ulong,ulong258BrokerServerDispatcher1ulong259BrokerServerDispatcher13ulong,wchar,inptr,wchar,wchar,wchar,wchar,inptr,inptr,ulong,ulong,ulong,ulong260BrokerServerDispatcher9ulong,inptr,inptr,inptr,wchar,ulong,inptr,ulong,ulong261BrokerServerDispatcher1ulong263BrokerServerDispatcher1void*264BrokerServerDispatcher1void*265AtomDispatcher1wchar266AtomDispatcher1wchar267AtomDispatcher1ulong268AtomDispatcher3ulong,ulong,Memory269BrokerServerDispatcher17void*,wchar,wchar,wchar,wchar,wchar,inptr,inptr,ulong,ulong,ulong,ulong,wchar,inoutptr,inoutptr,ulong,inoutptr270BrokerServerDispatcher1ulong271BrokerServerDispatcher6void*,wchar,wchar,ulong,inptr,inoutptr272BrokerServerDispatcher1inoutptr273BrokerServerDispatcher1ulong274BrokerServerDispatcher3void*,ulong,inoutptr275BrokerServerDispatcher2char,ulong276BrokerServerDispatcher8void*,wchar,ulong,ulong,ulong,ulong,ulong,inoutptr277BrokerServerDispatcher2ulong,inoutptr278BrokerServerDispatcher1ulong279BrokerServerDispatcher1ulong280BrokerServerDispatcher3ulong,wchar,ulong281TaskbarManagerDispatcher7ulong,wchar,ulong,ulong,ulong,ulong,ulong282TaskbarManagerDispatcher1ulong283TaskbarManagerDispatcher1ulong284TaskbarManagerDispatcher3ulong,ulong,ulong286BrokerServerDispatcher2wchar,ulong287BrokerServerDispatcher1ulong288BrokerServerDispatcher1void*289BrokerServerDispatcher1ulong290BrokerServerDispatcher1ulong291BrokerServerDispatcher1ulong292BrokerServerDispatcher2void*,ulong293BrokerServerDispatcher2void*,wchar294BrokerServerDispatcher1ulong295BrokerServerDispatcher1ulong296BrokerServerDispatcher1ulong298BrokerServerDispatcher1ulong299BrokerServerDispatcher1ulong300BrokerServerDispatcher1ulong301BrokerServerDispatcher3ulong,ulong,ulong302BrokerServerDispatcher12ulong,wchar,inptr,wchar,wchar,wchar,wchar,inptr,inptr,ulong,ulong,ulong303BrokerServerDispatcher8ulong,inptr,inptr,inptr,wchar,ulong,inptr,ulong304BrokerServerDispatcher12ulong,wchar,inptr,wchar,wchar,wchar,inptr,inptr,ulong,ulong,ulong,ulong305BrokerServerDispatcher1wchar306BrokerServerDispatcher1ulong307BrokerServerDispatcher7char,char,char,char,char,ulong,char308BrokerServerDispatcher1void*309BrokerServerDispatcher1inoutptr310BrokerServerDispatcher1ulong311BrokerServerDispatcher8wchar,inptr,wchar,wchar,wchar,ulong,inptr,inptr </description>
    </item>
    
    <item>
      <title>top 20 films</title>
      <link>https://dronesec.net/other/top-20-films/</link>
      <pubDate>Thu, 02 Jul 2020 15:00:00 -0600</pubDate>
      
      <guid>https://dronesec.net/other/top-20-films/</guid>
      <description>Top 20, listed in ascending order, one per director.
Last Updated: 07/02/2020
Fallen Angels | Wong Kar Wai | 1995 | imdb Damnation | Bela Tarr | 1988 | imdb The Mirror | Andrei Tarkovsky | 1975 | imdb
Naked | Mike Leigh | 1993 | imdb
As I Was Moving Ahead Occasionally I Saw Brief Glimpses of Beauty | Jonas Mekas | 2000 | imdb
La Vie Nouvelle | Philippe Grandrieux | 2002 | imdb</description>
    </item>
    
    <item>
      <title>Exploiting Leaked Process and Thread Handles</title>
      <link>https://dronesec.net/blog/exploiting-leaked-process-and-thread-handles/</link>
      <pubDate>Thu, 22 Aug 2019 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/exploiting-leaked-process-and-thread-handles/</guid>
      <description>Over the years I&amp;rsquo;ve seen and exploited the occasional leaked handle bug. These can be particularly fun to toy with, as the handles aren&amp;rsquo;t always granted PROCESS_ALL_ACCESS or THREAD_ALL_ACCESS, requiring a bit more ingenuity. This post will address the various access rights assignable to handles and what we can do to exploit them to gain elevated code execution. I&amp;rsquo;ve chosen to focus specifically on process and thread handles as this seems to be the most common, but surely other objects can be exploited in similar manner.</description>
    </item>
    
    <item>
      <title>Code Execution via Fiber Local Storage</title>
      <link>https://dronesec.net/blog/code-execution-via-fiber-local-storage/</link>
      <pubDate>Mon, 12 Aug 2019 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/code-execution-via-fiber-local-storage/</guid>
      <description>While working on another research project (post to be released soon, will update here), I stumbled onto a very Hexacorn[0] inspired type of code injection technique that fit my situation perfectly. Instead of tainting the other post with its description and code, I figured I&amp;rsquo;d release a separate post describing it here.
When I say that it&amp;rsquo;s Hexacorn inspired, I mean that the bulk of the strategy is similar to everything else you&amp;rsquo;ve probably seen; we open a handle to the remote process, allocate some memory, and copy our shellcode into it.</description>
    </item>
    
    <item>
      <title>Dell Digital Delivery - CVE-2018-11072 - Local Privilege Escalation</title>
      <link>https://dronesec.net/blog/dell-digital-delivery-cve-2018-11072-local-privilege-escalation/</link>
      <pubDate>Wed, 22 Aug 2018 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/dell-digital-delivery-cve-2018-11072-local-privilege-escalation/</guid>
      <description>Back in March or April I began reversing a slew of Dell applications installed on a laptop I had. Many of them had privileged services or processes running and seemed to perform a lot of different complex actions. I previously disclosed a LPE in SupportAssist[0], and identified another in their Digital Delivery platform. This post will detail a Digital Delivery vulnerability and how it can be exploited. This was privately discovered and disclosed, and no known active exploits are in the wild.</description>
    </item>
    
    <item>
      <title>Dell SupportAssist Driver - Local Privilege Escalation</title>
      <link>https://dronesec.net/blog/dell-supportassist-driver-local-privilege-escalation/</link>
      <pubDate>Tue, 01 May 2018 22:00:00 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/dell-supportassist-driver-local-privilege-escalation/</guid>
      <description>This post details a local privilege escalation (LPE) vulnerability I found in Dell&amp;rsquo;s SupportAssist[0] tool. The bug is in a kernel driver loaded by the tool, and is pretty similar to bugs found by ReWolf in ntiolib.sys/winio.sys[1], and those found by others in ASMMAP/ASMMAP64[2]. These bugs are pretty interesting because they can be used to bypass driver signature enforcement (DSE) ad infinitum, or at least until they&amp;rsquo;re no longer compatible with newer operating systems.</description>
    </item>
    
    <item>
      <title>Abusing delay load DLLs for remote code injection</title>
      <link>https://dronesec.net/blog/abusing-delay-load-dlls-for-remote-code-injection/</link>
      <pubDate>Sun, 17 Sep 2017 15:00:00 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/abusing-delay-load-dlls-for-remote-code-injection/</guid>
      <description>I always tell myself that I&amp;rsquo;ll try posting more frequently on my blog, and yet here I am, two years later. Perhaps this post will provide the necessary motiviation to conduct more public research. I do love it.
This post details a novel remote code injection technique I discovered while playing around with delay loading DLLs. It allows for the injection of arbitrary code into arbitrary remote, running processes, provided that they implement the abused functionality.</description>
    </item>
    
    <item>
      <title>Abusing Token Privileges for EoP</title>
      <link>https://dronesec.net/blog/abusing-token-privileges-for-eop/</link>
      <pubDate>Fri, 01 Sep 2017 15:00:00 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/abusing-token-privileges-for-eop/</guid>
      <description>This is just a placeholder post to link off to Stephen Breen and I&amp;rsquo;s paper on abusing token privileges. You can read the entire paper here[0]. I also recommend checking out the blogpost he posted on Foxglove here[1].
[0] https://raw.githubusercontent.com/hatRiot/token-priv/master/abusing_token_eop_1.0.txt
[1] https://foxglovesecurity.com/2017/08/25/abusing-token-privileges-for-windows-local-privilege-escalation/</description>
    </item>
    
    <item>
      <title>ntpdc local buffer overflow</title>
      <link>https://dronesec.net/blog/ntpdc-local-buffer-overflow/</link>
      <pubDate>Tue, 06 Jan 2015 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/ntpdc-local-buffer-overflow/</guid>
      <description>Alejandro Hdez (@nitr0usmx) recently tweeted about a trivial buffer overflow in ntpdc, a deprecated NTP query tool still available and packaged with any NTP install. He posted a screenshot of the crash as the result of a large buffer passed into a vulnerable gets call. After digging into it a bit, I decided it&amp;rsquo;d be a fun exploit to write, and it was. There are a few quarks to it that make it of particular interest, of which I&amp;rsquo;ve detailed below.</description>
    </item>
    
    <item>
      <title>railo security - part four - pre-auth remote code execution</title>
      <link>https://dronesec.net/blog/railo-security-part-four-pre-auth-remote-code-execution/</link>
      <pubDate>Wed, 27 Aug 2014 15:00:00 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/railo-security-part-four-pre-auth-remote-code-execution/</guid>
      <description>Part one - intro
Part two - post-auth rce
Part three - pre-auth password retrieval
Part four - pre-auth remote code execution
This post concludes our deep dive into the Railo application server by detailing not only one, but two pre-auth remote code execution vulnerabilities. If you&amp;rsquo;ve skipped the first three parts of this blog post to get to the juicy stuff, I don&amp;rsquo;t blame you, but I do recommend going back and reading them; there&amp;rsquo;s some important information and details back there.</description>
    </item>
    
    <item>
      <title>railo security - part three - pre-authentication LFI</title>
      <link>https://dronesec.net/blog/railo-security-part-three-pre-authentication-lfi/</link>
      <pubDate>Sat, 23 Aug 2014 15:00:00 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/railo-security-part-three-pre-authentication-lfi/</guid>
      <description>Part one - intro
Part two - post-authentication rce
Part three - pre-authentication LFI
Part four - pre-authentication rce
This post continues our four part Railo security analysis with three pre-authentication LFI vulnerabilities. These allow anonymous users access to retrieve the administrative plaintext password and login to the server&amp;rsquo;s administrative interfaces. If you&amp;rsquo;re unfamiliar with Railo, I recommend at the very least reading part one of this series. The most significant LFI discussed has been implemented as auxiliary modules in clusterd, though they&amp;rsquo;re pretty trivial to exploit on their own.</description>
    </item>
    
    <item>
      <title>railo security - part two - post-authentication rce</title>
      <link>https://dronesec.net/blog/railo-security-part-two-post-authentication-rce/</link>
      <pubDate>Thu, 24 Jul 2014 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/railo-security-part-two-post-authentication-rce/</guid>
      <description>Part one - intro
Part two - post-authentication rce
Part three - pre-authentication lfi
Part four - pre-authentication rce
This post continues our dive into Railo security, this time introducing several post-authentication RCE vulnerabilities discovered in the platform. As stated in part one of this series, like ColdFusion, there is a task scheduler that allows authenticated users the ability to write local files. Whilst the existence of this feature sets it as the standard way to shell a Railo box, sometimes this may not work.</description>
    </item>
    
    <item>
      <title>gitlist - commit to rce</title>
      <link>https://dronesec.net/blog/gitlist-commit-to-rce/</link>
      <pubDate>Sun, 29 Jun 2014 15:00:00 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/gitlist-commit-to-rce/</guid>
      <description>Gitlist is a fantastic repository viewer for Git; it&amp;rsquo;s essentially your own private Github without all the social networking and glitzy features of it. I&amp;rsquo;ve got a private Gitlist that I run locally, as well as a professional instance for hosting internal projects. Last year I noticed a bug listed on their Github page that looked a lot like an exploitable hole:
Oops! sh: 1: Syntax error: EOF in backquote substitution I commented on its exploitability at the time, and though the hole appears to be closed, the issue still remains.</description>
    </item>
    
    <item>
      <title>railo security - part one - intro</title>
      <link>https://dronesec.net/blog/railo-security-part-one-intro/</link>
      <pubDate>Wed, 25 Jun 2014 15:00:00 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/railo-security-part-one-intro/</guid>
      <description>Part one - intro
Part two - post-authentication rce
Part three - pre-authentication lfi
Part four - pre-authentication rce
Railo is an open-source alternative to the popular Coldfusion application server, implementing a FOSSy CFML engine and application server. It emulates Coldfusion in a variety of ways, mainly features coming straight from the CF world, along with several of it&amp;rsquo;s own unique features (clustered servers, a plugin architecture, etc). In this four-part series, we&amp;rsquo;ll touch on how Railo, much like Coldfusion, can be used to gain access to a system or network of systems.</description>
    </item>
    
    <item>
      <title>rce in browser exploitation framework (BeEF)</title>
      <link>https://dronesec.net/blog/rce-in-browser-exploitation-framework-beef/</link>
      <pubDate>Tue, 13 May 2014 20:57:53 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/rce-in-browser-exploitation-framework-beef/</guid>
      <description>Let me preface this post by saying that this vulnerability is already fixed, and was caught pretty early during the development process. The vulnerability was originally introduced during a merge for the new DNS extension, and was promptly patched by antisnatchor on 03022014. Although this vulnerability was caught fairly quickly, it still made it into the master branch. I post this only because I&amp;rsquo;ve seen too many penetration testers leaving their tools externally exposed, often with default credentials.</description>
    </item>
    
    <item>
      <title>LFI to shell in Coldfusion 6-10</title>
      <link>https://dronesec.net/blog/lfi-to-shell-in-coldfusion-6-10/</link>
      <pubDate>Wed, 02 Apr 2014 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/lfi-to-shell-in-coldfusion-6-10/</guid>
      <description>ColdFusion has several very popular LFI&amp;rsquo;s that are often used to fetch CF hashes, which can then be passed or cracked/reversed. A lesser use of this LFI, one that I haven&amp;rsquo;t seen documented as of yet, is actually obtaining a shell. When you can&amp;rsquo;t crack or pass, what&amp;rsquo;s left?
The less-than-obvious solution is to exploit CFML&amp;rsquo;s parser, which acts much in the same way that PHP does when used in HTML.</description>
    </item>
    
    <item>
      <title>IBM Tealeaf CX (v8 Release 8) Remote OS Command Injection / LFI</title>
      <link>https://dronesec.net/blog/ibm-tealeaf-cx-v8-release-8-remote-os-command-injection-/-lfi/</link>
      <pubDate>Wed, 26 Mar 2014 22:51:11 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/ibm-tealeaf-cx-v8-release-8-remote-os-command-injection-/-lfi/</guid>
      <description>Tealeaf Technologies was purchased by IBM in May of 2012, and is a customer buying analytics application. Essentially, an administrator will configure a Tealeaf server that accepts analytic data from remote servers, which it then generates various models, graphs, reports, etc based on the aggregate of data. Their analytics status/server monitoring application is vulnerable to a fairly trivial OS command injection vulnerability, as well as local file inclusion. This vulnerability was discovered on a PCI engagement against a large retailer; the LFI was used to pull PHP files and hunt for RCE.</description>
    </item>
    
    <item>
      <title>meterpreter shell upgrades using powershell</title>
      <link>https://dronesec.net/blog/meterpreter-shell-upgrades-using-powershell/</link>
      <pubDate>Mon, 10 Mar 2014 22:31:47 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/meterpreter-shell-upgrades-using-powershell/</guid>
      <description>One of my primary goals during development of clusterd was ensuring reliability and covertness during remote deploys. It&amp;rsquo;s no secret that antivirus routinely eats vanilla meterpreter shells. For this, the --gen-payload flag generates a war file with java/jsp_shell_reverse_tcp tucked inside. This is used due to it being largely undetected by AV, and our environments are perfectly suited for it. However, Meterpreter is a fantastic piece of software, and it&amp;rsquo;d be nice to be able to elevate from this simple JSP shell into it.</description>
    </item>
    
    <item>
      <title>introduction</title>
      <link>https://dronesec.net/blog/introduction/</link>
      <pubDate>Sun, 02 Mar 2014 22:51:11 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/introduction/</guid>
      <description>This isn&amp;rsquo;t a real introduction post, just a note that I&amp;rsquo;m migrating from Google Blogger to Github Pages with Octopress. So far it&amp;rsquo;s great. I&amp;rsquo;m going to be slowly migrating all posts over from Blogger into here, though I may skip a few early posts that aren&amp;rsquo;t as interesting.
Hopefully it provides me with the functionality that I&amp;rsquo;ve been looking for.</description>
    </item>
    
    <item>
      <title>ganib project management 2.3 SQLi</title>
      <link>https://dronesec.net/blog/ganib-project-management-2.3-sqli/</link>
      <pubDate>Mon, 24 Feb 2014 22:03:07 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/ganib-project-management-2.3-sqli/</guid>
      <description>Ganib is a project management tool supporting all the glorious project management utilities. The latest version, 2.3 and below, is vulnerable to multiple SQL injection vectors.
The first SQL injection vector is a post-auth UPDATE injection in changetheme.jsp:
String theme = request.getParameter(&amp;#34;theme&amp;#34;); User user = (User) pageContext.getAttribute(&amp;#34;user&amp;#34;, PageContext.SESSION_SCOPE); if( user != null &amp;amp;&amp;amp; user.getID() != null ) { DBBean db = new DBBean(); try { String query = &amp;#34;UPDATE PN_PERSON SET THEME_ID = &amp;#39;&amp;#34; + theme + &amp;#34;&amp;#39; WHERE PERSON_ID = &amp;#34; + user.</description>
    </item>
    
    <item>
      <title>Fetching JBoss MBean method hashes</title>
      <link>https://dronesec.net/blog/fetching-jboss-mbean-method-hashes/</link>
      <pubDate>Sun, 26 Jan 2014 01:24:19 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/fetching-jboss-mbean-method-hashes/</guid>
      <description>Matasano published one of two canonical papers on JBoss exploitation. While working on a fresh new tool, I came across the JMXInvokerServlet technique, which uses serialized Java requests to deploy to remote MBeans. This uses a specific object hash to route the JMX request to the correct MBean; in our case, the gold is jboss.jmx:name=Invoker.
In this paper, Matasano provides the hash for JBoss 4.0.3SP1, but does not list any others, nor show how it derived this.</description>
    </item>
    
    <item>
      <title>Dolibarr 3.4.0 - Multiple Vulnerabilities</title>
      <link>https://dronesec.net/blog/dolibarr-3.4.0-multiple-vulnerabilities/</link>
      <pubDate>Mon, 14 Oct 2013 22:13:15 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/dolibarr-3.4.0-multiple-vulnerabilities/</guid>
      <description>Dolibarr is an open source, enterprise-grade ERP/CRM application developed in PHP. The latest stable release, 3.4.0, is vulnerable to a host of remotely exploitable post and pre auth vulnerabilities, along with several seriously mind-bending security/architecture choices. These vulnerabilities and issues were privately disclosed to the vendor, and the SQLi was patched in version 3.4.1. However, their sanitization methods were not fixed, and no mention was made on a future patch. Other SQLi vectors are likely.</description>
    </item>
    
    <item>
      <title>OpenEMM-2013 SOAP SQLi/Stored XSS</title>
      <link>https://dronesec.net/blog/openemm-2013-soap-sqli/stored-xss/</link>
      <pubDate>Sun, 28 Jul 2013 22:24:15 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/openemm-2013-soap-sqli/stored-xss/</guid>
      <description>OpenEMM is one of the most popular enterprise-grade email marketing software currently on the market; the best part of it, too, is that it&amp;rsquo;s free and open source. The entire stack is java, with some random shell/Python scripts for configuration. On inspection of the software, it appeared there were several SQL injection vulnerabilities due in part to a lack of input sanitation. This vulnerability was privately disclosed to the vendor, and a patch will be released shortly and backported to OpenEMM 2013 and 2011.</description>
    </item>
    
    <item>
      <title>solving RA1NXing Bots</title>
      <link>https://dronesec.net/blog/solving-ra1nxing-bots/</link>
      <pubDate>Wed, 10 Jul 2013 22:31:29 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/solving-ra1nxing-bots/</guid>
      <description>RA1NXing Bots is a vulnerable image intended to jump start security researches&amp;rsquo; interest in botnets and their exploitability. This vulnerable image was brought to us by Brian Wallace (@botnet_hunter), a botnet security researcher at Cylance and good friend (and Ballast Security co-founder). This was a pretty interesting vulnerable image, and good exposure into the sometimes seedy and malevolent world of botnets.
As such, the iconic nmap:
# Nmap 6.25 scan initiated Mon Jul 8 02:08:29 2013 as: nmap -sS -A -T5 -p- -oN bot.</description>
    </item>
    
    <item>
      <title>introducing zarp</title>
      <link>https://dronesec.net/blog/introducing-zarp/</link>
      <pubDate>Tue, 02 Jul 2013 22:37:15 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/introducing-zarp/</guid>
      <description>I&amp;rsquo;ve been quietly developing a local network attack tool for quite a while now, and it&amp;rsquo;s approaching a state I deem &amp;lsquo;presentable&amp;rsquo;. Bugs are still being ironed out, and tons of features are still planned, but I&amp;rsquo;ve gotten some great feedback over the past few months and decided it was time for an official introductory post. This post serves as an introduction into the current capabilities of the framework, as well as a timeline for future development and goals.</description>
    </item>
    
    <item>
      <title>Collabtive 1.0 - SQLi</title>
      <link>https://dronesec.net/blog/collabtive-1.0-sqli/</link>
      <pubDate>Fri, 21 Jun 2013 22:40:53 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/collabtive-1.0-sqli/</guid>
      <description>Collabtive is a web-based collaboration tool for project management, developed in PHP. The latest version, Collabtive 1.0, is vulnerable to remote authenticated SQL injection. Sourceforge page can be found here, which appears to be clocking in just over 1000 downloads a week. This issue was reported privately to the developers, and fixed in their Github repository.
User profiles are viewed/managed by manageuser.php, and upon loading a profile, runs the following:</description>
    </item>
    
    <item>
      <title>Asus RT56U Remote Command Injection</title>
      <link>https://dronesec.net/blog/asus-rt56u-remote-command-injection/</link>
      <pubDate>Wed, 05 Jun 2013 22:45:20 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/asus-rt56u-remote-command-injection/</guid>
      <description>After discovering a couple vulnerabilities in the Asus RT56U prior, I decided to check out the latest firmware and hunt around for a few more.
I was running 3.0.0.4.342, which happens to be one version behind the latest (3.0.0.4.360), so I did a sweep of both. I enabled telnet on the router and hunted around, which led me to an unlinked page, Main_Analysis_Content.asp. This page hosts a slew of diagnostic tools, including the ability to ping network systems.</description>
    </item>
    
    <item>
      <title>PHD Help Desk 2.12 - SQLi/XSS</title>
      <link>https://dronesec.net/blog/phd-help-desk-2.12-sqli/xss/</link>
      <pubDate>Sun, 02 Jun 2013 22:55:27 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/phd-help-desk-2.12-sqli/xss/</guid>
      <description>PHD Help Desk is a help desk application used for managing help tickets in corporate/enterprise environments. The latest version (2.12) is vulnerable to, well, quite a few instances of SQLi and XSS. I&amp;rsquo;ll try and go through a couple, but there are so many it&amp;rsquo;s sort of embarrassing, and none of them are at all complex. The software is clocking ~200 downloads/week on Sourceforge, and no telling how many off their website, so it&amp;rsquo;s definitely still out there somewhere.</description>
    </item>
    
    <item>
      <title>Kimai v0.9.2 - SQLi</title>
      <link>https://dronesec.net/blog/kimai-v0.9.2-sqli/</link>
      <pubDate>Mon, 20 May 2013 23:01:44 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/kimai-v0.9.2-sqli/</guid>
      <description>Kimai is a time tracking solution built on the typical LAMP stack. Multiple vulnerabilities were discovered that could allow remote code execution on the remote server. These appear to be fixed in their source repository (here), but none of the distribution packages (v0.9.2.1306-3) have the patched version.
On installation, a default administrative account is generated with the following credentials: admin:changeme. The /install/ folder is not automatically deleted, but instead a pop-up is shown each time the administrator logs in, alerting them that they should delete this folder in order to protect their system from malicious modifications.</description>
    </item>
    
    <item>
      <title>Motorola Surfboard - Multiple Vulnerabilities</title>
      <link>https://dronesec.net/blog/motorola-surfboard-multiple-vulnerabilities/</link>
      <pubDate>Sat, 20 Apr 2013 23:06:45 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/motorola-surfboard-multiple-vulnerabilities/</guid>
      <description>It would appear that these vulnerabilities were disclosed a few years ago (CVE-2008-2002 and CVE-2006-5196), but my relatively new (1-2 years) Motorola Surfboard SB5101U (verified against both the 101 and 101U), loaded with SB5101NU-2.1.7.0-GA-00-388-NOSH, appears to be vulnerable to the same CSRF&amp;rsquo;s exposed prior. With no authentication system in place at all, it would appear that a local DoS is not much of a concern to them. It&amp;rsquo;s interesting that, despite the sudden flood of discovered vulnerabilities in routers, nobody is really taking a look at the other piece of hardware between you and the ISP.</description>
    </item>
    
    <item>
      <title>solving brainpan</title>
      <link>https://dronesec.net/blog/solving-brainpan/</link>
      <pubDate>Tue, 02 Apr 2013 23:09:43 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/solving-brainpan/</guid>
      <description>Brainpan is the brainchild of superkojiman over at vulnhub, and has some pretty interesting (and frustrating) twists and turns. This boot2root is more focused on exploitation of 0days in custom written software, with no metasploit modules or google hunting necessary. With that, the nmap:
root@127:~# nmap -sS -A -p- -T5 192.168.1.110 Starting Nmap 6.25 ( http://nmap.org ) at 2013-03-27 22:06 CDT Nmap scan report for brainpan (192.168.1.110) Host is up (0.</description>
    </item>
    
    <item>
      <title>Protostar solutions - Stack Levels</title>
      <link>https://dronesec.net/blog/protostar-solutions-stack-levels/</link>
      <pubDate>Sat, 30 Mar 2013 23:21:16 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/protostar-solutions-stack-levels/</guid>
      <description>Part two of the three exploit exercises available. This set of challenges focused purely on memory corruption via stack overflows; the challenges here weren&amp;rsquo;t too difficult, but I wanted to work through them anyway. A post with the remaining levels will follow.
user@protostar:~$ python -c &amp;#34;print &amp;#39;A&amp;#39;*70&amp;#34; | ./stack0 you have changed the &amp;#39;modified&amp;#39; variable user@protostar:~$ user@protostar:~$ ./stack1 $(perl -e &amp;#39;print &amp;#34;A&amp;#34;x64 . &amp;#34;dcba&amp;#34;&amp;#39;) you have correctly got the variable to the right value user@protostar:~$ It&amp;rsquo;s also worth noting that, if you&amp;rsquo;re loading this into gdb, the modified variable is volatile, so if you p &amp;amp;modified and don&amp;rsquo;t get the right value, don&amp;rsquo;t worry.</description>
    </item>
    
    <item>
      <title>Nebula Solutions - All Levels</title>
      <link>https://dronesec.net/blog/nebula-solutions-all-levels/</link>
      <pubDate>Sat, 30 Mar 2013 22:46:33 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/nebula-solutions-all-levels/</guid>
      <description>Nebula is the first of three exploit discs provided by exploit exercises. I&amp;rsquo;ve seen a couple walkthroughs of these levels around, but as a completionist, and for future reference, I&amp;rsquo;ve cleaned my notes up a bit and am posting them here. I will also post my notes for the other two systems sometime after. This post includes a walkthrough of all 20 levels.
#!/bin/bash gcc /tmp/shell.c -o /home/flag03/shell chmod +s /home/flag03/shell You&amp;rsquo;ll just need to create shell.</description>
    </item>
    
    <item>
      <title>lshell 0.9.15 pathing vulnerability</title>
      <link>https://dronesec.net/blog/lshell-0.9.15-pathing-vulnerability/</link>
      <pubDate>Sun, 30 Dec 2012 22:43:42 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/lshell-0.9.15-pathing-vulnerability/</guid>
      <description>While working through Kioptrix level 4, I stumbled into lshell, a limited shell environment developed in Python. I don&amp;rsquo;t want to walk through the vulnerability again, but at a high level versions &amp;lt;= 0.9.15 are vulnerable to an unsanitized eval() call with user supplied input. I couldn&amp;rsquo;t find a working PoC, so I wrote one.
This will verify the install and spawn a pseudo-shell for running commands on the remote host.</description>
    </item>
    
    <item>
      <title>Solving Hackademic-RTB2</title>
      <link>https://dronesec.net/blog/solving-hackademic-rtb2/</link>
      <pubDate>Sun, 18 Nov 2012 01:24:24 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/solving-hackademic-rtb2/</guid>
      <description>Here&amp;rsquo;s the second distro from mr. pr0n&amp;rsquo;s realistic pentest discs. This one was quite fun as I had almost zero experience with Joomla front ends, which so happens to be the entry point on this disc. A little disappointed with the finale, but overall impressed with this disc. With that, the iconic nmap:
# Nmap 6.01 scan initiated Wed Nov 14 16:45:09 2012 as: nmap -sS -p- -T5 -A -oN r2.</description>
    </item>
    
    <item>
      <title>Solving Hackademic-RTB1</title>
      <link>https://dronesec.net/blog/solving-hackademic-rtb1/</link>
      <pubDate>Tue, 13 Nov 2012 01:24:24 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/solving-hackademic-rtb1/</guid>
      <description>Hackademic is a pseudo-realistic boot2root box that aims for realism over puzzles or steganography (or obscurity like pwn0s2..). With that, lets start:
The initial scan:
# Nmap 6.01 scan initiated Tue Nov 13 22:16:40 2012 as: nmap -sSV -F -T5 -oN hack.scan 192.168.1.168 Nmap scan report for 192.168.1.168 Host is up (0.00028s latency). Not shown: 98 filtered ports PORT STATE SERVICE VERSION 22/tcp closed ssh 80/tcp open http Apache httpd 2.</description>
    </item>
    
    <item>
      <title>FastSpy 2.1.1 Buffer Overflow</title>
      <link>https://dronesec.net/blog/fastspy-2.1.1-buffer-overflow/</link>
      <pubDate>Wed, 03 Oct 2012 00:15:10 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/fastspy-2.1.1-buffer-overflow/</guid>
      <description>FastSpy is an oooooooooooooooooooold multithreaded network scanner, circa 1999, that doesn&amp;rsquo;t really see any use nowadays. I started using Koders to dig around projects and find potential exploits, and ran across this one. It&amp;rsquo;s drop-dead simple in practice (deceptively so), and there were a few interesting parts to it so I figured I&amp;rsquo;d throw this up. At the time of writing, I don&amp;rsquo;t think the original developer is even around, and I haven&amp;rsquo;t seen this posted anywhere else.</description>
    </item>
    
    <item>
      <title>solving pwn0s v2</title>
      <link>https://dronesec.net/blog/solving-pwn0s-v2/</link>
      <pubDate>Thu, 09 Aug 2012 00:56:45 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/solving-pwn0s-v2/</guid>
      <description>pwn0sv2 is version two in the pwn0s series (?), and can be found here at our good friend g0tmi1k&amp;rsquo;s pentest page. I previously did a write up on the first version of pwn0s and enjoyed it, so I was excited to see there was another version available. Forewarning: obvious spoilers.
The zip comes packaged with a README with your standard disclaimer/info affair, along with the static IP. 10.10.10.100 is the set IP address.</description>
    </item>
    
    <item>
      <title>solving pwn0s</title>
      <link>https://dronesec.net/blog/solving-pwn0s/</link>
      <pubDate>Thu, 07 Jun 2012 00:15:10 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/solving-pwn0s/</guid>
      <description>pwnOS is a vulnerable VM used in penetration testing and vulnerability assessment. I thought this one was pretty fun, so I&amp;rsquo;ve decided to do a little write up in the various ways it can be attacked. The VM for it can be found on forums.hackingdojo.com; you need an account to access the forums, but it&amp;rsquo;s worth it.
The VM comes packaged as a split vmdk, so just loading up the vmx sets everything up.</description>
    </item>
    
  </channel>
</rss>
