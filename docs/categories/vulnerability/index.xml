<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vulnerability on dronesec</title>
    <link>https://dronesec.net/categories/vulnerability/</link>
    <description>Recent content in vulnerability on dronesec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Bryan Alexander</copyright>
    <lastBuildDate>Tue, 13 May 2014 20:57:53 +0000</lastBuildDate><atom:link href="https://dronesec.net/categories/vulnerability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rce in browser exploitation framework (BeEF)</title>
      <link>https://dronesec.net/blog/rce-in-browser-exploitation-framework-beef/</link>
      <pubDate>Tue, 13 May 2014 20:57:53 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/rce-in-browser-exploitation-framework-beef/</guid>
      <description>Let me preface this post by saying that this vulnerability is already fixed, and was caught pretty early during the development process. The vulnerability was originally introduced during a merge for the new DNS extension, and was promptly patched by antisnatchor on 03022014. Although this vulnerability was caught fairly quickly, it still made it into the master branch. I post this only because I&amp;rsquo;ve seen too many penetration testers leaving their tools externally exposed, often with default credentials.</description>
    </item>
    
    <item>
      <title>ganib project management 2.3 SQLi</title>
      <link>https://dronesec.net/blog/ganib-project-management-2.3-sqli/</link>
      <pubDate>Mon, 24 Feb 2014 22:03:07 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/ganib-project-management-2.3-sqli/</guid>
      <description>Ganib is a project management tool supporting all the glorious project management utilities. The latest version, 2.3 and below, is vulnerable to multiple SQL injection vectors.
The first SQL injection vector is a post-auth UPDATE injection in changetheme.jsp:
String theme = request.getParameter(&amp;#34;theme&amp;#34;); User user = (User) pageContext.getAttribute(&amp;#34;user&amp;#34;, PageContext.SESSION_SCOPE); if( user != null &amp;amp;&amp;amp; user.getID() != null ) { DBBean db = new DBBean(); try { String query = &amp;#34;UPDATE PN_PERSON SET THEME_ID = &amp;#39;&amp;#34; + theme + &amp;#34;&amp;#39; WHERE PERSON_ID = &amp;#34; + user.</description>
    </item>
    
    <item>
      <title>Collabtive 1.0 - SQLi</title>
      <link>https://dronesec.net/blog/collabtive-1.0-sqli/</link>
      <pubDate>Fri, 21 Jun 2013 22:40:53 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/collabtive-1.0-sqli/</guid>
      <description>Collabtive is a web-based collaboration tool for project management, developed in PHP. The latest version, Collabtive 1.0, is vulnerable to remote authenticated SQL injection. Sourceforge page can be found here, which appears to be clocking in just over 1000 downloads a week. This issue was reported privately to the developers, and fixed in their Github repository.
User profiles are viewed/managed by manageuser.php, and upon loading a profile, runs the following:</description>
    </item>
    
    <item>
      <title>lshell 0.9.15 pathing vulnerability</title>
      <link>https://dronesec.net/blog/lshell-0.9.15-pathing-vulnerability/</link>
      <pubDate>Sun, 30 Dec 2012 22:43:42 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/lshell-0.9.15-pathing-vulnerability/</guid>
      <description>While working through Kioptrix level 4, I stumbled into lshell, a limited shell environment developed in Python. I don&amp;rsquo;t want to walk through the vulnerability again, but at a high level versions &amp;lt;= 0.9.15 are vulnerable to an unsanitized eval() call with user supplied input. I couldn&amp;rsquo;t find a working PoC, so I wrote one.
This will verify the install and spawn a pseudo-shell for running commands on the remote host.</description>
    </item>
    
  </channel>
</rss>
