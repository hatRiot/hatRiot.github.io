<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lfi on dronesec</title>
    <link>https://dronesec.net/categories/lfi/</link>
    <description>Recent content in lfi on dronesec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Bryan Alexander</copyright>
    <lastBuildDate>Wed, 02 Apr 2014 15:10:04 +0000</lastBuildDate><atom:link href="https://dronesec.net/categories/lfi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LFI to shell in Coldfusion 6-10</title>
      <link>https://dronesec.net/blog/lfi-to-shell-in-coldfusion-6-10/</link>
      <pubDate>Wed, 02 Apr 2014 15:10:04 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/lfi-to-shell-in-coldfusion-6-10/</guid>
      <description>ColdFusion has several very popular LFI&amp;rsquo;s that are often used to fetch CF hashes, which can then be passed or cracked/reversed. A lesser use of this LFI, one that I haven&amp;rsquo;t seen documented as of yet, is actually obtaining a shell. When you can&amp;rsquo;t crack or pass, what&amp;rsquo;s left?
The less-than-obvious solution is to exploit CFML&amp;rsquo;s parser, which acts much in the same way that PHP does when used in HTML.</description>
    </item>
    
    <item>
      <title>IBM Tealeaf CX (v8 Release 8) Remote OS Command Injection / LFI</title>
      <link>https://dronesec.net/blog/ibm-tealeaf-cx-v8-release-8-remote-os-command-injection-/-lfi/</link>
      <pubDate>Wed, 26 Mar 2014 22:51:11 +0000</pubDate>
      
      <guid>https://dronesec.net/blog/ibm-tealeaf-cx-v8-release-8-remote-os-command-injection-/-lfi/</guid>
      <description>Tealeaf Technologies was purchased by IBM in May of 2012, and is a customer buying analytics application. Essentially, an administrator will configure a Tealeaf server that accepts analytic data from remote servers, which it then generates various models, graphs, reports, etc based on the aggregate of data. Their analytics status/server monitoring application is vulnerable to a fairly trivial OS command injection vulnerability, as well as local file inclusion. This vulnerability was discovered on a PCI engagement against a large retailer; the LFI was used to pull PHP files and hunt for RCE.</description>
    </item>
    
  </channel>
</rss>
